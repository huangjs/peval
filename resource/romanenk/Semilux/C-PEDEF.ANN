(*STYLE* CONTINUATION-PASSING)

(*LOAD-FILES*)

(*ADT-FILES* "scheme.adt" "pedef.adt")

(*DEFINITIONS*

(DEFINE (PE-DEF PGM CONF) (() ()) (S D) () (P# PE-DEF/$1 PGM CONF))

(DEFINE (PE-START! PGM) (()) (S) #T (LET ((LAM* (CDR (CAR (CDR (CDR (CDR (CDR 
PGM)))))))) (LET ((DEF* (CDR (CAR (CDR (CDR (CDR PGM))))))) (LET ((ADT* (CDR (
CAR (CDR (CDR PGM)))))) (LET ((LDF* (CDR (CAR (CDR PGM))))) (LET ((STYLE (CAR 
(CDR (CAR PGM))))) (LET ((G6 (CAR DEF*))) (LET ((DEF G6)) (LET ((BTP (CAR (CDR
(CDR (CDR DEF)))))) (LET ((NAME (CAR (CAR (CDR DEF))))) (BEGIN (IF (EQ? STYLE 
(QUOTE CONTINUATION-PASSING)) (QUOTE ()) (ERROR (QUOTE 
"c-pedef: wrong style of annotation:") STYLE)) (CONS LDF* (CONS ADT* (CONS 
NAME (CONS BTP (QUOTE ()))))))))))))))))

(DEFINE (PE-CONFIGURATION PGM CONF) (() ()) (S D) #T (LET# ((CONF CONF)) (LET 
((DEF* (CDR (CAR (CDR (CDR (CDR PGM))))))) (P FIND-DEF-AND-CONTINUE (O# CAR 
CONF) DEF* (LAMBDA 2)))))

(DEFINE (FIND-DEF-AND-CONTINUE NAME DEF* C) (() () (2)) (D S C) #T (IF (NULL? 
DEF*) (ERROR# (LIFT (QUOTE "Unexpected function name:")) NAME) (LET ((G7 (CAR 
DEF*))) (LET ((UNFOLD#? (CAR (CDR (CDR (CDR (CDR G7))))))) (LET ((NAME# (CAR (
CAR (CDR G7))))) (IF UNFOLD#? (P FIND-DEF-AND-CONTINUE NAME (CDR DEF*) C) (P# 
FIND-DEF-AND-CONTINUE/$1 NAME# NAME DEF* C)))))))

(DEFINE (SPLIT FORMAL* PVALUE* ACSP BTP PGM C) (() () () () () (1 6)) (S D S S
S C) #T (LET# ((PVALUE* PVALUE*)) (IF (NULL? FORMAL*) (A (1 6) C (LIFT (QUOTE 
())) (LAMBDA 3)) (P SPLIT (CDR FORMAL*) (O# CDR PVALUE*) (CDR ACSP) (CDR BTP) 
PGM (LAMBDA 6)))))

(DEFINE (SPLIT-PVALUE FORMAL PVALUE ACS BTV PGM RF* N C) (() () () () () () ()
(5 9)) (S D S S S D D D) #T (LET# ((PVALUE PVALUE)) (LET# ((RF* RF*)) (LET# ((
N N)) (LET# ((C C)) (IF (EQ? BTV (QUOTE S)) (A# (5 9) C PVALUE RF* N) (IF (EQ?
BTV (QUOTE C)) (LET# ((I (O# CLOSURE/INDEX PVALUE))) (P 
FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM (LAMBDA 8))) (IF (BT-RESID? BTV) (
LET# ((RF (O# GENERATE-PARAM-NAME (LIFT FORMAL) N))) (A# (5 9) C RF (O# CONS 
RF RF*) (O# + (LIFT (QUOTE 1)) N))) (ERROR# (LIFT (QUOTE 
"split-pvalue: unexpected binding time value:")) (LIFT BTV))))))))))

(DEFINE (SPLIT-PVALUE* FORMAL PVALUE* ACSP BTP OFFSET ARITY PGM RF* N C) (() 
() () () () () () () () (7 10)) (S D S S S S S D D C) #T (LET# ((PVALUE* 
PVALUE*)) (IF (= OFFSET ARITY) (A (7 10) C (LIFT (QUOTE ())) RF* N) (P 
SPLIT-PVALUE* FORMAL PVALUE* (CDR ACSP) (CDR BTP) (+ (QUOTE 1) OFFSET) ARITY 
PGM RF* N (LAMBDA 10)))))

(DEFINE (PE-EXP E R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 13 14 15 16 17
19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S C S D) #T (
LET# ((K K)) (IF (LET ((NAME E)) (NOT (PAIR? E))) (LET ((NAME E)) (A# (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (A (3 
4 18 20 53 62 63 66 67) R NAME))) (IF (EQUAL? (CAR E) (QUOTE ERROR#)) (LET ((
ARGS (CDR E))) (P PE-EXP* ARGS R PGM (LAMBDA 11))) (IF (EQUAL? (CAR E) (QUOTE 
ERROR)) (LET ((ARGS (CDR E))) (P PE-EXP* ARGS R PGM (LAMBDA 12))) (IF (EQUAL? 
(CAR E) (QUOTE LIFT)) (LET ((E1 (CAR (CDR E)))) (P PE-EXP E1 R PGM (P# 
PE-EXP/$1 K))) (IF (EQUAL? (CAR E) (QUOTE QUOTE)) (LET ((VALUE (CAR (CDR E))))
(A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56
64) K (LIFT VALUE))) (IF (EQUAL? (CAR E) (QUOTE IF#)) (LET ((E3 (CAR (CDR (CDR
(CDR E)))))) (LET ((E2 (CAR (CDR (CDR E))))) (LET ((E1 (CAR (CDR E)))) (P 
PE-EXP E1 R PGM (P# PE-EXP/$2 K E2 E3 R PGM))))) (IF (EQUAL? (CAR E) (QUOTE IF
)) (LET ((E3 (CAR (CDR (CDR (CDR E)))))) (LET ((E2 (CAR (CDR (CDR E))))) (LET 
((E1 (CAR (CDR E)))) (P PE-EXP E1 R PGM (P# PE-EXP/$3 E2 E3 R PGM K))))) (IF (
EQUAL? (CAR E) (QUOTE LET#)) (LET ((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (
CAR (CDR (CAR (CAR (CDR E))))))) (LET ((FORMAL (CAR (CAR (CAR (CDR E)))))) (P 
PE-EXP ACTUAL R PGM (P# PE-EXP/$5 BODY FORMAL R PGM K))))) (IF (EQUAL? (CAR E)
(QUOTE LET)) (LET ((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR (CAR (
CAR (CDR E))))))) (LET ((FORMAL (CAR (CAR (CAR (CDR E)))))) (P PE-EXP ACTUAL R
PGM (P# PE-EXP/$6 BODY FORMAL R PGM K))))) (IF (EQUAL? (CAR E) (QUOTE BEGIN#))
(LET ((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR E)))) (P PE-EXP 
ACTUAL R PGM (P# PE-EXP/$7 BODY R PGM K)))) (IF (EQUAL? (CAR E) (QUOTE BEGIN))
(LET ((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR E)))) (P PE-EXP 
ACTUAL R PGM (P# PE-EXP/$8 BODY R PGM K)))) (IF (EQUAL? (CAR E) (QUOTE O#)) (
LET ((ARGS (CDR (CDR E)))) (LET ((NAME (CAR (CDR E)))) (P PE-EXP* ARGS R PGM (
LAMBDA 24)))) (IF (EQUAL? (CAR E) (QUOTE O)) (LET ((ARGS (CDR (CDR E)))) (LET 
((NAME (CAR (CDR E)))) (P PE-O NAME ARGS R PGM K))) (IF (EQUAL? (CAR E) (QUOTE
P#)) (LET ((ARGS (CDR (CDR E)))) (LET ((NAME (CAR (CDR E)))) (LET ((G8 (
PE-LOOKUP-DEF NAME PGM))) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR G8))))))))
(LET ((BTP (CAR (CDR (CDR (CDR G8)))))) (LET ((ACSP (CAR (CDR (CDR G8))))) (
LET ((FORMALS (CDR (CAR (CDR G8))))) (P EXTRACT ARGS R ACSP BTP PGM (LAMBDA 25
))))))))) (IF (EQUAL? (CAR E) (QUOTE P)) (LET ((ARGS (CDR (CDR E)))) (LET ((
NAME (CAR (CDR E)))) (LET ((G9 (PE-LOOKUP-DEF NAME PGM))) (LET ((BODY (CAR (
CDR (CDR (CDR (CDR (CDR G9)))))))) (LET ((FORMALS (CDR (CAR (CDR G9))))) (P 
MAKE-ENV-AND-CONTINUE FORMALS ARGS (LAMBDA 26) (LAMBDA 27))))))) (IF (EQUAL? (
CAR E) (QUOTE LAMBDA#)) (LET ((INDEX (CAR (CDR E)))) (LET ((G10 (PE-LOOKUP-LAM
INDEX PGM))) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR (CDR (CDR G10))))))))))
(LET ((NAME* (CAR (CDR (CDR (CDR (CDR G10))))))) (LET ((BTP (CAR (CDR (CDR G10
))))) (LET ((FORMALS (CAR (CDR G10)))) (P MAKE-ENV-AND-CONTINUE NAME* NAME* (
LAMBDA 28) (LAMBDA 31)))))))) (IF (EQUAL? (CAR E) (QUOTE LAMBDA)) (LET ((INDEX
(CAR (CDR E)))) (LET ((G11 (PE-LOOKUP-LAM INDEX PGM))) (LET ((FREE-NAMES (CAR 
(CDR (CDR (CDR (CDR G11))))))) (LET ((FORMALS (CAR (CDR G11)))) (A# (0 13 14 
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# 
MK-CLOSURE (LIFT INDEX) (P MY-MAP (LAMBDA 32) FREE-NAMES))))))) (IF (EQUAL? (
CAR E) (QUOTE A#)) (LET ((ARGS (CDR (CDR (CDR E))))) (LET ((PROC (CAR (CDR (
CDR E))))) (P PE-EXP PROC R PGM (P# PE-EXP/$9 ARGS R PGM K)))) (IF (EQUAL? (
CAR E) (QUOTE A)) (LET ((ARGS (CDR (CDR (CDR E))))) (LET ((PROC (CAR (CDR (CDR
E))))) (LET ((ACS (CAR (CDR E)))) (P PE-EXP PROC R PGM (P# PE-EXP/$10 ACS ARGS
R PGM K))))) (LET ((ARGS (CDR E))) (LET ((NAME (CAR E))) (P PE-O NAME ARGS R 
PGM K))))))))))))))))))))))))

(DEFINE (PE-EXP* E* R PGM K) (() (3 4 18 20 53 62 63 66 67) () (11 12 24 33 41
52)) (S C S C) #T (IF (NULL? E*) (A (11 12 24 33 41 52) K (LIFT (QUOTE ()))) (
P PE-EXP* (CDR E*) R PGM (LAMBDA 41))))

(DEFINE (PE-O NAME ARGS R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S S C 
S D) #T (LET# ((K K)) (LET ((%00000 (LENGTH ARGS))) (IF (EQV? %00000 (QUOTE 0)
) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 
56 64) K (LIFT (X-CALL NAME))) (IF (EQV? %00000 (QUOTE 1)) (P PE-EXP (CAR ARGS
) R PGM (P# PE-O/$1 K NAME)) (IF (EQV? %00000 (QUOTE 2)) (P PE-EXP (CAR ARGS) 
R PGM (P# PE-O/$2 ARGS R PGM K NAME)) (IF (EQV? %00000 (QUOTE 3)) (P PE-EXP (
CAR ARGS) R PGM (P# PE-O/$4 ARGS R PGM K NAME)) (IF (EQV? %00000 (QUOTE 4)) (P
PE-EXP (CAR ARGS) R PGM (P# PE-O/$7 ARGS R PGM K NAME)) (P PE-EXP* ARGS R PGM 
(LAMBDA 52))))))))))

(DEFINE (MAKE-LAM-FORMALS-AND-CONTINUE FORMAL* R C) (() (62 63 66 67) (30 54))
(S C C) #T (IF (NULL? FORMAL*) (A (30 54) C (LIFT (QUOTE ())) R) (P 
MAKE-LAM-FORMALS-AND-CONTINUE (CDR FORMAL*) R (LAMBDA 54))))

(DEFINE (EXTRACT E* R ACSP BTP PGM C) (() (3 4 18 20 53 62 63 66 67) () () () 
(25 57)) (S C S S S C) #T (IF (NULL? E*) (A (25 57) C (LIFT (QUOTE ())) (LIFT 
(QUOTE ()))) (P EXTRACT (CDR E*) R (CDR ACSP) (CDR BTP) PGM (LAMBDA 57))))

(DEFINE (EXTRACT-VALUE VALUE ACS BTV PGM RA* C) (() () () () () (55 60)) (D S 
S S D D) #T (LET# ((VALUE VALUE)) (LET# ((RA* RA*)) (LET# ((C C)) (IF (EQ? BTV
(QUOTE S)) (A# (55 60) C VALUE RA*) (IF (EQ? BTV (QUOTE C)) (LET# ((I (O# 
CLOSURE/INDEX VALUE))) (P FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM (LAMBDA 
59))) (IF (BT-RESID? BTV) (A# (55 60) C (LIFT (QUOTE _)) (O# CONS VALUE RA*)) 
(ERROR# (LIFT (QUOTE "extract-value: unexpected binding time value:")) (LIFT 
BTV)))))))))

(DEFINE (EXTRACT-VALUE* V* ACSP BTP OFFSET ARITY PGM RA* C) (() () () () () ()
() (58 61)) (D S S S S S D C) #T (LET# ((V* V*)) (IF (= OFFSET ARITY) (A (58 
61) C (LIFT (QUOTE ())) RA*) (P EXTRACT-VALUE* V* (CDR ACSP) (CDR BTP) (+ (
QUOTE 1) OFFSET) ARITY PGM RA* (LAMBDA 61)))))

(DEFINE (FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM C) (() () () (8 38 59)) (D
S S C) #T (LET# ((I I)) (LET ((LEN-ACS (LENGTH ACS))) (BEGIN# (IF (= LEN-ACS (
QUOTE 0)) (ERROR# (LIFT (QUOTE "Searching in empty abstract closure set:")) I)
(LIFT (QUOTE ()))) (P FIND-UNF-LAM-LOOP I ACS (QUOTE 0) LEN-ACS PGM C)))))

(DEFINE (FIND-UNF-LAM-LOOP I ACS OFFSET LEN-ACS PGM C) (() () () () () (8 38 
59)) (D S S S S C) #T (LET# ((I I)) (LET ((CLOSURE-INDEX (LIST-REF ACS OFFSET)
)) (LET ((NEW-OFFSET (+ (QUOTE 1) OFFSET))) (IF (= NEW-OFFSET LEN-ACS) (A (8 
38 59) C (PE-LOOKUP-LAM CLOSURE-INDEX PGM)) (P# FIND-UNF-LAM-LOOP/$1 
CLOSURE-INDEX I ACS NEW-OFFSET LEN-ACS PGM C))))))

(DEFINE (MAKE-ENV-AND-CONTINUE NAME* E* F C) (() () (26 28) (27 31)) (S S C C)
#T (P EXTEND-ENV-AND-CONTINUE NAME* E* F (LAMBDA 62) C))

(DEFINE (EXTEND-ENV-AND-CONTINUE NAME* E* F R C) (() () (26 28 35) (62 66 67) 
(27 31 36 65)) (S S C C C) #T (IF (NULL? NAME*) (A (27 31 36 65) C R) (P 
EXTEND-ENV-AND-CONTINUE (CDR NAME*) (CDR E*) F R (LAMBDA 65))))

(DEFINE (LIST-TO-ENV-AND-CONTINUE NAME* VALUE* C) (() () (37)) (S D C) #T (P 
LIST-TO-ENV-LOOP NAME* VALUE* (QUOTE 0) (LENGTH NAME*) (LAMBDA 66) C))

(DEFINE (LIST-TO-ENV-LOOP NAME* VALUE* OFFSET ARITY R C) (() () () () (66 67) 
(37)) (S D S S C C) #T (LET# ((VALUE* VALUE*)) (IF (= OFFSET ARITY) (A (37) C 
R) (P LIST-TO-ENV-LOOP NAME* VALUE* (+ (QUOTE 1) OFFSET) ARITY (LAMBDA 67) C))
))

(DEFINE (MY-MAP F LST) ((32) ()) (C S) #T (IF (NULL? LST) (LIFT (QUOTE ())) (
O# CONS (A (32) F (CAR LST)) (P MY-MAP F (CDR LST)))))

(DEFINE (PE-DEF/$1 PGM CONF) (() ()) (S D) () (IF# (O# NULL? CONF) (LIFT (P 
PE-START! PGM)) (P PE-CONFIGURATION PGM CONF)))

(DEFINE (FIND-DEF-AND-CONTINUE/$1 NAME# NAME DEF* C) (() () () (2)) (S D S C) 
() (IF# (O# EQ? NAME (LIFT NAME#)) (A (2) C (CAR DEF*)) (P 
FIND-DEF-AND-CONTINUE NAME (CDR DEF*) C)))

(DEFINE (SPLIT/$1 C FORMAL* RN) ((1 6) () (3 4)) (C S C) () (LAMBDA# 5))

(DEFINE (SPLIT-PVALUE*/$1 C P*) ((7 10) ()) (C D) () (LAMBDA# 9))

(DEFINE (PE-EXP/$1 K) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 
46 47 48 49 50 51 56 64)) (D) () (LAMBDA# 13))

(DEFINE (PE-EXP/$2 K E2 E3 R PGM) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 
42 43 44 45 46 47 48 49 50 51 56 64) () () (3 4 18 20 53 62 63 66 67) ()) (D S
S C S) () (LAMBDA# 16))

(DEFINE (PE-EXP/$3 E2 E3 R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (0 13 
14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S S
C S D) () (LAMBDA# 17))

(DEFINE (PE-EXP/$4 V1 E2 E3 R PGM K) (() () () (3 4 18 20 53 62 63 66 67) () (
0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64))
(D S S C S D) () (IF# V1 (P PE-EXP E2 R PGM K) (P PE-EXP E3 R PGM K)))

(DEFINE (PE-EXP/$5 BODY FORMAL R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (
0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64))
(S S C S D) () (LAMBDA# 19))

(DEFINE (PE-EXP/$6 BODY FORMAL R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (
0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64))
(S S C S D) () (LAMBDA# 21))

(DEFINE (PE-EXP/$7 BODY R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 13 14 15
16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S C S D) 
() (LAMBDA# 22))

(DEFINE (PE-EXP/$8 BODY R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 13 14 15
16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S C S D) 
() (LAMBDA# 23))

(DEFINE (PE-EXP/$9 ARGS R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 13 14 15
16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S C S D) 
() (LAMBDA# 34))

(DEFINE (PE-EXP/$10 ACS ARGS R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (
S S C S D) () (LAMBDA# 39))

(DEFINE (PE-EXP*/$1 K V*) ((11 12 24 33 41 52) ()) (C D) () (LAMBDA# 40))

(DEFINE (PE-O/$1 K NAME) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 
45 46 47 48 49 50 51 56 64) ()) (D S) () (LAMBDA# 42))

(DEFINE (PE-O/$2 ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()) (S C
S D S) () (LAMBDA# 44))

(DEFINE (PE-O/$3 K NAME V1) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 
44 45 46 47 48 49 50 51 56 64) () ()) (D S D) () (LAMBDA# 43))

(DEFINE (PE-O/$4 ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()) (S C
S D S) () (LAMBDA# 47))

(DEFINE (PE-O/$5 ARGS R PGM K NAME V1) (() (3 4 18 20 53 62 63 66 67) () (0 13
14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) () ()
) (S C S D S D) () (LAMBDA# 46))

(DEFINE (PE-O/$6 K NAME V1 V2) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 
43 44 45 46 47 48 49 50 51 56 64) () () ()) (D S D D) () (LAMBDA# 45))

(DEFINE (PE-O/$7 ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()) (S C
S D S) () (LAMBDA# 51))

(DEFINE (PE-O/$8 ARGS R PGM K NAME V1) (() (3 4 18 20 53 62 63 66 67) () (0 13
14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) () ()
) (S C S D S D) () (LAMBDA# 50))

(DEFINE (PE-O/$9 ARGS R PGM K NAME V1 V2) (() (3 4 18 20 53 62 63 66 67) () (0
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()
() ()) (S C S D S D D) () (LAMBDA# 49))

(DEFINE (PE-O/$10 K NAME V1 V2 V3) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 
42 43 44 45 46 47 48 49 50 51 56 64) () () () ()) (D S D D D) () (LAMBDA# 48))

(DEFINE (EXTRACT/$1 ACSP BTP PGM RA* C P*) (() () () () (25 57) ()) (S S S D C
D) () (LAMBDA# 56))

(DEFINE (EXTRACT/$2 C P*) ((25 57) ()) (C D) () (LAMBDA# 55))

(DEFINE (EXTRACT-VALUE*/$1 C P*) ((58 61) ()) (C D) () (LAMBDA# 60))

(DEFINE (FIND-UNF-LAM-LOOP/$1 CLOSURE-INDEX I ACS NEW-OFFSET LEN-ACS PGM C) (
() () () () () () (8 38 59)) (S D S S S S C) () (IF# (O# = I (LIFT 
CLOSURE-INDEX)) (A (8 38 59) C (PE-LOOKUP-LAM CLOSURE-INDEX PGM)) (P 
FIND-UNF-LAM-LOOP I ACS NEW-OFFSET LEN-ACS PGM C)))

(DEFINE (EXTEND-ENV-AND-CONTINUE/$1 C NAME* R1) ((27 31 36 65) () (62 63 66 67
)) (C S C) () (LAMBDA# 64))

)

(*LAMBDAS*

(LAMBDA (V) (X) 0 () () () V)

(LAMBDA (R-FORMAL* R) (D C) 1 (CONF BODY PGM) (() () ()) (D S S) (O# CONS (
LIFT (QUOTE DEFINE)) (O# CONS (O# CONS (O# RETRIEVE-PROC-NAME! CONF) R-FORMAL*
) (O# CONS (P PE-EXP BODY R PGM (LAMBDA# 0)) (LIFT (QUOTE ()))))))

(LAMBDA (DEF) (S) 2 (CONF PGM) (() ()) (D S) (LET ((BODY (CAR (CDR (CDR (CDR (
CDR (CDR DEF)))))))) (LET ((BTP (CAR (CDR (CDR (CDR DEF)))))) (LET ((ACSP (CAR
(CDR (CDR DEF))))) (LET ((FORMALS (CDR (CAR (CDR DEF))))) (P SPLIT FORMALS (O#
CDR CONF) ACSP BTP PGM (LAMBDA 1)))))))

(LAMBDA (NAME) (S) 3 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 4 (FORMAL* P RN) (() () (3 4)) (S D C) (IF (EQUAL? NAME$ (
CAR FORMAL*)) P (A (3 4) RN NAME$)))

(LAMBDA (P RF*1 N) (D D D) 5 (C FORMAL* RN) ((1 6) () (3 4)) (C S C) (A (1 6) 
C RF*1 (LAMBDA 4)))

(LAMBDA (RF* RN) (D C) 6 (PVALUE* ACSP BTP PGM C FORMAL*) (() () () () (1 6) 
()) (D S S S C S) (P SPLIT-PVALUE (CAR FORMAL*) (O# CAR PVALUE*) (CAR ACSP) (
CAR BTP) PGM RF* (LIFT (QUOTE 0)) (P# SPLIT/$1 C FORMAL* RN)))

(LAMBDA (P* RF*1 N) (D D D) 7 (C I) ((5 9) ()) (D D) (A# (5 9) C (O# 
MK-CLOSURE I P*) RF*1 N))

(LAMBDA (LAM) (S) 8 (FORMAL PVALUE PGM RF* N C I) (() () () () () (5 9) ()) (S
D S D D D D) (LET ((BTP (CAR (CDR (CDR (CDR (CDR (CDR (CDR LAM))))))))) (LET (
(ACSP (CAR (CDR (CDR (CDR (CDR (CDR LAM)))))))) (P SPLIT-PVALUE* FORMAL (O# 
CLOSURE/VALUES PVALUE) ACSP BTP (QUOTE 0) (LENGTH BTP) PGM RF* N (LAMBDA 7))))
)

(LAMBDA (P RF*2 N) (D D D) 9 (C P*) ((7 10) ()) (C D) (A (7 10) C (O# CONS P 
P*) RF*2 N))

(LAMBDA (P* RF*1 N) (D D D) 10 (FORMAL PVALUE* OFFSET ACSP BTP PGM C) (() () 
() () () () (7 10)) (S D S S S S C) (P SPLIT-PVALUE FORMAL (O# LIST-REF 
PVALUE* (LIFT OFFSET)) (CAR ACSP) (CAR BTP) PGM RF*1 N (P# SPLIT-PVALUE*/$1 C 
P*)))

(LAMBDA (V*) (D) 11 (K) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45
46 47 48 49 50 51 56 64)) (D) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42
43 44 45 46 47 48 49 50 51 56 64) K (O# CONS (LIFT (QUOTE ERROR)) V*)))

(LAMBDA (V*) (D) 12 (K) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45
46 47 48 49 50 51 56 64)) (D) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42
43 44 45 46 47 48 49 50 51 56 64) K (ERROR# (LIFT (QUOTE 
"Error during partial evaluation:")) (O# CONS (LIFT (QUOTE ERROR)) V*))))

(LAMBDA (V1) (X) 13 (K) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45
46 47 48 49 50 51 56 64)) (D) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42
43 44 45 46 47 48 49 50 51 56 64) K (O# CONS (LIFT (QUOTE QUOTE)) (O# CONS V1 
(LIFT (QUOTE ()))))))

(LAMBDA (V) (X) 14 () () () V)

(LAMBDA (V) (X) 15 () () () V)

(LAMBDA (V1) (X) 16 (K E2 E3 R PGM) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40
42 43 44 45 46 47 48 49 50 51 56 64) () () (3 4 18 20 53 62 63 66 67) ()) (D S
S C S) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 
50 51 56 64) K (O# CONS (LIFT (QUOTE IF)) (O# CONS V1 (O# CONS (P PE-EXP E2 R 
PGM (LAMBDA# 14)) (O# CONS (P PE-EXP E3 R PGM (LAMBDA# 15)) (LIFT (QUOTE ())))
)))))

(LAMBDA (V1) (X) 17 (E2 E3 R PGM K) (() () (3 4 18 20 53 62 63 66 67) () (0 13
14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S S
C S D) (P# PE-EXP/$4 V1 E2 E3 R PGM K))

(LAMBDA (NAME$) (S) 18 (FORMAL R-FORMAL R) (() () (3 4 18 20 53 62 63 66 67)) 
(S D C) (IF (EQUAL? NAME$ FORMAL) R-FORMAL (A (3 4 18 20 53 62 63 66 67) R 
NAME$)))

(LAMBDA (V-ACTUAL) (X) 19 (BODY FORMAL R PGM K) (() () (3 4 18 20 53 62 63 66 
67) () (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51
56 64)) (S S C S D) (LET# ((R-FORMAL (O# GENERATE-VAR-NAME! (LIFT FORMAL)))) (
O# CONS (LIFT (QUOTE LET)) (O# CONS (O# CONS (O# CONS R-FORMAL (O# CONS 
V-ACTUAL (LIFT (QUOTE ())))) (LIFT (QUOTE ()))) (O# CONS (P PE-EXP BODY (
LAMBDA 18) PGM K) (LIFT (QUOTE ())))))))

(LAMBDA (NAME$) (S) 20 (FORMAL V-ACTUAL R) (() () (3 4 18 20 53 62 63 66 67)) 
(S D C) (IF (EQUAL? NAME$ FORMAL) V-ACTUAL (A (3 4 18 20 53 62 63 66 67) R 
NAME$)))

(LAMBDA (V-ACTUAL) (X) 21 (BODY FORMAL R PGM K) (() () (3 4 18 20 53 62 63 66 
67) () (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51
56 64)) (S S C S D) (P PE-EXP BODY (LAMBDA 20) PGM K))

(LAMBDA (V-ACTUAL) (X) 22 (BODY R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (
S C S D) (O# CONS (LIFT (QUOTE BEGIN)) (O# CONS V-ACTUAL (O# CONS (P PE-EXP 
BODY R PGM K) (LIFT (QUOTE ()))))))

(LAMBDA (V-ACTUAL) (X) 23 (BODY R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (
S C S D) (P PE-EXP BODY R PGM K))

(LAMBDA (V*) (D) 24 (K NAME) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 
44 45 46 47 48 49 50 51 56 64) ()) (D S) (IF (KEYWORD$? NAME) (A# (0 13 14 15 
16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# CONS 
(LIFT (QUOTE O)) (O# CONS (LIFT NAME) V*))) (A# (0 13 14 15 16 17 19 21 22 23 
29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# CONS (LIFT NAME) V*))))

(LAMBDA (PARGS R-ACTUAL*) (D D) 25 (K NAME) ((0 13 14 15 16 17 19 21 22 23 29 
34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()) (D S) (A# (0 13 14 15 16 17 
19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# CONS (LIFT 
(QUOTE P)) (O# CONS (O# GENERATE-PROC-NAME! (O# CONS (LIFT NAME) PARGS)) 
R-ACTUAL*))))

(LAMBDA (ARG1 K1) (S D) 26 (R PGM) ((3 4 18 20 53 62 63 66 67) ()) (C S) (P 
PE-EXP ARG1 R PGM K1))

(LAMBDA (R1) (C) 27 (BODY PGM K) (() () (0 13 14 15 16 17 19 21 22 23 29 34 39
40 42 43 44 45 46 47 48 49 50 51 56 64)) (S S D) (P PE-EXP BODY R1 PGM K))

(LAMBDA (NAME K1) (S D) 28 (R) ((3 4 18 20 53 62 63 66 67)) (C) (A# (64) K1 (A
(3 4 18 20 53 62 63 66 67) R NAME)))

(LAMBDA (V) (X) 29 () () () V)

(LAMBDA (R-FORMALS R2) (D C) 30 (K BODY PGM) ((0 13 14 15 16 17 19 21 22 23 29
34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) () ()) (D S S) (A# (0 13 14 15 
16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# CONS 
(LIFT (QUOTE LAMBDA)) (O# CONS R-FORMALS (O# CONS (P PE-EXP BODY R2 PGM (
LAMBDA# 29)) (LIFT (QUOTE ())))))))

(LAMBDA (R1) (C) 31 (FORMALS K BODY PGM) (() (0 13 14 15 16 17 19 21 22 23 29 
34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) () ()) (S D S S) (P 
MAKE-LAM-FORMALS-AND-CONTINUE FORMALS R1 (LAMBDA 30)))

(LAMBDA (NAME) (S) 32 (R) ((3 4 18 20 53 62 63 66 67)) (C) (A (3 4 18 20 53 62
63 66 67) R NAME))

(LAMBDA (V*) (D) 33 (K V) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 
45 46 47 48 49 50 51 56 64) ()) (D D) (A# (0 13 14 15 16 17 19 21 22 23 29 34 
39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# CONS (LIFT (QUOTE A)) (O# 
CONS V V*))))

(LAMBDA (V) (X) 34 (ARGS R PGM K) (() (3 4 18 20 53 62 63 66 67) () (0 13 14 
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)) (S C S 
D) (P PE-EXP* ARGS R PGM (LAMBDA 33)))

(LAMBDA (ARG1 K1) (S D) 35 (R PGM) ((3 4 18 20 53 62 63 66 67) ()) (C S) (P 
PE-EXP ARG1 R PGM K1))

(LAMBDA (R2) (C) 36 (BODY PGM K) (() () (0 13 14 15 16 17 19 21 22 23 29 34 39
40 42 43 44 45 46 47 48 49 50 51 56 64)) (S S D) (P PE-EXP BODY R2 PGM K))

(LAMBDA (R1) (C) 37 (FORMALS ARGS R BODY PGM K) (() () (3 4 18 20 53 62 63 66 
67) () () (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50
51 56 64)) (S S C S S D) (P EXTEND-ENV-AND-CONTINUE FORMALS ARGS (LAMBDA 35) 
R1 (LAMBDA 36)))

(LAMBDA (LAM) (S) 38 (PROC-V ARGS R PGM K) (() () (3 4 18 20 53 62 63 66 67) 
() (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 
64)) (D S C S D) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR (CDR (CDR LAM))))))
)))) (LET ((FREE-NAMES (CAR (CDR (CDR (CDR (CDR LAM))))))) (LET ((FORMALS (CAR
(CDR LAM)))) (P LIST-TO-ENV-AND-CONTINUE FREE-NAMES (O# CLOSURE/VALUES PROC-V)
(LAMBDA 37))))))

(LAMBDA (PROC-V) (X) 39 (ACS ARGS R PGM K) (() () (3 4 18 20 53 62 63 66 67) 
() (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 
64)) (S S C S D) (P FIND-UNF-LAM-IN-ACS-AND-CONTINUE (O# CLOSURE/INDEX PROC-V)
ACS PGM (LAMBDA 38)))

(LAMBDA (V) (X) 40 (K V*) ((11 12 24 33 41 52) ()) (C D) (A (11 12 24 33 41 52
) K (O# CONS V V*)))

(LAMBDA (V*) (D) 41 (E* R PGM K) (() (3 4 18 20 53 62 63 66 67) () (11 12 24 
33 41 52)) (S C S C) (P PE-EXP (CAR E*) R PGM (P# PE-EXP*/$1 K V*)))

(LAMBDA (V1) (X) 42 (K NAME) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 
44 45 46 47 48 49 50 51 56 64) ()) (D S) (LET ((%00000$1 NAME)) (IF (EQV? 
%00000$1 (QUOTE CAR)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 
45 46 47 48 49 50 51 56 64) K (O# CAR V1)) (IF (EQV? %00000$1 (QUOTE CDR)) (A#
(0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64)
K (O# CDR V1)) (IF (EQV? %00000$1 (QUOTE NULL?)) (A# (0 13 14 15 16 17 19 21 
22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# NULL? V1)) (IF (
EQV? %00000$1 (QUOTE PAIR?)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 
43 44 45 46 47 48 49 50 51 56 64) K (O# PAIR? V1)) (IF (EQV? %00000$1 (QUOTE 
NOT)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50
51 56 64) K (O# NOT V1)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 
44 45 46 47 48 49 50 51 56 64) K (O# X-CALL (LIFT NAME) V1)))))))))

(LAMBDA (V2) (X) 43 (K NAME V1) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 
43 44 45 46 47 48 49 50 51 56 64) () ()) (D S D) (LET ((%00000$2 NAME)) (IF (
EQV? %00000$2 (QUOTE CONS)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 
43 44 45 46 47 48 49 50 51 56 64) K (O# CONS V1 V2)) (IF (EQV? %00000$2 (QUOTE
EQUAL?)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49
50 51 56 64) K (O# EQUAL? V1 V2)) (IF (EQV? %00000$2 (QUOTE EQ?)) (A# (0 13 14
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# 
EQ? V1 V2)) (IF (EQV? %00000$2 (QUOTE EQV?)) (A# (0 13 14 15 16 17 19 21 22 23
29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# EQV? V1 V2)) (IF (EQV? 
%00000$2 (QUOTE LIST-REF)) (A# (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43
44 45 46 47 48 49 50 51 56 64) K (O# LIST-REF V1 V2)) (A# (0 13 14 15 16 17 19
21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# X-CALL (LIFT 
NAME) V1 V2)))))))))

(LAMBDA (V1) (X) 44 (ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()
) (S C S D S) (P PE-EXP (CAR (CDR ARGS)) R PGM (P# PE-O/$3 K NAME V1)))

(LAMBDA (V3) (X) 45 (K NAME V1 V2) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 
42 43 44 45 46 47 48 49 50 51 56 64) () () ()) (D S D D) (A# (0 13 14 15 16 17
19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# X-CALL (
LIFT NAME) V1 V2 V3)))

(LAMBDA (V2) (X) 46 (ARGS R PGM K NAME V1) (() (3 4 18 20 53 62 63 66 67) () (
0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) 
() ()) (S C S D S D) (P PE-EXP (CAR (CDR (CDR ARGS))) R PGM (P# PE-O/$6 K NAME
V1 V2)))

(LAMBDA (V1) (X) 47 (ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()
) (S C S D S) (P PE-EXP (CAR (CDR ARGS)) R PGM (P# PE-O/$5 ARGS R PGM K NAME 
V1)))

(LAMBDA (V4) (X) 48 (K NAME V1 V2 V3) ((0 13 14 15 16 17 19 21 22 23 29 34 39 
40 42 43 44 45 46 47 48 49 50 51 56 64) () () () ()) (D S D D D) (A# (0 13 14 
15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# 
X-CALL (LIFT NAME) V1 V2 V3 V4)))

(LAMBDA (V3) (X) 49 (ARGS R PGM K NAME V1 V2) (() (3 4 18 20 53 62 63 66 67) 
() (0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 
64) () () ()) (S C S D S D D) (P PE-EXP (CAR (CDR (CDR (CDR ARGS)))) R PGM (P#
PE-O/$10 K NAME V1 V2 V3)))

(LAMBDA (V2) (X) 50 (ARGS R PGM K NAME V1) (() (3 4 18 20 53 62 63 66 67) () (
0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) 
() ()) (S C S D S D) (P PE-EXP (CAR (CDR (CDR ARGS))) R PGM (P# PE-O/$9 ARGS R
PGM K NAME V1 V2)))

(LAMBDA (V1) (X) 51 (ARGS R PGM K NAME) (() (3 4 18 20 53 62 63 66 67) () (0 
13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) ()
) (S C S D S) (P PE-EXP (CAR (CDR ARGS)) R PGM (P# PE-O/$8 ARGS R PGM K NAME 
V1)))

(LAMBDA (V*) (D) 52 (K NAME) ((0 13 14 15 16 17 19 21 22 23 29 34 39 40 42 43 
44 45 46 47 48 49 50 51 56 64) ()) (D S) (A# (0 13 14 15 16 17 19 21 22 23 29 
34 39 40 42 43 44 45 46 47 48 49 50 51 56 64) K (O# X-APPLY (LIFT NAME) V*)))

(LAMBDA (NAME$) (S) 53 (FORMAL R-FORMAL R1) (() () (53 62 63 66 67)) (S D C) (
IF (EQUAL? NAME$ FORMAL) R-FORMAL (A (53 62 63 66 67) R1 NAME$)))

(LAMBDA (R-FORMAL* R1) (D C) 54 (FORMAL* C) (() (30 54)) (S C) (LET ((FORMAL (
CAR FORMAL*))) (LET# ((R-FORMAL (O# GENERATE-VAR-NAME! (LIFT FORMAL)))) (A (30
54) C (O# CONS R-FORMAL R-FORMAL*) (LAMBDA 53)))))

(LAMBDA (P RA*1) (D D) 55 (C P*) ((25 57) ()) (C D) (A (25 57) C (O# CONS P P*
) RA*1))

(LAMBDA (VALUE) (X) 56 (ACSP BTP PGM RA* C P*) (() () () () (25 57) ()) (S S S
D C D) (P EXTRACT-VALUE VALUE (CAR ACSP) (CAR BTP) PGM RA* (P# EXTRACT/$2 C P*
)))

(LAMBDA (P* RA*) (D D) 57 (E* R ACSP BTP PGM C) (() (3 4 18 20 53 62 63 66 67)
() () () (25 57)) (S C S S S C) (P PE-EXP (CAR E*) R PGM (P# EXTRACT/$1 ACSP 
BTP PGM RA* C P*)))

(LAMBDA (P*1 RA*1) (D D) 58 (C I) ((55 60) ()) (D D) (A# (55 60) C (O# 
MK-CLOSURE I P*1) RA*1))

(LAMBDA (LAM) (S) 59 (VALUE PGM RA* C I) (() () () (55 60) ()) (D S D D D) (
LET ((BTP (CAR (CDR (CDR (CDR (CDR (CDR (CDR LAM))))))))) (LET ((ACSP (CAR (
CDR (CDR (CDR (CDR (CDR LAM)))))))) (P EXTRACT-VALUE* (O# CLOSURE/VALUES VALUE
) ACSP BTP (QUOTE 0) (LENGTH BTP) PGM RA* (LAMBDA 58)))))

(LAMBDA (P RA*2) (D D) 60 (C P*) ((58 61) ()) (C D) (A (58 61) C (O# CONS P P*
) RA*2))

(LAMBDA (P* RA*1) (D D) 61 (V* OFFSET ACSP BTP PGM C) (() () () () () (58 61))
(D S S S S C) (P EXTRACT-VALUE (O# LIST-REF V* (LIFT OFFSET)) (CAR ACSP) (CAR 
BTP) PGM RA*1 (P# EXTRACT-VALUE*/$1 C P*)))

(LAMBDA (NAME) (S) 62 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 63 (NAME* V R1) (() () (62 63 66 67)) (S D C) (IF (EQUAL? 
NAME$ (CAR NAME*)) V (A (62 63 66 67) R1 NAME$)))

(LAMBDA (V) (X) 64 (C NAME* R1) ((27 31 36 65) () (62 63 66 67)) (C S C) (A (
27 31 36 65) C (LAMBDA 63)))

(LAMBDA (R1) (C) 65 (F E* C NAME*) ((26 28 35) () (27 31 36 65) ()) (C S C S) 
(A (26 28 35) F (CAR E*) (P# EXTEND-ENV-AND-CONTINUE/$1 C NAME* R1)))

(LAMBDA (NAME) (S) 66 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 67 (NAME* VALUE* OFFSET R) (() () () (66 67)) (S D S C) (
IF (EQUAL? NAME$ (LIST-REF NAME* OFFSET)) (O# LIST-REF VALUE* (LIFT OFFSET)) (
A (66 67) R NAME$)))

)

