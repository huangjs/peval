(*STYLE* DIRECT)

(*LOAD-FILES*)

(*ADT-FILES* "scheme.adt" "pedef.adt")

(*DEFINITIONS*

(DEFINE (PE-DEF PGM CONF) (() ()) (S D) () (P# PE-DEF/$1 PGM CONF))

(DEFINE (PE-START! PGM) (()) (S) #T (LET ((LAM* (CDR (CAR (CDR (CDR (CDR (CDR 
PGM)))))))) (LET ((DEF* (CDR (CAR (CDR (CDR (CDR PGM))))))) (LET ((ADT* (CDR (
CAR (CDR (CDR PGM)))))) (LET ((LDF* (CDR (CAR (CDR PGM))))) (LET ((STYLE (CAR 
(CDR (CAR PGM))))) (LET ((G0 (CAR DEF*))) (LET ((DEF G0)) (LET ((BTP (CAR (CDR
(CDR (CDR DEF)))))) (LET ((NAME (CAR (CAR (CDR DEF))))) (BEGIN (IF (EQ? STYLE 
(QUOTE DIRECT)) (QUOTE ()) (ERROR (QUOTE "pedef: wrong style of annotation:") 
STYLE)) (CONS LDF* (CONS ADT* (CONS NAME (CONS BTP (QUOTE ()))))))))))))))))

(DEFINE (PE-CONFIGURATION PGM CONF) (() ()) (S D) #T (LET# ((CONF CONF)) (LET 
((DEF* (CDR (CAR (CDR (CDR (CDR PGM))))))) (P FIND-DEF-AND-CONTINUE (O# CAR 
CONF) DEF* (LAMBDA 1)))))

(DEFINE (FIND-DEF-AND-CONTINUE NAME DEF* C) (() () (1)) (D S C) #T (IF (NULL? 
DEF*) (ERROR# (LIFT (QUOTE "Unexpected function name:")) NAME) (LET ((G1 (CAR 
DEF*))) (LET ((UNFOLD#? (CAR (CDR (CDR (CDR (CDR G1))))))) (LET ((NAME# (CAR (
CAR (CDR G1))))) (IF UNFOLD#? (P FIND-DEF-AND-CONTINUE NAME (CDR DEF*) C) (P# 
FIND-DEF-AND-CONTINUE/$1 NAME# NAME DEF* C)))))))

(DEFINE (SPLIT FORMAL* PVALUE* ACSP BTP PGM C) (() () () () () (0 5)) (S D S S
S C) #T (LET# ((PVALUE* PVALUE*)) (IF (NULL? FORMAL*) (A (0 5) C (LIFT (QUOTE 
())) (LAMBDA 2)) (P SPLIT (CDR FORMAL*) (O# CDR PVALUE*) (CDR ACSP) (CDR BTP) 
PGM (LAMBDA 5)))))

(DEFINE (SPLIT-PVALUE FORMAL PVALUE ACS BTV PGM RF* N C) (() () () () () () ()
(4 8)) (S D S S S D D D) #T (LET# ((PVALUE PVALUE)) (LET# ((RF* RF*)) (LET# ((
N N)) (LET# ((C C)) (IF (EQ? BTV (QUOTE S)) (A# (4 8) C PVALUE RF* N) (IF (EQ?
BTV (QUOTE C)) (LET# ((I (O# CLOSURE/INDEX PVALUE))) (P 
FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM (LAMBDA 7))) (IF (BT-RESID? BTV) (
LET# ((RF (O# GENERATE-PARAM-NAME (LIFT FORMAL) N))) (A# (4 8) C RF (O# CONS 
RF RF*) (O# + (LIFT (QUOTE 1)) N))) (ERROR# (LIFT (QUOTE 
"split-pvalue: unexpected binding time value:")) (LIFT BTV))))))))))

(DEFINE (SPLIT-PVALUE* FORMAL PVALUE* ACSP BTP OFFSET ARITY PGM RF* N C) (() 
() () () () () () () () (6 9)) (S D S S S S S D D C) #T (LET# ((PVALUE* 
PVALUE*)) (IF (= OFFSET ARITY) (A (6 9) C (LIFT (QUOTE ())) RF* N) (P 
SPLIT-PVALUE* FORMAL PVALUE* (CDR ACSP) (CDR BTP) (+ (QUOTE 1) OFFSET) ARITY 
PGM RF* N (LAMBDA 9)))))

(DEFINE (PE-EXP E R PGM) (() (2 3 10 11 23 31 32 33 34) ()) (S C S) #T (IF (
LET ((NAME E)) (NOT (PAIR? E))) (LET ((NAME E)) (A (2 3 10 11 23 31 32 33 34) 
R NAME)) (IF (EQUAL? (CAR E) (QUOTE ERROR#)) (LET ((ARGS (CDR E))) (O# CONS (
LIFT (QUOTE ERROR)) (P PE-EXP* ARGS R PGM))) (IF (EQUAL? (CAR E) (QUOTE ERROR)
) (LET ((ARGS (CDR E))) (ERROR# (LIFT (QUOTE 
"Error during partial evaluation:")) (O# CONS (LIFT (QUOTE ERROR)) (P PE-EXP* 
ARGS R PGM)))) (IF (EQUAL? (CAR E) (QUOTE LIFT)) (LET ((E1 (CAR (CDR E)))) (O#
CONS (LIFT (QUOTE QUOTE)) (O# CONS (P PE-EXP E1 R PGM) (LIFT (QUOTE ()))))) (
IF (EQUAL? (CAR E) (QUOTE QUOTE)) (LIFT (LET ((VALUE (CAR (CDR E)))) VALUE)) (
IF (EQUAL? (CAR E) (QUOTE IF#)) (LET ((E3 (CAR (CDR (CDR (CDR E)))))) (LET ((
E2 (CAR (CDR (CDR E))))) (LET ((E1 (CAR (CDR E)))) (O# CONS (LIFT (QUOTE IF)) 
(O# CONS (P PE-EXP E1 R PGM) (O# CONS (P PE-EXP E2 R PGM) (O# CONS (P PE-EXP 
E3 R PGM) (LIFT (QUOTE ()))))))))) (IF (EQUAL? (CAR E) (QUOTE IF)) (LET ((E3 (
CAR (CDR (CDR (CDR E)))))) (LET ((E2 (CAR (CDR (CDR E))))) (LET ((E1 (CAR (CDR
E)))) (P# PE-EXP/$1 E1 E2 E3 R PGM)))) (IF (EQUAL? (CAR E) (QUOTE LET#)) (LET 
((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR (CAR (CAR (CDR E))))))) (
LET ((FORMAL (CAR (CAR (CAR (CDR E)))))) (LET# ((R-FORMAL (O# 
GENERATE-VAR-NAME! (LIFT FORMAL)))) (O# CONS (LIFT (QUOTE LET)) (O# CONS (O# 
CONS (O# CONS R-FORMAL (O# CONS (P PE-EXP ACTUAL R PGM) (LIFT (QUOTE ())))) (
LIFT (QUOTE ()))) (O# CONS (P PE-EXP BODY (LAMBDA 10) PGM) (LIFT (QUOTE ()))))
))))) (IF (EQUAL? (CAR E) (QUOTE LET)) (LET ((BODY (CAR (CDR (CDR E))))) (LET 
((ACTUAL (CAR (CDR (CAR (CAR (CDR E))))))) (LET ((FORMAL (CAR (CAR (CAR (CDR E
)))))) (P PE-EXP BODY (LAMBDA 11) PGM)))) (IF (EQUAL? (CAR E) (QUOTE BEGIN#)) 
(LET ((BODY (CAR (CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR E)))) (O# CONS (LIFT
(QUOTE BEGIN)) (O# CONS (P PE-EXP ACTUAL R PGM) (O# CONS (P PE-EXP BODY R PGM)
(LIFT (QUOTE ()))))))) (IF (EQUAL? (CAR E) (QUOTE BEGIN)) (LET ((BODY (CAR (
CDR (CDR E))))) (LET ((ACTUAL (CAR (CDR E)))) (BEGIN# (P PE-EXP ACTUAL R PGM) 
(P PE-EXP BODY R PGM)))) (IF (EQUAL? (CAR E) (QUOTE O#)) (LET ((ARGS (CDR (CDR
E)))) (LET ((NAME (CAR (CDR E)))) (IF (KEYWORD$? NAME) (O# CONS (LIFT (QUOTE O
)) (O# CONS (LIFT NAME) (P PE-EXP* ARGS R PGM))) (O# CONS (LIFT NAME) (P 
PE-EXP* ARGS R PGM))))) (IF (EQUAL? (CAR E) (QUOTE O)) (LET ((ARGS (CDR (CDR E
)))) (LET ((NAME (CAR (CDR E)))) (P PE-O NAME ARGS R PGM))) (IF (EQUAL? (CAR E
) (QUOTE P#)) (LET ((ARGS (CDR (CDR E)))) (LET ((NAME (CAR (CDR E)))) (LET ((
G2 (PE-LOOKUP-DEF NAME PGM))) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR G2))))
)))) (LET ((BTP (CAR (CDR (CDR (CDR G2)))))) (LET ((ACSP (CAR (CDR (CDR G2))))
) (LET ((FORMALS (CDR (CAR (CDR G2))))) (P EXTRACT ARGS R ACSP BTP PGM (LAMBDA
12))))))))) (IF (EQUAL? (CAR E) (QUOTE P)) (LET ((ARGS (CDR (CDR E)))) (LET ((
NAME (CAR (CDR E)))) (LET ((G3 (PE-LOOKUP-DEF NAME PGM))) (LET ((BODY (CAR (
CDR (CDR (CDR (CDR (CDR G3)))))))) (LET ((FORMALS (CDR (CAR (CDR G3))))) (P 
MAKE-ENV-AND-CONTINUE FORMALS ARGS (LAMBDA 13) (LAMBDA 14))))))) (IF (EQUAL? (
CAR E) (QUOTE LAMBDA#)) (LET ((INDEX (CAR (CDR E)))) (LET ((G4 (PE-LOOKUP-LAM 
INDEX PGM))) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR (CDR (CDR G4)))))))))) 
(LET ((NAME* (CAR (CDR (CDR (CDR (CDR G4))))))) (LET ((BTP (CAR (CDR (CDR G4))
))) (LET ((FORMALS (CAR (CDR G4)))) (P MAKE-ENV-AND-CONTINUE NAME* NAME* (
LAMBDA 15) (LAMBDA 17)))))))) (IF (EQUAL? (CAR E) (QUOTE LAMBDA)) (LET ((INDEX
(CAR (CDR E)))) (LET ((G5 (PE-LOOKUP-LAM INDEX PGM))) (LET ((FREE-NAMES (CAR (
CDR (CDR (CDR (CDR G5))))))) (LET ((FORMALS (CAR (CDR G5)))) (O# MK-CLOSURE (
LIFT INDEX) (P MY-MAP (LAMBDA 18) FREE-NAMES)))))) (IF (EQUAL? (CAR E) (QUOTE 
A#)) (LET ((ARGS (CDR (CDR (CDR E))))) (LET ((PROC (CAR (CDR (CDR E))))) (O# 
CONS (LIFT (QUOTE A)) (O# CONS (P PE-EXP PROC R PGM) (P PE-EXP* ARGS R PGM))))
) (IF (EQUAL? (CAR E) (QUOTE A)) (LET ((ARGS (CDR (CDR (CDR E))))) (LET ((PROC
(CAR (CDR (CDR E))))) (LET ((ACS (CAR (CDR E)))) (LET# ((PROC-V (P PE-EXP PROC
R PGM))) (P FIND-UNF-LAM-IN-ACS-AND-CONTINUE (O# CLOSURE/INDEX PROC-V) ACS PGM
(LAMBDA 22)))))) (LET ((ARGS (CDR E))) (LET ((NAME (CAR E))) (P PE-O NAME ARGS
R PGM)))))))))))))))))))))))

(DEFINE (PE-EXP* E* R PGM) (() (2 3 10 11 23 31 32 33 34) ()) (S C S) #T (IF (
NULL? E*) (LIFT (QUOTE ())) (O# CONS (P PE-EXP (CAR E*) R PGM) (P PE-EXP* (CDR
E*) R PGM))))

(DEFINE (PE-O NAME ARGS R PGM) (() () (2 3 10 11 23 31 32 33 34) ()) (S S C S)
#T (LET ((%00000 (LENGTH ARGS))) (IF (EQV? %00000 (QUOTE 0)) (LIFT (X-CALL 
NAME)) (IF (EQV? %00000 (QUOTE 1)) (LET ((%00000$1 NAME)) (IF (EQV? %00000$1 (
QUOTE CAR)) (O# CAR (P PE-EXP (CAR ARGS) R PGM)) (IF (EQV? %00000$1 (QUOTE CDR
)) (O# CDR (P PE-EXP (CAR ARGS) R PGM)) (IF (EQV? %00000$1 (QUOTE NULL?)) (O# 
NULL? (P PE-EXP (CAR ARGS) R PGM)) (IF (EQV? %00000$1 (QUOTE PAIR?)) (O# PAIR?
(P PE-EXP (CAR ARGS) R PGM)) (IF (EQV? %00000$1 (QUOTE NOT)) (O# NOT (P PE-EXP
(CAR ARGS) R PGM)) (O# X-CALL (LIFT NAME) (P PE-EXP (CAR ARGS) R PGM)))))))) (
IF (EQV? %00000 (QUOTE 2)) (LET ((%00000$2 NAME)) (IF (EQV? %00000$2 (QUOTE 
CONS)) (O# CONS (P PE-EXP (CAR ARGS) R PGM) (P PE-EXP (CAR (CDR ARGS)) R PGM))
(IF (EQV? %00000$2 (QUOTE EQUAL?)) (O# EQUAL? (P PE-EXP (CAR ARGS) R PGM) (P 
PE-EXP (CAR (CDR ARGS)) R PGM)) (IF (EQV? %00000$2 (QUOTE EQ?)) (O# EQ? (P 
PE-EXP (CAR ARGS) R PGM) (P PE-EXP (CAR (CDR ARGS)) R PGM)) (IF (EQV? %00000$2
(QUOTE EQV?)) (O# EQV? (P PE-EXP (CAR ARGS) R PGM) (P PE-EXP (CAR (CDR ARGS)) 
R PGM)) (IF (EQV? %00000$2 (QUOTE LIST-REF)) (O# LIST-REF (P PE-EXP (CAR ARGS)
R PGM) (P PE-EXP (CAR (CDR ARGS)) R PGM)) (O# X-CALL (LIFT NAME) (P PE-EXP (
CAR ARGS) R PGM) (P PE-EXP (CAR (CDR ARGS)) R PGM)))))))) (IF (EQV? %00000 (
QUOTE 3)) (O# X-CALL (LIFT NAME) (P PE-EXP (CAR ARGS) R PGM) (P PE-EXP (CAR (
CDR ARGS)) R PGM) (P PE-EXP (CAR (CDR (CDR ARGS))) R PGM)) (IF (EQV? %00000 (
QUOTE 4)) (O# X-CALL (LIFT NAME) (P PE-EXP (CAR ARGS) R PGM) (P PE-EXP (CAR (
CDR ARGS)) R PGM) (P PE-EXP (CAR (CDR (CDR ARGS))) R PGM) (P PE-EXP (CAR (CDR 
(CDR (CDR ARGS)))) R PGM)) (O# X-APPLY (LIFT NAME) (P PE-EXP* ARGS R PGM))))))
)))

(DEFINE (MAKE-LAM-FORMALS-AND-CONTINUE FORMAL* R C) (() (31 32 33 34) (16 24))
(S C C) #T (IF (NULL? FORMAL*) (A (16 24) C (LIFT (QUOTE ())) R) (P 
MAKE-LAM-FORMALS-AND-CONTINUE (CDR FORMAL*) R (LAMBDA 24))))

(DEFINE (EXTRACT E* R ACSP BTP PGM C) (() (2 3 10 11 23 31 32 33 34) () () () 
(12 26)) (S C S S S C) #T (IF (NULL? E*) (A (12 26) C (LIFT (QUOTE ())) (LIFT 
(QUOTE ()))) (P EXTRACT (CDR E*) R (CDR ACSP) (CDR BTP) PGM (LAMBDA 26))))

(DEFINE (EXTRACT-VALUE VALUE ACS BTV PGM RA* C) (() () () () () (25 29)) (X S 
S S D D) #T (LET# ((VALUE VALUE)) (LET# ((RA* RA*)) (LET# ((C C)) (IF (EQ? BTV
(QUOTE S)) (A# (25 29) C VALUE RA*) (IF (EQ? BTV (QUOTE C)) (LET# ((I (O# 
CLOSURE/INDEX VALUE))) (P FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM (LAMBDA 
28))) (IF (BT-RESID? BTV) (A# (25 29) C (LIFT (QUOTE _)) (O# CONS VALUE RA*)) 
(ERROR# (LIFT (QUOTE "extract-value: unexpected binding time value:")) (LIFT 
BTV)))))))))

(DEFINE (EXTRACT-VALUE* V* ACSP BTP OFFSET ARITY PGM RA* C) (() () () () () ()
() (27 30)) (D S S S S S D C) #T (LET# ((V* V*)) (IF (= OFFSET ARITY) (A (27 
30) C (LIFT (QUOTE ())) RA*) (P EXTRACT-VALUE* V* (CDR ACSP) (CDR BTP) (+ (
QUOTE 1) OFFSET) ARITY PGM RA* (LAMBDA 30)))))

(DEFINE (FIND-UNF-LAM-IN-ACS-AND-CONTINUE I ACS PGM C) (() () () (7 22 28)) (D
S S C) #T (LET# ((I I)) (LET ((LEN-ACS (LENGTH ACS))) (BEGIN# (IF (= LEN-ACS (
QUOTE 0)) (ERROR# (LIFT (QUOTE "Searching in empty abstract closure set:")) I)
(LIFT (QUOTE ()))) (P FIND-UNF-LAM-LOOP I ACS (QUOTE 0) LEN-ACS PGM C)))))

(DEFINE (FIND-UNF-LAM-LOOP I ACS OFFSET LEN-ACS PGM C) (() () () () () (7 22 
28)) (D S S S S C) #T (LET# ((I I)) (LET ((CLOSURE-INDEX (LIST-REF ACS OFFSET)
)) (LET ((NEW-OFFSET (+ (QUOTE 1) OFFSET))) (IF (= NEW-OFFSET LEN-ACS) (A (7 
22 28) C (PE-LOOKUP-LAM CLOSURE-INDEX PGM)) (P# FIND-UNF-LAM-LOOP/$1 
CLOSURE-INDEX I ACS NEW-OFFSET LEN-ACS PGM C))))))

(DEFINE (MAKE-ENV-AND-CONTINUE NAME* E* F C) (() () (13 15) (14 17)) (S S C C)
#T (P EXTEND-ENV-AND-CONTINUE NAME* E* F (LAMBDA 31) C))

(DEFINE (EXTEND-ENV-AND-CONTINUE NAME* E* F R C) (() () (13 15 19) (31 32 33 
34) (14 17 20)) (S S C C C) #T (IF (NULL? NAME*) (A (14 17 20) C R) (P 
EXTEND-ENV-AND-CONTINUE (CDR NAME*) (CDR E*) F (LAMBDA 32) C)))

(DEFINE (LIST-TO-ENV-AND-CONTINUE NAME* VALUE* C) (() () (21)) (S D C) #T (P 
LIST-TO-ENV-LOOP NAME* VALUE* (QUOTE 0) (LENGTH NAME*) (LAMBDA 33) C))

(DEFINE (LIST-TO-ENV-LOOP NAME* VALUE* OFFSET ARITY R C) (() () () () (33 34) 
(21)) (S D S S C C) #T (LET# ((VALUE* VALUE*)) (IF (= OFFSET ARITY) (A (21) C 
R) (P LIST-TO-ENV-LOOP NAME* VALUE* (+ (QUOTE 1) OFFSET) ARITY (LAMBDA 34) C))
))

(DEFINE (MY-MAP F LST) ((18) ()) (C S) #T (IF (NULL? LST) (LIFT (QUOTE ())) (
O# CONS (A (18) F (CAR LST)) (P MY-MAP F (CDR LST)))))

(DEFINE (PE-DEF/$1 PGM CONF) (() ()) (S D) () (IF# (O# NULL? CONF) (LIFT (P 
PE-START! PGM)) (P PE-CONFIGURATION PGM CONF)))

(DEFINE (FIND-DEF-AND-CONTINUE/$1 NAME# NAME DEF* C) (() () () (1)) (S D S C) 
() (IF# (O# EQ? NAME (LIFT NAME#)) (A (1) C (CAR DEF*)) (P 
FIND-DEF-AND-CONTINUE NAME (CDR DEF*) C)))

(DEFINE (SPLIT/$1 C FORMAL* RN) ((0 5) () (2 3)) (C S C) () (LAMBDA# 4))

(DEFINE (SPLIT-PVALUE*/$1 C P*1) ((6 9) ()) (C D) () (LAMBDA# 8))

(DEFINE (PE-EXP/$1 E1 E2 E3 R PGM) (() () () (2 3 10 11 23 31 32 33 34) ()) (S
S S C S) () (IF# (P PE-EXP E1 R PGM) (P PE-EXP E2 R PGM) (P PE-EXP E3 R PGM)))

(DEFINE (EXTRACT/$1 C P*) ((12 26) ()) (C D) () (LAMBDA# 25))

(DEFINE (EXTRACT-VALUE*/$1 C P*) ((27 30) ()) (C D) () (LAMBDA# 29))

(DEFINE (FIND-UNF-LAM-LOOP/$1 CLOSURE-INDEX I ACS NEW-OFFSET LEN-ACS PGM C) (
() () () () () () (7 22 28)) (S D S S S S C) () (IF# (O# = I (LIFT 
CLOSURE-INDEX)) (A (7 22 28) C (PE-LOOKUP-LAM CLOSURE-INDEX PGM)) (P 
FIND-UNF-LAM-LOOP I ACS NEW-OFFSET LEN-ACS PGM C)))

)

(*LAMBDAS*

(LAMBDA (R-FORMAL* R) (D C) 0 (CONF BODY PGM) (() () ()) (D S S) (O# CONS (
LIFT (QUOTE DEFINE)) (O# CONS (O# CONS (O# RETRIEVE-PROC-NAME! CONF) R-FORMAL*
) (O# CONS (P PE-EXP BODY R PGM) (LIFT (QUOTE ()))))))

(LAMBDA (DEF) (S) 1 (CONF PGM) (() ()) (D S) (LET ((BODY (CAR (CDR (CDR (CDR (
CDR (CDR DEF)))))))) (LET ((BTP (CAR (CDR (CDR (CDR DEF)))))) (LET ((ACSP (CAR
(CDR (CDR DEF))))) (LET ((FORMALS (CDR (CAR (CDR DEF))))) (P SPLIT FORMALS (O#
CDR CONF) ACSP BTP PGM (LAMBDA 0)))))))

(LAMBDA (NAME) (S) 2 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 3 (FORMAL* P RN) (() () (2 3)) (S D C) (IF (EQUAL? NAME$ (
CAR FORMAL*)) P (A (2 3) RN NAME$)))

(LAMBDA (P RF*1 N) (D D D) 4 (C FORMAL* RN) ((0 5) () (2 3)) (C S C) (A (0 5) 
C RF*1 (LAMBDA 3)))

(LAMBDA (RF* RN) (D C) 5 (PVALUE* ACSP BTP PGM C FORMAL*) (() () () () (0 5) 
()) (D S S S C S) (P SPLIT-PVALUE (CAR FORMAL*) (O# CAR PVALUE*) (CAR ACSP) (
CAR BTP) PGM RF* (LIFT (QUOTE 0)) (P# SPLIT/$1 C FORMAL* RN)))

(LAMBDA (P* RF*1 N) (D D D) 6 (C I) ((4 8) ()) (D D) (A# (4 8) C (O# 
MK-CLOSURE I P*) RF*1 N))

(LAMBDA (LAM) (S) 7 (FORMAL PVALUE PGM RF* N C I) (() () () () () (4 8) ()) (S
D S D D D D) (LET ((BTP (CAR (CDR (CDR (CDR (CDR (CDR (CDR LAM))))))))) (LET (
(ACSP (CAR (CDR (CDR (CDR (CDR (CDR LAM)))))))) (P SPLIT-PVALUE* FORMAL (O# 
CLOSURE/VALUES PVALUE) ACSP BTP (QUOTE 0) (LENGTH BTP) PGM RF* N (LAMBDA 6))))
)

(LAMBDA (P RF*2 N) (D D D) 8 (C P*1) ((6 9) ()) (C D) (A (6 9) C (O# CONS P 
P*1) RF*2 N))

(LAMBDA (P*1 RF*1 N) (D D D) 9 (FORMAL PVALUE* OFFSET ACSP BTP PGM C) (() () 
() () () () (6 9)) (S D S S S S C) (P SPLIT-PVALUE FORMAL (O# LIST-REF PVALUE*
(LIFT OFFSET)) (CAR ACSP) (CAR BTP) PGM RF*1 N (P# SPLIT-PVALUE*/$1 C P*1)))

(LAMBDA (NAME$) (S) 10 (FORMAL R-FORMAL R) (() () (2 3 10 11 23 31 32 33 34)) 
(S D C) (IF (EQUAL? NAME$ FORMAL) R-FORMAL (A (2 3 10 11 23 31 32 33 34) R 
NAME$)))

(LAMBDA (NAME$) (S) 11 (FORMAL ACTUAL PGM R) (() () () (2 3 10 11 23 31 32 33 
34)) (S S S C) (IF (EQUAL? NAME$ FORMAL) (P PE-EXP ACTUAL R PGM) (A (2 3 10 11
23 31 32 33 34) R NAME$)))

(LAMBDA (P-ARGS R-ACTUAL*) (D D) 12 (NAME) (()) (S) (O# CONS (LIFT (QUOTE P)) 
(O# CONS (O# GENERATE-PROC-NAME! (O# CONS (LIFT NAME) P-ARGS)) R-ACTUAL*)))

(LAMBDA (ARG) (S) 13 (R PGM) ((2 3 10 11 23 31 32 33 34) ()) (C S) (P PE-EXP 
ARG R PGM))

(LAMBDA (R1) (C) 14 (BODY PGM) (() ()) (S S) (P PE-EXP BODY R1 PGM))

(LAMBDA (NAME) (S) 15 (R) ((2 3 10 11 23 31 32 33 34)) (C) (A (2 3 10 11 23 31
32 33 34) R NAME))

(LAMBDA (R-FORMALS R2) (D C) 16 (BODY PGM) (() ()) (S S) (O# CONS (LIFT (QUOTE
LAMBDA)) (O# CONS R-FORMALS (O# CONS (P PE-EXP BODY R2 PGM) (LIFT (QUOTE ())))
)))

(LAMBDA (R1) (C) 17 (FORMALS BODY PGM) (() () ()) (S S S) (P 
MAKE-LAM-FORMALS-AND-CONTINUE FORMALS R1 (LAMBDA 16)))

(LAMBDA (NAME) (S) 18 (R) ((2 3 10 11 23 31 32 33 34)) (C) (A (2 3 10 11 23 31
32 33 34) R NAME))

(LAMBDA (ARG) (S) 19 (R PGM) ((2 3 10 11 23 31 32 33 34) ()) (C S) (P PE-EXP 
ARG R PGM))

(LAMBDA (R2) (C) 20 (BODY PGM) (() ()) (S S) (P PE-EXP BODY R2 PGM))

(LAMBDA (R1) (C) 21 (FORMALS ARGS R BODY PGM) (() () (2 3 10 11 23 31 32 33 34
) () ()) (S S C S S) (P EXTEND-ENV-AND-CONTINUE FORMALS ARGS (LAMBDA 19) R1 (
LAMBDA 20)))

(LAMBDA (LAM) (S) 22 (PROC-V ARGS R PGM) (() () (2 3 10 11 23 31 32 33 34) ())
(D S C S) (LET ((BODY (CAR (CDR (CDR (CDR (CDR (CDR (CDR (CDR LAM)))))))))) (
LET ((FREE-NAMES (CAR (CDR (CDR (CDR (CDR LAM))))))) (LET ((FORMALS (CAR (CDR 
LAM)))) (P LIST-TO-ENV-AND-CONTINUE FREE-NAMES (O# CLOSURE/VALUES PROC-V) (
LAMBDA 21))))))

(LAMBDA (NAME$) (S) 23 (FORMAL R-FORMAL R) (() () (23 31 32 33 34)) (S D C) (
IF (EQUAL? NAME$ FORMAL) R-FORMAL (A (23 31 32 33 34) R NAME$)))

(LAMBDA (R-FORMAL* R) (D C) 24 (FORMAL* C) (() (16 24)) (S C) (LET ((FORMAL (
CAR FORMAL*))) (LET# ((R-FORMAL (O# GENERATE-VAR-NAME! (LIFT FORMAL)))) (A (16
24) C (O# CONS R-FORMAL R-FORMAL*) (LAMBDA 23)))))

(LAMBDA (P RA*1) (D D) 25 (C P*) ((12 26) ()) (C D) (A (12 26) C (O# CONS P P*
) RA*1))

(LAMBDA (P* RA*) (D D) 26 (E* R ACSP BTP PGM C) (() (2 3 10 11 23 31 32 33 34)
() () () (12 26)) (S C S S S C) (P EXTRACT-VALUE (P PE-EXP (CAR E*) R PGM) (
CAR ACSP) (CAR BTP) PGM RA* (P# EXTRACT/$1 C P*)))

(LAMBDA (P* RA*1) (D D) 27 (C I) ((25 29) ()) (D D) (A# (25 29) C (O# 
MK-CLOSURE I P*) RA*1))

(LAMBDA (LAM) (S) 28 (VALUE PGM RA* C I) (() () () (25 29) ()) (D S D D D) (
LET ((BTP (CAR (CDR (CDR (CDR (CDR (CDR (CDR LAM))))))))) (LET ((ACSP (CAR (
CDR (CDR (CDR (CDR (CDR LAM)))))))) (P EXTRACT-VALUE* (O# CLOSURE/VALUES VALUE
) ACSP BTP (QUOTE 0) (LENGTH BTP) PGM RA* (LAMBDA 27)))))

(LAMBDA (P RA*2) (D D) 29 (C P*) ((27 30) ()) (C D) (A (27 30) C (O# CONS P P*
) RA*2))

(LAMBDA (P* RA*1) (D D) 30 (V* OFFSET ACSP BTP PGM C) (() () () () () (27 30))
(D S S S S C) (P EXTRACT-VALUE (O# LIST-REF V* (LIFT OFFSET)) (CAR ACSP) (CAR 
BTP) PGM RA*1 (P# EXTRACT-VALUE*/$1 C P*)))

(LAMBDA (NAME) (S) 31 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 32 (NAME* F E* R) (() (13 15 19) () (31 32 33 34)) (S C S 
C) (IF (EQUAL? NAME$ (CAR NAME*)) (A (13 15 19) F (CAR E*)) (A (31 32 33 34) R
NAME$)))

(LAMBDA (NAME) (S) 33 () () () (ERROR# (LIFT (QUOTE 
"Unbound variable in environment:")) (LIFT NAME)))

(LAMBDA (NAME$) (S) 34 (NAME* VALUE* OFFSET R) (() () () (33 34)) (S D S C) (
IF (EQUAL? NAME$ (LIST-REF NAME* OFFSET)) (O# LIST-REF VALUE* (LIFT OFFSET)) (
A (33 34) R NAME$)))

)

