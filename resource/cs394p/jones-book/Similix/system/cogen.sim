(loadt (string-append **similix-library** "spec.adt"))

(define (_sim-cogen value*_0 residual-goal_1) (define (proc-e-memo-0-484 r_0 r_1 r_2 r_3 c_4) (let* ((residual-formal_5 (_sim-generate-var-name! (quote value*))) (g_6 (_sim-build-var residual-formal_5)) (g_26 (_sim-check-legality-and-process-primop (quote (= 54)) (list r_3 r_2) (lambda (value_7) (let ((cont1_8 (collapse1-0-47 c_4))) (if value_7 (begin (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-342 (collapse1-0-47 cont1_8))) (begin (_sim-pcall-test-output! (quote upd-env)) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_1 r_3) (lambda (value_11) (let ((cont1_23 (lambda (a_13) (let* ((residual-formal_14 (_sim-generate-var-name! (quote g))) (value/rexp_15 (_sim-select-value a_13 residual-formal_14))) (_sim-pcall-test-output! (quote loop)) (let ((g_22 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 r_3) (lambda (value_16) (proc-e-memo-0-484 g_6 r_1 r_2 value_16 (lambda (a_17) (proc-e-memo-0-124 a_17 value/rexp_15 (collapse1-0-47 cont1_8)))))))) (_sim-conditional-build-let residual-formal_14 (quote imp) a_13 g_22)))))) (if (_sim-bt-dynamic? value_11) (cont1_23 (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (quote g)))) (cont1_23 (_sim-build-primop-l (quote list-ref) g_6 (_sim-build-cst r_3)))))))))))))) (_sim-build-let residual-formal_5 (quote fun) r_0 g_26))) (define (proc-e-memo-0-18 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-pcall-args r_3)) (lambda (value_9) (_sim-pcall-test-output! (quote loop)) (let ((g_153 (_sim-make-closure 47 (list r_3 r_4 r_0 r_1) (lambda (index_10 values_11 proj_12 act_13 formal_14 rf*_15 ra*_16 pos_17 ca_18 c_19) (let* ((v_20 (list-ref values_11 0)) (v_22 (list-ref values_11 1)) (v_24 (list-ref values_11 2))) (project-value/rexp-0-25 (list-ref values_11 3) formal_14 ca_18 (+ 1 (+ 1 (+ 1 (+ 1 pos_17)))) ra*_16 rf*_15 (lambda (a_28 b_29 c_30 d_31 e_32 f_33) (let* ((new-v_34 (_sim-make-closure index_10 (list v_20 v_22 v_24 a_28) proj_12 act_13)) (p_35 (list index_10 v_20 v_22 v_24 b_29))) (c_19 new-v_34 p_35 c_30 d_31 e_32 (_sim-upd-cache-cl index_10 values_11 new-v_34 p_35 e_32 f_33))))))) (lambda (free-var-values_37 arg-values_38 c_39) (let* ((g_41 (list-ref free-var-values_37 2)) (g_42 (list-ref free-var-values_37 1)) (g_43 (list-ref free-var-values_37 0)) (g_44 (list-ref arg-values_38 5)) (g_45 (list-ref arg-values_38 4)) (g_46 (list-ref arg-values_38 3)) (g_47 (list-ref arg-values_38 2)) (g_48 (list-ref arg-values_38 1)) (g_49 (list-ref arg-values_38 0))) (project-value/rexp-0-25 (list-ref free-var-values_37 3) (quote (c . 148)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_51 b_52 c_53 d_54 e_55 f_56) (let ((p*_63 (list g_43 g_42 g_41 b_52))) (project-value/rexp-1-75 g_44 (quote (r1 . 177)) f_56 (+ 1 (+ 1 (+ 1 (+ 1 e_55)))) d_54 c_53 (lambda (a_65 b_66 c_67 d_68 e_69 f_70) (let ((p*_71 (cons b_66 p*_63))) (project-value/rexp-2-96 (quote (ca . 176)) g_45 f_70 (+ 1 e_69) d_68 c_67 (lambda (a_73 b_74 c_75 d_76 e_77 f_78) (let ((p*_79 (cons b_74 p*_71))) (project-value/rexp-2-96 (quote (pos . 175)) g_46 f_78 (+ 1 e_77) d_76 c_75 (lambda (a_81 b_82 c_83 d_84 e_85 f_86) (let ((p*_87 (cons b_82 p*_79))) (project-value/rexp-2-96 (quote (ra* . 174)) g_47 f_86 (+ 1 e_85) d_84 c_83 (lambda (a_89 b_90 c_91 d_92 e_93 f_94) (let ((p*_95 (cons b_90 p*_87))) (project-value/rexp-2-96 (quote (rf* . 173)) g_48 f_94 (+ 1 e_93) d_92 c_91 (lambda (a_97 b_98 c_99 d_100 e_101 f_102) (let ((p*_103 (cons b_98 p*_95))) (project-value/rexp-2-96 (quote (p* . 172)) g_49 f_102 (+ 1 e_101) d_100 c_99 (lambda (a_105 b_106 c_107 d_108 e_109 f_110) (let* ((residual-name_seenb4_111 (_sim-generate-proc-name! (quote specialize-pcall-0) (cons (cons b_106 p*_103) (_sim-pos-pairs-in-cache f_110)))) (residual-name_112 (car residual-name_seenb4_111))) (and (not (cdr residual-name_seenb4_111)) (let ((g_144 (let* ((residual-formal_113 (_sim-generate-var-name! (quote rf*))) (g_114 (_sim-build-var residual-formal_113)) (residual-formal_115 (_sim-generate-var-name! (quote pos)))) (_sim-build-var residual-formal_115) (let* ((g_142 (let* ((residual-formal_121 (_sim-generate-var-name! (quote residual-name_seenb4))) (g_122 (_sim-build-var residual-formal_121)) (residual-formal_123 (_sim-generate-var-name! (quote residual-name))) (g_124 (_sim-build-var residual-formal_123))) (_sim-pcall-test-output! (quote proc-e-memo)) (let* ((rexp-then_134 (let ((value_126 (_sim-fetch-def-exp g_42))) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-85 (lambda (a_127) (proc-e-memo-0-40 g_41 a_127 a_65 value_126 (lambda (a_128) (_sim-build-primop-l (quote _sim-add-residual-definition!) (_sim-build-primop-l (quote _sim-build-def) g_124 g_114 a_128)))))))) (rexp-else_135 (_sim-build-cst #f)) (g_139 (proc-e-4-103 (list (_sim-build-primop-l (quote _sim-build-pcall) g_124 a_89)) (_sim-get-closure-activation a_51) (_sim-get-closure-values a_51))) (g_140 (_sim-build-begin (_sim-build-cond (_sim-build-primop-l (quote not) (_sim-build-primop-l (quote cdr) g_122)) rexp-then_134 rexp-else_135) g_139)) (g_141 (_sim-build-let residual-formal_123 (quote fun) (_sim-build-primop-l (quote car) g_122) g_140))) (_sim-build-let residual-formal_121 (quote imp) (_sim-build-primop-l (quote _sim-generate-proc-name!) (_sim-build-cst (_sim-fetch-pcall-name g_43)) (_sim-build-primop-l (quote cons) a_105 (_sim-build-primop-l (quote _sim-pos-pairs-in-cache) a_73))) g_141)))) (g_143 (_sim-build-let residual-formal_115 (quote fun) a_81 g_142))) (_sim-build-let residual-formal_113 (quote fun) a_97 g_143))))) (_sim-add-residual-definition! (_sim-build-def residual-name_112 c_107 g_144)))) (c_39 (_sim-build-pcall residual-name_112 d_108)))))))))))))))))))))))))))) (proc-e-memo-0-454 r_0 r_2 (_sim-fetch-pcall-args r_3) (_sim-fetch-def-pars r_4) (_sim-fetch-def-btp r_4) value_9 g_153 0 (collapse1-0-47 c_5)))))) (define (proc-e-memo-0-454 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_7 r_5) (lambda (value_9) (let ((cont1_10 (collapse1-0-47 c_8))) (if value_9 (let* ((free-var-values_11 (_sim-get-closure-values r_6)) (activation_12 (_sim-get-closure-activation r_6)) (value/rexp_13 (_sim-build-cst (quote ()))) (value/rexp_14 (_sim-build-cst (quote ()))) (value/rexp_15 (_sim-build-cst (quote ()))) (value/rexp_16 (_sim-build-cst 0)) (value/rexp_18 (_sim-build-cst (quote (() () () ()))))) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-342 (lambda (a_19) (proc-e-4-57 (list value/rexp_13 value/rexp_14 value/rexp_15 value/rexp_16 value/rexp_18 a_19) activation_12 free-var-values_11 cont1_10)))) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_4 r_7) (lambda (value_22) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_3 r_7) (lambda (value_23) (let* ((residual-formal_24 (_sim-generate-var-name! (quote formal))) (g_25 (_sim-build-var residual-formal_24)) (g_242 (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_2 r_7) (lambda (value_26) (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_45 (_sim-make-closure 43 (quote ()) (lambda (index_27 values_28 proj_29 act_30 formal_31 rf*_32 ra*_33 pos_34 ca_35 c_36) (let* ((new-v_37 (_sim-make-closure index_27 (quote ()) proj_29 act_30)) (p_38 (list index_27))) (c_36 new-v_37 p_38 rf*_32 ra*_33 pos_34 (_sim-upd-cache-cl index_27 values_28 new-v_37 p_38 pos_34 ca_35)))) (lambda (free-var-values_39 arg-values_40 c_41) (c_41 (_sim-isimperative? (list-ref arg-values_40 0)))))) (g_239 (_sim-make-closure 46 (list r_7 g_25 value_22 r_6 r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_46 values_47 proj_48 act_49 formal_50 rf*_51 ra*_52 pos_53 ca_54 c_55) (let ((v_56 (list-ref values_47 0))) (project-value/rexp-2-96 formal_50 (list-ref values_47 1) ca_54 (+ 1 (+ 1 pos_53)) ra*_52 rf*_51 (lambda (a_60 b_61 c_62 d_63 e_64 f_65) (let ((v_66 (list-ref values_47 2))) (project-value/rexp-0-25 (list-ref values_47 3) formal_50 f_65 (+ 1 (+ 1 e_64)) d_63 c_62 (lambda (a_70 b_71 c_72 d_73 e_74 f_75) (let* ((v_76 (list-ref values_47 4)) (v_78 (list-ref values_47 5)) (v_80 (list-ref values_47 6)) (v_82 (list-ref values_47 7))) (project-value/rexp-1-75 (list-ref values_47 8) formal_50 f_75 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 e_74))))) d_73 c_72 (lambda (a_86 b_87 c_88 d_89 e_90 f_91) (let* ((v_92 (list-ref values_47 9)) (pos_93 (+ 1 e_90)) (new-v_94 (_sim-make-closure index_46 (list v_56 a_60 v_66 a_70 v_76 v_78 v_80 v_82 a_86 v_92) proj_48 act_49)) (p_95 (list index_46 v_56 b_61 v_66 b_71 v_76 v_78 v_80 v_82 b_87 v_92))) (c_55 new-v_94 p_95 c_88 d_89 pos_93 (_sim-upd-cache-cl index_46 values_47 new-v_94 p_95 pos_93 f_91))))))))))))) (lambda (free-var-values_99 arg-values_100 c_101) (let* ((g_102 (list-ref free-var-values_99 9)) (g_103 (list-ref free-var-values_99 8)) (g_104 (list-ref free-var-values_99 7)) (g_105 (list-ref free-var-values_99 6)) (g_106 (list-ref free-var-values_99 5)) (g_107 (list-ref free-var-values_99 4)) (g_108 (list-ref free-var-values_99 3)) (g_109 (list-ref free-var-values_99 2)) (g_110 (list-ref free-var-values_99 1)) (residual-formal_113 (_sim-generate-var-name! (quote value/rexp))) (g_114 (_sim-build-var residual-formal_113))) (_sim-pcall-test-output! (quote loop)) (let ((g_237 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 (list-ref free-var-values_99 0)) (lambda (value_115) (let ((g_234 (_sim-make-closure 45 (list g_110 g_114 g_109 g_108) (lambda (index_116 values_117 proj_118 act_119 formal_120 rf*_121 ra*_122 pos_123 ca_124 c_125) (project-value/rexp-2-96 formal_120 (list-ref values_117 0) ca_124 (+ 1 pos_123) ra*_122 rf*_121 (lambda (a_128 b_129 c_130 d_131 e_132 f_133) (project-value/rexp-2-96 formal_120 (list-ref values_117 1) f_133 (+ 1 e_132) d_131 c_130 (lambda (a_136 b_137 c_138 d_139 e_140 f_141) (let ((v_142 (list-ref values_117 2))) (project-value/rexp-0-25 (list-ref values_117 3) formal_120 f_141 (+ 1 (+ 1 e_140)) d_139 c_138 (lambda (a_146 b_147 c_148 d_149 e_150 f_151) (let* ((new-v_152 (_sim-make-closure index_116 (list a_128 a_136 v_142 a_146) proj_118 act_119)) (p_153 (list index_116 b_129 b_137 v_142 b_147))) (c_125 new-v_152 p_153 c_148 d_149 e_150 (_sim-upd-cache-cl index_116 values_117 new-v_152 p_153 e_150 f_151))))))))))) (lambda (free-var-values_157 arg-values_158 c_159) (let ((residual-formal_170 (_sim-generate-var-name! (quote p*)))) (_sim-pcall-test-output! (quote project-value/rexp)) (let* ((g_230 (_sim-make-closure 44 (list (list-ref free-var-values_157 3) (_sim-build-var residual-formal_170) (list-ref arg-values_158 5)) (lambda (index_172 values_173 proj_174 act_175 formal_176 rf*_177 ra*_178 pos_179 ca_180 c_181) (project-value/rexp-0-25 (list-ref values_173 0) formal_176 ca_180 (+ 1 pos_179) ra*_178 rf*_177 (lambda (a_184 b_185 c_186 d_187 e_188 f_189) (project-value/rexp-2-96 formal_176 (list-ref values_173 1) f_189 (+ 1 e_188) d_187 c_186 (lambda (a_192 b_193 c_194 d_195 e_196 f_197) (project-value/rexp-1-75 (list-ref values_173 2) formal_176 f_197 (+ 1 e_196) d_195 c_194 (lambda (a_200 b_201 c_202 d_203 e_204 f_205) (let* ((new-v_206 (_sim-make-closure index_172 (list a_184 a_192 a_200) proj_174 act_175)) (p_207 (list index_172 b_185 b_193 b_201))) (c_181 new-v_206 p_207 c_202 d_203 e_204 (_sim-upd-cache-cl index_172 values_173 new-v_206 p_207 e_204 f_205)))))))))) (lambda (free-var-values_211 arg-values_212 c_213) (let* ((g_216 (list-ref free-var-values_211 0)) (g_217 (list-ref arg-values_212 5)) (g_218 (list-ref arg-values_212 4)) (g_219 (list-ref arg-values_212 3)) (g_220 (list-ref arg-values_212 2)) (free-var-values_223 (_sim-get-closure-values g_216)) (activation_224 (_sim-get-closure-activation g_216)) (value/rexp_225 (_sim-build-primop-l (quote cons) (list-ref arg-values_212 1) (list-ref free-var-values_211 1)))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-124 (list-ref free-var-values_211 2) (list-ref arg-values_212 0) (lambda (a_226) (proc-e-4-53 (list value/rexp_225 g_220 g_219 g_218 g_217 a_226) activation_224 free-var-values_223 c_213))))))) (g_232 (proc-e-memo-0-243 g_230 (list-ref arg-values_158 4) (list-ref arg-values_158 3) (list-ref arg-values_158 2) (list-ref arg-values_158 1) (list-ref free-var-values_157 2) (list-ref free-var-values_157 1) (list-ref free-var-values_157 0) (collapse1-0-79 c_159)))) (_sim-build-let residual-formal_170 (quote fun) (list-ref arg-values_158 0) g_232))))))) (proc-e-memo-0-454 g_102 g_103 g_104 g_105 g_106 g_107 g_234 value_115 (collapse1-0-79 c_101))))))) (_sim-build-let residual-formal_113 (quote fun) (list-ref arg-values_100 0) g_237))))))) (proc-e-memo-0-174 r_0 g_239 g_45 r_1 value_26 (collapse1-0-47 cont1_10))))))) (_sim-build-let residual-formal_24 (quote fun) (_sim-build-cst value_23) g_242))))))))))) (define (proc-e-memo-0-40 r_0 r_1 r_2 r_3 c_4) (let ((p*_6 (list r_0))) (project-value/rexp-0-25 r_1 (quote (c . 14)) (quote (() () () ())) 2 (quote ()) (quote ()) (lambda (a_8 b_9 c_10 d_11 e_12 f_13) (let ((p*_14 (cons b_9 p*_6))) (project-value/rexp-1-75 r_2 (quote (r . 13)) f_13 (+ 1 e_12) d_11 c_10 (lambda (a_16 b_17 c_18 d_19 e_20 f_21) (+ 1 e_20) (let* ((residual-name_seenb4_24 (_sim-generate-proc-name! (quote proc-e-memo-0) (cons (cons r_3 (cons b_17 p*_14)) (_sim-pos-pairs-in-cache f_21)))) (residual-name_25 (car residual-name_seenb4_24))) (and (not (cdr residual-name_seenb4_24)) (let ((g_28 (begin (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-45 r_0 a_8 a_16 r_3 (collapse1-0-5))))) (_sim-add-residual-definition! (_sim-build-def residual-name_25 c_18 g_28)))) (let* ((rexp_29 (_sim-build-pcall residual-name_25 d_19)) (residual-formal_30 (_sim-generate-var-name! (quote g))) (g_32 (c_4 (_sim-build-primop-l (quote _sim-memoize) (_sim-select-value rexp_29 residual-formal_30))))) (_sim-conditional-build-let residual-formal_30 (quote imp) rexp_29 g_32)))))))))) (define (proc-e-memo-0-45 r_0 r_1 r_2 r_3 c_4) (let ((cont1_6 (collapse1-0-47 c_4))) (if (_sim-islift? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((g_38 (_sim-make-closure 1 (list r_1) (lambda (index_8 values_9 proj_10 act_11 formal_12 rf*_13 ra*_14 pos_15 ca_16 c_17) (project-value/rexp-0-25 (list-ref values_9 0) formal_12 ca_16 (+ 1 pos_15) ra*_14 rf*_13 (lambda (a_20 b_21 c_22 d_23 e_24 f_25) (let* ((new-v_26 (_sim-make-closure index_8 (list a_20) proj_10 act_11)) (p_27 (list index_8 b_21))) (c_17 new-v_26 p_27 c_22 d_23 e_24 (_sim-upd-cache-cl index_8 values_9 new-v_26 p_27 e_24 f_25)))))) (lambda (free-var-values_29 arg-values_30 c_31) (let ((g_32 (list-ref free-var-values_29 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-cst) (list-ref arg-values_30 0))) (_sim-get-closure-activation g_32) (_sim-get-closure-values g_32) c_31)))))) (proc-e-memo-0-45 r_0 g_38 r_2 (_sim-fetch-lift-arg r_3) (collapse1-0-47 cont1_6)))) (let ((cont1_42 (collapse1-0-47 cont1_6))) (if (_sim-iscst? r_3) (proc-e-4-57 (list (_sim-build-cst (_sim-fetch-cst-value r_3))) (_sim-get-closure-activation r_1) (_sim-get-closure-values r_1) cont1_42) (let ((cont1_48 (collapse1-0-47 cont1_42))) (if (_sim-isvar? r_3) (let* ((free-var-values_49 (_sim-get-closure-values r_1)) (activation_50 (_sim-get-closure-activation r_1))) (_sim-pcall-test-output! (quote lookup-env)) (proc-e-memo-0-62 r_2 (_sim-fetch-var-debruijn r_3) (lambda (a_52) (proc-e-4-57 (list a_52) activation_50 free-var-values_49 cont1_48)))) (let ((cont1_56 (collapse1-0-47 cont1_48))) (if (_sim-iscond? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((g_189 (_sim-make-closure 2 (list r_1 (_sim-fetch-cond-test r_3) (_sim-fetch-cond-then r_3) (_sim-fetch-cond-else r_3) r_2 r_0) (lambda (index_60 values_61 proj_62 act_63 formal_64 rf*_65 ra*_66 pos_67 ca_68 c_69) (project-value/rexp-0-25 (list-ref values_61 0) formal_64 ca_68 (+ 1 pos_67) ra*_66 rf*_65 (lambda (a_72 b_73 c_74 d_75 e_76 f_77) (let* ((v_78 (list-ref values_61 1)) (v_80 (list-ref values_61 2)) (v_82 (list-ref values_61 3))) (project-value/rexp-1-75 (list-ref values_61 4) formal_64 f_77 (+ 1 (+ 1 (+ 1 (+ 1 e_76)))) d_75 c_74 (lambda (a_86 b_87 c_88 d_89 e_90 f_91) (let* ((v_92 (list-ref values_61 5)) (pos_93 (+ 1 e_90)) (new-v_94 (_sim-make-closure index_60 (list a_72 v_78 v_80 v_82 a_86 v_92) proj_62 act_63)) (p_95 (list index_60 b_73 v_78 v_80 v_82 b_87 v_92))) (c_69 new-v_94 p_95 c_88 d_89 pos_93 (_sim-upd-cache-cl index_60 values_61 new-v_94 p_95 pos_93 f_91))))))))) (lambda (free-var-values_98 arg-values_99 c_100) (let* ((g_101 (list-ref free-var-values_98 5)) (g_102 (list-ref free-var-values_98 4)) (g_103 (list-ref free-var-values_98 3)) (g_104 (list-ref free-var-values_98 2)) (g_105 (list-ref free-var-values_98 1)) (g_106 (list-ref free-var-values_98 0)) (g_107 (list-ref arg-values_99 0)) (cont1_186 (lambda (a_109) (let ((cont1_110 (collapse1-0-79 c_100))) (if a_109 (begin (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-85 (lambda (a_111) (proc-e-memo-0-45 g_101 a_111 g_102 g_104 (lambda (a_112) (let* ((residual-formal_113 (_sim-generate-var-name! (quote rexp-then))) (g_114 (_sim-build-var residual-formal_113))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote id-c)) (let ((g_126 (proc-e-memo-0-85 (lambda (a_115) (proc-e-memo-0-45 g_101 a_115 g_102 g_103 (lambda (a_116) (let* ((residual-formal_117 (_sim-generate-var-name! (quote rexp-else))) (g_122 (proc-e-4-57 (list (_sim-build-primop-l (quote _sim-build-cond) g_107 g_114 (_sim-build-var residual-formal_117))) (_sim-get-closure-activation g_106) (_sim-get-closure-values g_106) cont1_110))) (_sim-build-let residual-formal_117 (quote imp) a_116 g_122)))))))) (_sim-build-let residual-formal_113 (quote imp) a_112 g_126)))))))) (begin (_sim-pcall-test-output! (quote collapse1)) (proc-e-memo-0-99 g_106 (lambda (a_131) (let ((cont1_133 (collapse1-0-47 cont1_110))) (if (_sim-isstatic? g_105) (let ((p*_135 (list g_101))) (project-value/rexp-0-25 a_131 (quote (c . 25)) (quote (() () () ())) 2 (quote ()) (quote ()) (lambda (a_137 b_138 c_139 d_140 e_141 f_142) (let ((p*_143 (cons b_138 p*_135))) (project-value/rexp-1-75 g_102 (quote (r . 16)) f_142 (+ 1 e_141) d_140 c_139 (lambda (a_145 b_146 c_147 d_148 e_149 f_150) (let ((p*_155 (cons g_104 (cons g_103 (cons b_146 p*_143))))) (project-value/rexp-2-96 (quote (value/rexp . 22)) g_107 f_150 (+ 1 (+ 1 (+ 1 e_149))) d_148 c_147 (lambda (a_157 b_158 c_159 d_160 e_161 f_162) (let* ((residual-name_seenb4_163 (_sim-generate-proc-name! (quote proc-e-0) (cons (cons b_158 p*_155) (_sim-pos-pairs-in-cache f_162)))) (residual-name_164 (car residual-name_seenb4_163))) (and (not (cdr residual-name_seenb4_163)) (let ((g_169 (begin (_sim-pcall-test-output! (quote proc-e)) (let ((g_166 (proc-e-memo-0-45 g_101 a_137 a_145 g_104 (collapse1-0-5)))) (_sim-pcall-test-output! (quote proc-e)) (let ((g_168 (proc-e-memo-0-45 g_101 a_137 a_145 g_103 (collapse1-0-5)))) (_sim-build-cond a_157 g_166 g_168)))))) (_sim-add-residual-definition! (_sim-build-def residual-name_164 c_159 g_169)))) (cont1_133 (_sim-build-pcall residual-name_164 d_160)))))))))))) (begin (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-45 g_101 a_131 g_102 g_104 (lambda (a_173) (let* ((residual-formal_174 (_sim-generate-var-name! (quote g))) (value/rexp_175 (_sim-select-value a_173 residual-formal_174))) (_sim-pcall-test-output! (quote proc-e)) (let ((g_181 (proc-e-memo-0-45 g_101 a_131 g_102 g_103 (lambda (a_176) (let* ((residual-formal_177 (_sim-generate-var-name! (quote g))) (g_179 (cont1_133 (_sim-build-primop-l (quote _sim-build-cond) g_107 value/rexp_175 (_sim-select-value a_176 residual-formal_177))))) (_sim-conditional-build-let residual-formal_177 (quote imp) a_176 g_179)))))) (_sim-conditional-build-let residual-formal_174 (quote imp) a_173 g_181)))))))))))))))) (if (_sim-isdynamic? g_105) (cont1_186 (_sim-isdynamic? g_104)) (cont1_186 #f))))))) (proc-e-memo-0-45 r_0 g_189 r_2 (_sim-fetch-cond-test r_3) (collapse1-0-47 cont1_56)))) (let ((cont1_193 (collapse1-0-47 cont1_56))) (if (_sim-islet? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_201 (lambda (a_198) (proc-e-memo-0-45 r_0 a_198 r_2 (_sim-fetch-let-actual r_3) (collapse1-0-47 cont1_193))))) (if (_sim-islet-unfoldable? r_3) (let ((g_231 (_sim-make-closure 3 (list (_sim-fetch-let-body r_3) r_2 r_1 r_0) (lambda (index_202 values_203 proj_204 act_205 formal_206 rf*_207 ra*_208 pos_209 ca_210 c_211) (let ((v_212 (list-ref values_203 0))) (project-value/rexp-1-75 (list-ref values_203 1) formal_206 ca_210 (+ 1 (+ 1 pos_209)) ra*_208 rf*_207 (collapse6-0-120 values_203 formal_206 v_212 v_212 values_203 index_202 c_211 act_205 proj_204)))) (lambda (free-var-values_217 arg-values_218 c_219) (let* ((g_220 (list-ref free-var-values_217 3)) (g_221 (list-ref free-var-values_217 2)) (g_223 (list-ref free-var-values_217 0))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-124 (list-ref free-var-values_217 1) (list-ref arg-values_218 0) (lambda (a_225) (proc-e-memo-0-45 g_220 g_221 a_225 g_223 (collapse1-0-79 c_219))))))))) (cont1_201 g_231)) (let ((g_298 (_sim-make-closure 4 (list (_sim-fetch-let-formal r_3) (_sim-fetch-let-actual r_3) (_sim-fetch-let-body r_3) r_2 r_1 r_0) (lambda (index_232 values_233 proj_234 act_235 formal_236 rf*_237 ra*_238 pos_239 ca_240 c_241) (let* ((v_242 (list-ref values_233 0)) (v_244 (list-ref values_233 1)) (v_246 (list-ref values_233 2))) (project-value/rexp-1-75 (list-ref values_233 3) formal_236 ca_240 (+ 1 (+ 1 (+ 1 (+ 1 pos_239)))) ra*_238 rf*_237 (lambda (a_250 b_251 c_252 d_253 e_254 f_255) (project-value/rexp-0-25 (list-ref values_233 4) formal_236 f_255 (+ 1 e_254) d_253 c_252 (lambda (a_258 b_259 c_260 d_261 e_262 f_263) (let* ((v_264 (list-ref values_233 5)) (pos_265 (+ 1 e_262)) (new-v_266 (_sim-make-closure index_232 (list v_242 v_244 v_246 a_250 a_258 v_264) proj_234 act_235)) (p_267 (list index_232 v_242 v_244 v_246 b_251 b_259 v_264))) (c_241 new-v_266 p_267 c_260 d_261 pos_265 (_sim-upd-cache-cl index_232 values_233 new-v_266 p_267 pos_265 f_263))))))))) (lambda (free-var-values_270 arg-values_271 c_272) (let* ((g_273 (list-ref free-var-values_270 5)) (g_274 (list-ref free-var-values_270 4)) (g_276 (list-ref free-var-values_270 2)) (g_279 (list-ref arg-values_271 0)) (residual-formal_282 (_sim-generate-var-name! (quote residual-formal))) (g_283 (_sim-build-var residual-formal_282)) (g_296 (let ((value/rexp_285 (_sim-build-cst (_sim-fetch-eod-tag (list-ref free-var-values_270 1))))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-124 (list-ref free-var-values_270 3) (_sim-build-primop-l (quote _sim-build-var) g_283) (lambda (a_287) (proc-e-memo-0-45 g_273 g_274 a_287 g_276 (lambda (a_288) (let* ((residual-formal_289 (_sim-generate-var-name! (quote g))) (g_291 (c_272 (_sim-build-primop-l (quote _sim-build-let) g_283 value/rexp_285 g_279 (_sim-select-value a_288 residual-formal_289))))) (_sim-conditional-build-let residual-formal_289 (quote imp) a_288 g_291))))))))) (_sim-build-let residual-formal_282 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (_sim-varname->name (list-ref free-var-values_270 0)))) g_296)))))) (cont1_201 g_298))))) (let ((cont1_300 (collapse1-0-47 cont1_193))) (if (_sim-isbegin? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let* ((value_302 (_sim-fetch-begin-fst r_3)) (cont1_307 (lambda (a_304) (proc-e-memo-0-45 r_0 a_304 r_2 value_302 (collapse1-0-47 cont1_300))))) (if (_sim-isbegin-unfoldable? r_3) (let ((g_336 (_sim-make-closure 5 (list (_sim-fetch-begin-snd r_3) r_2 r_1 r_0) (lambda (index_308 values_309 proj_310 act_311 formal_312 rf*_313 ra*_314 pos_315 ca_316 c_317) (let ((v_318 (list-ref values_309 0))) (project-value/rexp-1-75 (list-ref values_309 1) formal_312 ca_316 (+ 1 (+ 1 pos_315)) ra*_314 rf*_313 (collapse6-0-120 values_309 formal_312 v_318 v_318 values_309 index_308 c_317 act_311 proj_310)))) (lambda (free-var-values_323 arg-values_324 c_325) (let ((residual-formal_331 (_sim-generate-var-name! (quote value/rexp)))) (_sim-build-var residual-formal_331) (_sim-pcall-test-output! (quote proc-e)) (let ((g_334 (proc-e-memo-0-45 (list-ref free-var-values_323 3) (list-ref free-var-values_323 2) (list-ref free-var-values_323 1) (list-ref free-var-values_323 0) (collapse1-0-79 c_325)))) (_sim-build-let residual-formal_331 (quote fun) (list-ref arg-values_324 0) g_334))))))) (cont1_307 g_336)) (let ((g_367 (_sim-make-closure 6 (list (_sim-fetch-begin-snd r_3) r_2 r_1 r_0) (lambda (index_337 values_338 proj_339 act_340 formal_341 rf*_342 ra*_343 pos_344 ca_345 c_346) (let ((v_347 (list-ref values_338 0))) (project-value/rexp-1-75 (list-ref values_338 1) formal_341 ca_345 (+ 1 (+ 1 pos_344)) ra*_343 rf*_342 (collapse6-0-120 values_338 formal_341 v_347 v_347 values_338 index_337 c_346 act_340 proj_339)))) (lambda (free-var-values_352 arg-values_353 c_354) (let ((g_359 (list-ref arg-values_353 0))) (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-45 (list-ref free-var-values_352 3) (list-ref free-var-values_352 2) (list-ref free-var-values_352 1) (list-ref free-var-values_352 0) (lambda (a_360) (let* ((residual-formal_361 (_sim-generate-var-name! (quote g))) (g_363 (c_354 (_sim-build-primop-l (quote _sim-build-begin) g_359 (_sim-select-value a_360 residual-formal_361))))) (_sim-conditional-build-let residual-formal_361 (quote imp) a_360 g_363))))))))) (cont1_307 g_367))))) (let ((cont1_369 (collapse1-0-47 cont1_300))) (if (_sim-isprimop? r_3) (let* ((residual-formal_371 (_sim-generate-var-name! (quote name))) (g_372 (_sim-build-var residual-formal_371))) (_sim-pcall-test-output! (quote proc-e*)) (let ((g_498 (let* ((value_373 (_sim-fetch-primop-args r_3)) (g_392 (_sim-make-closure 7 (quote ()) (lambda (index_374 values_375 proj_376 act_377 formal_378 rf*_379 ra*_380 pos_381 ca_382 c_383) (let* ((new-v_384 (_sim-make-closure index_374 (quote ()) proj_376 act_377)) (p_385 (list index_374))) (c_383 new-v_384 p_385 rf*_379 ra*_380 pos_381 (_sim-upd-cache-cl index_374 values_375 new-v_384 p_385 pos_381 ca_382)))) (lambda (free-var-values_386 arg-values_387 c_388) (c_388 (_sim-isimperative? (list-ref arg-values_387 0))))))) (_sim-check-legality-and-process-primop (quote (member 42)) (list (_sim-fetch-primop-referentiality r_3) (quote (abort abort-eoi))) (lambda (value_394) (let ((cont1_398 (lambda (a_395) (proc-e-memo-0-158 r_0 a_395 g_392 r_2 value_373 (collapse1-0-47 cont1_369))))) (if value_394 (let ((g_418 (_sim-make-closure 8 (list g_372) (lambda (index_399 values_400 proj_401 act_402 formal_403 rf*_404 ra*_405 pos_406 ca_407 c_408) (project-value/rexp-2-96 formal_403 (list-ref values_400 0) ca_407 (+ 1 pos_406) ra*_405 rf*_404 (collapse6-0-105 values_400 formal_403 values_400 index_399 c_408 act_402 proj_401))) (lambda (free-var-values_412 arg-values_413 c_414) (c_414 (_sim-build-primop-l (quote _sim-build-primop) (list-ref free-var-values_412 0) (list-ref arg-values_413 0))))))) (cont1_398 g_418)) (let ((cont1_420 (collapse1-0-47 cont1_398))) (if (_sim-isstatic? r_3) (let ((g_473 (_sim-make-closure 10 (list r_3 r_1) (lambda (index_421 values_422 proj_423 act_424 formal_425 rf*_426 ra*_427 pos_428 ca_429 c_430) (let ((v_431 (list-ref values_422 0))) (project-value/rexp-0-25 (list-ref values_422 1) formal_425 ca_429 (+ 1 (+ 1 pos_428)) ra*_427 rf*_426 (collapse6-0-179 values_422 formal_425 v_431 v_431 values_422 index_421 c_430 act_424 proj_423)))) (lambda (free-var-values_436 arg-values_437 c_438) (let* ((g_440 (list-ref free-var-values_436 0)) (g_441 (list-ref arg-values_437 0))) (project-value/rexp-0-25 (list-ref free-var-values_436 1) (quote (c . 17)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_443 b_444 c_445 d_446 e_447 f_448) (let ((p*_451 (list g_440 b_444))) (project-value/rexp-2-96 (quote (value* . 38)) g_441 f_448 (+ 1 (+ 1 e_447)) d_446 c_445 (lambda (a_453 b_454 c_455 d_456 e_457 f_458) (let* ((residual-name_seenb4_459 (_sim-generate-proc-name! (quote proc-e-1) (cons (cons b_454 p*_451) (_sim-pos-pairs-in-cache f_458)))) (residual-name_460 (car residual-name_seenb4_459))) (and (not (cdr residual-name_seenb4_459)) (let ((g_469 (let* ((residual-formal_463 (_sim-generate-var-name! (quote value))) (g_467 (proc-e-4-103 (list (_sim-build-var residual-formal_463)) (_sim-get-closure-activation a_443) (_sim-get-closure-values a_443))) (g_468 (_sim-build-abs (list residual-formal_463) g_467))) (_sim-build-primop-l (quote _sim-check-legality-and-process-primop) (_sim-build-cst (_sim-fetch-primop-n+i g_440)) a_453 g_468)))) (_sim-add-residual-definition! (_sim-build-def residual-name_460 c_455 g_469)))) (c_438 (_sim-build-pcall residual-name_460 d_456))))))))))))) (cont1_420 g_473)) (let ((g_497 (_sim-make-closure 11 (list r_1 g_372) (lambda (index_474 values_475 proj_476 act_477 formal_478 rf*_479 ra*_480 pos_481 ca_482 c_483) (project-value/rexp-0-25 (list-ref values_475 0) formal_478 ca_482 (+ 1 pos_481) ra*_480 rf*_479 (collapse6-0-171 values_475 formal_478 values_475 index_474 c_483 act_477 proj_476))) (lambda (free-var-values_487 arg-values_488 c_489) (let ((g_491 (list-ref free-var-values_487 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-primop) (list-ref free-var-values_487 1) (list-ref arg-values_488 0))) (_sim-get-closure-activation g_491) (_sim-get-closure-values g_491) c_489)))))) (cont1_420 g_497))))))))))) (_sim-build-let residual-formal_371 (quote fun) (_sim-build-cst (_sim-fetch-primop-name r_3)) g_498))) (let ((cont1_500 (collapse1-0-47 cont1_369))) (if (_sim-iscstr? r_3) (let ((cont1_503 (collapse1-0-47 cont1_500))) (if (_sim-isdynamic? r_3) (begin (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_522 (_sim-make-closure 12 (quote ()) (lambda (index_504 values_505 proj_506 act_507 formal_508 rf*_509 ra*_510 pos_511 ca_512 c_513) (let* ((new-v_514 (_sim-make-closure index_504 (quote ()) proj_506 act_507)) (p_515 (list index_504))) (c_513 new-v_514 p_515 rf*_509 ra*_510 pos_511 (_sim-upd-cache-cl index_504 values_505 new-v_514 p_515 pos_511 ca_512)))) (lambda (free-var-values_516 arg-values_517 c_518) (c_518 (_sim-isimperative? (list-ref arg-values_517 0)))))) (g_548 (_sim-make-closure 13 (list r_1 r_3) (lambda (index_523 values_524 proj_525 act_526 formal_527 rf*_528 ra*_529 pos_530 ca_531 c_532) (project-value/rexp-0-25 (list-ref values_524 0) formal_527 ca_531 (+ 1 pos_530) ra*_529 rf*_528 (collapse6-0-206 values_524 formal_527 values_524 index_523 c_532 act_526 proj_525))) (lambda (free-var-values_536 arg-values_537 c_538) (let ((g_540 (list-ref free-var-values_536 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-cstr) (_sim-build-cst (_sim-fetch-cstr-name (list-ref free-var-values_536 1))) (list-ref arg-values_537 0))) (_sim-get-closure-activation g_540) (_sim-get-closure-values g_540) c_538)))))) (proc-e-memo-0-158 r_0 g_548 g_522 r_2 (_sim-fetch-cstr-args r_3) (collapse1-0-47 cont1_503)))) (begin (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_569 (_sim-make-closure 14 (quote ()) (lambda (index_551 values_552 proj_553 act_554 formal_555 rf*_556 ra*_557 pos_558 ca_559 c_560) (let* ((new-v_561 (_sim-make-closure index_551 (quote ()) proj_553 act_554)) (p_562 (list index_551))) (c_560 new-v_561 p_562 rf*_556 ra*_557 pos_558 (_sim-upd-cache-cl index_551 values_552 new-v_561 p_562 pos_558 ca_559)))) (lambda (free-var-values_563 arg-values_564 c_565) (c_565 (_sim-isdynamic? (list-ref arg-values_564 0)))))) (g_740 (_sim-make-closure 17 (list r_1 (_sim-fetch-bt-tag* (_sim-fetch-cstr-args r_3)) r_3) (lambda (index_571 values_572 proj_573 act_574 formal_575 rf*_576 ra*_577 pos_578 ca_579 c_580) (project-value/rexp-0-25 (list-ref values_572 0) formal_575 ca_579 (+ 1 pos_578) ra*_577 rf*_576 (lambda (a_583 b_584 c_585 d_586 e_587 f_588) (let* ((v_589 (list-ref values_572 1)) (v_591 (list-ref values_572 2)) (pos_592 (+ 1 (+ 1 e_587))) (new-v_593 (_sim-make-closure index_571 (list a_583 v_589 v_591) proj_573 act_574)) (p_594 (list index_571 b_584 v_589 v_591))) (c_580 new-v_593 p_594 c_585 d_586 pos_592 (_sim-upd-cache-cl index_571 values_572 new-v_593 p_594 pos_592 f_588)))))) (lambda (free-var-values_596 arg-values_597 c_598) (let* ((g_599 (list-ref free-var-values_596 2)) (g_600 (list-ref free-var-values_596 1)) (g_602 (list-ref arg-values_597 0)) (p*_606 (list g_600 g_599))) (project-value/rexp-0-25 (list-ref free-var-values_596 0) (quote (c . 17)) (quote (() () () ())) 3 (quote ()) (quote ()) (lambda (a_608 b_609 c_610 d_611 e_612 f_613) (let ((p*_614 (cons b_609 p*_606))) (project-value/rexp-2-96 (quote (value/rexp* . 46)) g_602 f_613 (+ 1 e_612) d_611 c_610 (lambda (a_616 b_617 c_618 d_619 e_620 f_621) (let* ((residual-name_seenb4_622 (_sim-generate-proc-name! (quote proc-e-2) (cons (cons b_617 p*_614) (_sim-pos-pairs-in-cache f_621)))) (residual-name_623 (car residual-name_seenb4_622))) (and (not (cdr residual-name_seenb4_622)) (let ((g_736 (let* ((residual-formal_626 (_sim-generate-var-name! (quote proj))) (residual-formal_627 (_sim-generate-var-name! (quote value))) (residual-formal_628 (_sim-generate-var-name! (quote formal))) (residual-formal_629 (_sim-generate-var-name! (quote rf*))) (residual-formal_630 (_sim-generate-var-name! (quote ra*))) (residual-formal_631 (_sim-generate-var-name! (quote pos))) (residual-formal_632 (_sim-generate-var-name! (quote ca))) (residual-formal_633 (_sim-generate-var-name! (quote c))) (residual-formal_642 (_sim-generate-var-name! (quote proj))) (residual-formal_644 (_sim-generate-var-name! (quote value))) (g_645 (_sim-build-var residual-formal_644)) (residual-formal_646 (_sim-generate-var-name! (quote c))) (residual-formal_648 (_sim-generate-var-name! (quote name)))) (_sim-pcall-test-output! (quote project-value/rexp*)) (let* ((g_724 (_sim-make-closure 15 (list (_sim-build-var residual-formal_642) (_sim-build-var residual-formal_648) (_sim-build-var residual-formal_646) g_645) (lambda (index_651 values_652 proj_653 act_654 formal_655 rf*_656 ra*_657 pos_658 ca_659 c_660) (project-value/rexp-2-96 formal_655 (list-ref values_652 0) ca_659 (+ 1 pos_658) ra*_657 rf*_656 (lambda (a_663 b_664 c_665 d_666 e_667 f_668) (project-value/rexp-2-96 formal_655 (list-ref values_652 1) f_668 (+ 1 e_667) d_666 c_665 (lambda (a_671 b_672 c_673 d_674 e_675 f_676) (project-value/rexp-2-96 formal_655 (list-ref values_652 2) f_676 (+ 1 e_675) d_674 c_673 (lambda (a_679 b_680 c_681 d_682 e_683 f_684) (project-value/rexp-2-96 formal_655 (list-ref values_652 3) f_684 (+ 1 e_683) d_682 c_681 (lambda (a_687 b_688 c_689 d_690 e_691 f_692) (let* ((new-v_693 (_sim-make-closure index_651 (list a_663 a_671 a_679 a_687) proj_653 act_654)) (p_694 (list index_651 b_664 b_672 b_680 b_688))) (c_660 new-v_693 p_694 c_689 d_690 e_691 (_sim-upd-cache-cl index_651 values_652 new-v_693 p_694 e_691 f_692)))))))))))) (lambda (free-var-values_699 arg-values_700 c_701) (let* ((g_704 (list-ref free-var-values_699 1)) (residual-formal_712 (_sim-generate-var-name! (quote pos))) (g_713 (_sim-build-var residual-formal_712)) (residual-formal_715 (_sim-generate-var-name! (quote new-v))) (g_716 (_sim-build-var residual-formal_715)) (residual-formal_717 (_sim-generate-var-name! (quote p))) (g_718 (_sim-build-var residual-formal_717)) (g_720 (c_701 (_sim-build-app (list-ref free-var-values_699 2) (list g_716 g_718 (list-ref arg-values_700 2) (list-ref arg-values_700 3) g_713 (_sim-build-primop-l (quote _sim-upd-cache-ps) (list-ref free-var-values_699 3) g_716 g_718 g_713 (list-ref arg-values_700 5)))))) (g_721 (_sim-build-let residual-formal_717 (quote fun) (_sim-build-primop-l (quote cons) g_704 (list-ref arg-values_700 1)) g_720)) (g_722 (_sim-build-let residual-formal_715 (quote fun) (_sim-build-cstr (quote _sim-make-psds) (list (list-ref free-var-values_699 0) (_sim-build-primop-l (quote _sim-make-constr-val) g_704 (list-ref arg-values_700 0)))) g_721))) (_sim-build-let residual-formal_712 (quote fun) (list-ref arg-values_700 4) g_722))))) (g_726 (proc-e-memo-0-226 g_724 (_sim-build-var residual-formal_632) (_sim-build-var residual-formal_631) (_sim-build-var residual-formal_630) (_sim-build-var residual-formal_629) g_600 (_sim-build-primop-l (quote _sim-get-constr-val-args) g_645) (_sim-build-var residual-formal_628) (collapse1-0-5))) (g_727 (_sim-build-let residual-formal_648 (quote fun) (_sim-build-primop-l (quote _sim-get-constr-val-cstr-name) g_645) g_726)) (g_728 (_sim-build-let residual-formal_646 (quote fun) (_sim-build-var residual-formal_633) g_727)) (g_729 (_sim-build-let residual-formal_644 (quote fun) (_sim-build-var residual-formal_627) g_728)) (g_730 (_sim-build-let residual-formal_642 (quote fun) (_sim-build-var residual-formal_626) g_729)) (g_731 (_sim-build-abs (list residual-formal_626 residual-formal_627 residual-formal_628 residual-formal_629 residual-formal_630 residual-formal_631 residual-formal_632 residual-formal_633) g_730))) (proc-e-4-103 (list (_sim-build-cstr (quote _sim-make-psds) (list g_731 (_sim-build-primop-l (quote _sim-cstr-reduce) (_sim-build-cst (_sim-fetch-cstr-n+i g_599)) a_616)))) (_sim-get-closure-activation a_608) (_sim-get-closure-values a_608)))))) (_sim-add-residual-definition! (_sim-build-def residual-name_623 c_618 g_736)))) (c_598 (_sim-build-pcall residual-name_623 d_619))))))))))))) (proc-e-memo-0-158 r_0 g_740 g_569 r_2 (_sim-fetch-cstr-args r_3) (collapse1-0-47 cont1_503)))))) (let ((cont1_744 (collapse1-0-47 cont1_500))) (if (_sim-issel? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_750 (lambda (a_747) (proc-e-memo-0-45 r_0 a_747 r_2 (_sim-fetch-sel-arg r_3) (collapse1-0-47 cont1_744))))) (if (_sim-isdynamic? (_sim-fetch-sel-arg r_3)) (let ((g_780 (_sim-make-closure 18 (list r_1 r_3) (lambda (index_751 values_752 proj_753 act_754 formal_755 rf*_756 ra*_757 pos_758 ca_759 c_760) (project-value/rexp-0-25 (list-ref values_752 0) formal_755 ca_759 (+ 1 pos_758) ra*_757 rf*_756 (collapse6-0-206 values_752 formal_755 values_752 index_751 c_760 act_754 proj_753))) (lambda (free-var-values_764 arg-values_765 c_766) (let* ((g_767 (list-ref free-var-values_764 1)) (g_768 (list-ref free-var-values_764 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-sel) (_sim-build-cst (_sim-fetch-sel-name g_767)) (_sim-build-cst (_sim-fetch-sel-proj g_767)) (_sim-build-cst (_sim-fetch-sel-cstr g_767)) (list-ref arg-values_765 0))) (_sim-get-closure-activation g_768) (_sim-get-closure-values g_768) c_766)))))) (cont1_750 g_780)) (let ((g_807 (_sim-make-closure 19 (list r_1 r_3) (lambda (index_781 values_782 proj_783 act_784 formal_785 rf*_786 ra*_787 pos_788 ca_789 c_790) (project-value/rexp-0-25 (list-ref values_782 0) formal_785 ca_789 (+ 1 pos_788) ra*_787 rf*_786 (collapse6-0-206 values_782 formal_785 values_782 index_781 c_790 act_784 proj_783))) (lambda (free-var-values_794 arg-values_795 c_796) (let ((g_798 (list-ref free-var-values_794 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-sel-reduce) (_sim-build-cst (_sim-fetch-sel-n+i (list-ref free-var-values_794 1))) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) (list-ref arg-values_795 0)))) (_sim-get-closure-activation g_798) (_sim-get-closure-values g_798) c_796)))))) (cont1_750 g_807))))) (let ((cont1_809 (collapse1-0-47 cont1_744))) (if (_sim-ispred? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_815 (lambda (a_812) (proc-e-memo-0-45 r_0 a_812 r_2 (_sim-fetch-pred-arg r_3) (collapse1-0-47 cont1_809))))) (if (_sim-isdynamic? (_sim-fetch-pred-arg r_3)) (let ((g_843 (_sim-make-closure 20 (list r_1 r_3) (lambda (index_816 values_817 proj_818 act_819 formal_820 rf*_821 ra*_822 pos_823 ca_824 c_825) (project-value/rexp-0-25 (list-ref values_817 0) formal_820 ca_824 (+ 1 pos_823) ra*_822 rf*_821 (collapse6-0-206 values_817 formal_820 values_817 index_816 c_825 act_819 proj_818))) (lambda (free-var-values_829 arg-values_830 c_831) (let* ((g_832 (list-ref free-var-values_829 1)) (g_833 (list-ref free-var-values_829 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-pred) (_sim-build-cst (_sim-fetch-pred-name g_832)) (_sim-build-cst (_sim-fetch-pred-cstr g_832)) (list-ref arg-values_830 0))) (_sim-get-closure-activation g_833) (_sim-get-closure-values g_833) c_831)))))) (cont1_815 g_843)) (let ((g_870 (_sim-make-closure 21 (list r_1 r_3) (lambda (index_844 values_845 proj_846 act_847 formal_848 rf*_849 ra*_850 pos_851 ca_852 c_853) (project-value/rexp-0-25 (list-ref values_845 0) formal_848 ca_852 (+ 1 pos_851) ra*_850 rf*_849 (collapse6-0-206 values_845 formal_848 values_845 index_844 c_853 act_847 proj_846))) (lambda (free-var-values_857 arg-values_858 c_859) (let ((g_861 (list-ref free-var-values_857 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-pred-reduce) (_sim-build-cst (_sim-fetch-pred-n+i (list-ref free-var-values_857 1))) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) (list-ref arg-values_858 0)))) (_sim-get-closure-activation g_861) (_sim-get-closure-values g_861) c_859)))))) (cont1_815 g_870))))) (let ((cont1_872 (collapse1-0-47 cont1_809))) (if (_sim-ispcall? r_3) (let ((cont1_875 (collapse1-0-47 cont1_872))) (if (_sim-unfoldable-procedure? (_sim-fetch-udp-def r_0 r_3)) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-pcall-args r_3)) (lambda (value_877) (_sim-pcall-test-output! (quote loop)) (let* ((g_919 (_sim-make-closure 25 (list (_sim-fetch-udp-def r_0 r_3) r_1 r_0) (lambda (index_880 values_881 proj_882 act_883 formal_884 rf*_885 ra*_886 pos_887 ca_888 c_889) (let ((v_890 (list-ref values_881 0))) (project-value/rexp-0-25 (list-ref values_881 1) formal_884 ca_888 (+ 1 (+ 1 pos_887)) ra*_886 rf*_885 (lambda (a_894 b_895 c_896 d_897 e_898 f_899) (let* ((v_900 (list-ref values_881 2)) (pos_901 (+ 1 e_898)) (new-v_902 (_sim-make-closure index_880 (list v_890 a_894 v_900) proj_882 act_883)) (p_903 (list index_880 v_890 b_895 v_900))) (c_889 new-v_902 p_903 c_896 d_897 pos_901 (_sim-upd-cache-cl index_880 values_881 new-v_902 p_903 pos_901 f_899))))))) (lambda (free-var-values_905 arg-values_906 c_907) (let* ((g_908 (list-ref free-var-values_905 2)) (g_911 (list-ref arg-values_906 0))) (_sim-pcall-test-output! (quote proc-e-memo)) (let ((value_912 (_sim-fetch-def-exp (list-ref free-var-values_905 0)))) (_sim-pcall-test-output! (quote collapse1)) (proc-e-memo-0-99 (list-ref free-var-values_905 1) (lambda (a_913) (proc-e-memo-0-40 g_908 a_913 g_911 value_912 (collapse1-0-79 c_907))))))))) (g_921 (proc-e-memo-0-338 r_0 r_2 (_sim-fetch-pcall-args r_3) value_877 g_919 0 (collapse1-0-47 cont1_875)))) (_sim-build-begin (_sim-build-primop-l (quote _sim-pcall-test-output!) (_sim-build-cst (_sim-fetch-def-name (_sim-fetch-udp-def r_0 r_3)))) g_921)))) (begin (_sim-pcall-test-output! (quote specialize-pcall)) (proc-e-memo-0-18 r_0 r_1 r_2 r_3 (_sim-fetch-udp-def r_0 r_3) (collapse1-0-47 cont1_875))))) (let ((cont1_925 (collapse1-0-47 cont1_872))) (if (_sim-isabs? r_3) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-abs-free-variable-debruijns r_3)) (lambda (value_927) (let* ((free-var-values_929 (_sim-get-closure-values r_1)) (activation_930 (_sim-get-closure-activation r_1)) (cont1_936 (lambda (a_932) (let* ((residual-formal_933 (_sim-generate-var-name! (quote g))) (g_935 (proc-e-4-57 (list (_sim-select-value a_932 residual-formal_933)) activation_930 free-var-values_929 cont1_925))) (_sim-conditional-build-let residual-formal_933 (quote imp) a_932 g_935))))) (if (_sim-isclosure? r_3) (let ((p*_944 (list (_sim-fetch-abs-body r_3) r_3 value_927 r_0))) (project-value/rexp-1-75 r_2 (quote (r . 16)) (quote (() () () ())) 5 (quote ()) (quote ()) (lambda (a_946 b_947 c_948 d_949 e_950 f_951) (+ 1 e_950) (let* ((residual-name_seenb4_954 (_sim-generate-proc-name! (quote proc-e-3) (cons (cons (_sim-fetch-abs-free-variable-debruijns r_3) (cons b_947 p*_944)) (_sim-pos-pairs-in-cache f_951)))) (residual-name_955 (car residual-name_seenb4_954))) (and (not (cdr residual-name_seenb4_954)) (let ((g_1131 (let ((value/rexp_957 (_sim-build-cst (_sim-fetch-abs-index r_3)))) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-392 a_946 (_sim-fetch-abs-free-variable-debruijns r_3) value_927 0 (lambda (a_958) (let* ((residual-formal_959 (_sim-generate-var-name! (quote index))) (residual-formal_960 (_sim-generate-var-name! (quote values))) (residual-formal_961 (_sim-generate-var-name! (quote proj))) (residual-formal_962 (_sim-generate-var-name! (quote act))) (residual-formal_963 (_sim-generate-var-name! (quote formal))) (residual-formal_964 (_sim-generate-var-name! (quote rf*))) (residual-formal_965 (_sim-generate-var-name! (quote ra*))) (residual-formal_966 (_sim-generate-var-name! (quote pos))) (residual-formal_967 (_sim-generate-var-name! (quote ca))) (residual-formal_968 (_sim-generate-var-name! (quote c))) (residual-formal_979 (_sim-generate-var-name! (quote index))) (residual-formal_981 (_sim-generate-var-name! (quote values))) (g_982 (_sim-build-var residual-formal_981)) (residual-formal_983 (_sim-generate-var-name! (quote proj))) (residual-formal_985 (_sim-generate-var-name! (quote act))) (residual-formal_987 (_sim-generate-var-name! (quote c)))) (_sim-pcall-test-output! (quote project-value/rexp*)) (let* ((g_1076 (let ((g_1073 (_sim-make-closure 26 (list (_sim-build-var residual-formal_983) (_sim-build-var residual-formal_985) (_sim-build-var residual-formal_987) (_sim-build-var residual-formal_979) g_982) (lambda (index_991 values_992 proj_993 act_994 formal_995 rf*_996 ra*_997 pos_998 ca_999 c_1000) (project-value/rexp-2-96 formal_995 (list-ref values_992 0) ca_999 (+ 1 pos_998) ra*_997 rf*_996 (lambda (a_1003 b_1004 c_1005 d_1006 e_1007 f_1008) (project-value/rexp-2-96 formal_995 (list-ref values_992 1) f_1008 (+ 1 e_1007) d_1006 c_1005 (lambda (a_1011 b_1012 c_1013 d_1014 e_1015 f_1016) (project-value/rexp-2-96 formal_995 (list-ref values_992 2) f_1016 (+ 1 e_1015) d_1014 c_1013 (lambda (a_1019 b_1020 c_1021 d_1022 e_1023 f_1024) (project-value/rexp-2-96 formal_995 (list-ref values_992 3) f_1024 (+ 1 e_1023) d_1022 c_1021 (lambda (a_1027 b_1028 c_1029 d_1030 e_1031 f_1032) (project-value/rexp-2-96 formal_995 (list-ref values_992 4) f_1032 (+ 1 e_1031) d_1030 c_1029 (lambda (a_1035 b_1036 c_1037 d_1038 e_1039 f_1040) (let* ((new-v_1041 (_sim-make-closure index_991 (list a_1003 a_1011 a_1019 a_1027 a_1035) proj_993 act_994)) (p_1042 (list index_991 b_1004 b_1012 b_1020 b_1028 b_1036))) (c_1000 new-v_1041 p_1042 c_1037 d_1038 e_1039 (_sim-upd-cache-cl index_991 values_992 new-v_1041 p_1042 e_1039 f_1040)))))))))))))) (lambda (free-var-values_1048 arg-values_1049 c_1050) (let* ((g_1052 (list-ref free-var-values_1048 3)) (residual-formal_1062 (_sim-generate-var-name! (quote pos))) (g_1063 (_sim-build-var residual-formal_1062)) (residual-formal_1064 (_sim-generate-var-name! (quote new-v))) (g_1065 (_sim-build-var residual-formal_1064)) (residual-formal_1066 (_sim-generate-var-name! (quote p))) (g_1067 (_sim-build-var residual-formal_1066)) (g_1069 (c_1050 (_sim-build-app (list-ref free-var-values_1048 2) (list g_1065 g_1067 (list-ref arg-values_1049 2) (list-ref arg-values_1049 3) g_1063 (_sim-build-primop-l (quote _sim-upd-cache-cl) g_1052 (list-ref free-var-values_1048 4) g_1065 g_1067 g_1063 (list-ref arg-values_1049 5)))))) (g_1070 (_sim-build-let residual-formal_1066 (quote fun) (_sim-build-primop-l (quote cons) g_1052 (list-ref arg-values_1049 1)) g_1069)) (g_1071 (_sim-build-let residual-formal_1064 (quote fun) (_sim-build-cstr (quote _sim-make-closure) (list g_1052 (list-ref arg-values_1049 0) (list-ref free-var-values_1048 0) (list-ref free-var-values_1048 1))) g_1070))) (_sim-build-let residual-formal_1062 (quote fun) (list-ref arg-values_1049 4) g_1071)))))) (proc-e-memo-0-226 g_1073 (_sim-build-var residual-formal_967) (_sim-build-var residual-formal_966) (_sim-build-var residual-formal_965) (_sim-build-var residual-formal_964) (_sim-fetch-bt-tag* (_sim-fetch-abs-free-variables r_3)) g_982 (_sim-build-var residual-formal_963) (collapse1-0-5)))) (g_1077 (_sim-build-let residual-formal_987 (quote fun) (_sim-build-var residual-formal_968) g_1076)) (g_1078 (_sim-build-let residual-formal_985 (quote fun) (_sim-build-var residual-formal_962) g_1077)) (g_1079 (_sim-build-let residual-formal_983 (quote fun) (_sim-build-var residual-formal_961) g_1078)) (g_1080 (_sim-build-let residual-formal_981 (quote fun) (_sim-build-var residual-formal_960) g_1079)) (g_1081 (_sim-build-let residual-formal_979 (quote fun) (_sim-build-var residual-formal_959) g_1080)) (g_1082 (_sim-build-abs (list residual-formal_959 residual-formal_960 residual-formal_961 residual-formal_962 residual-formal_963 residual-formal_964 residual-formal_965 residual-formal_966 residual-formal_967 residual-formal_968) g_1081)) (residual-formal_1083 (_sim-generate-var-name! (quote free-var-values))) (residual-formal_1084 (_sim-generate-var-name! (quote arg-values))) (residual-formal_1085 (_sim-generate-var-name! (quote c))) (g_1087 (_sim-build-var residual-formal_1084)) (g_1088 (_sim-build-var residual-formal_1083)) (residual-formal_1089 (_sim-generate-var-name! (quote c))) (g_1090 (_sim-build-var residual-formal_1089))) (_sim-pcall-test-output! (quote proc-e-memo)) (_sim-pcall-test-output! (quote list-to-environment1)) (let* ((g_1126 (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-abs-formals r_3)) (lambda (value_1092) (_sim-pcall-test-output! (quote list-to-environment)) (let ((cont1_1119 (lambda (a_1093) (proc-e-memo-0-384 a_1093 value_1092 0 g_1087 (lambda (a_1094) (let ((g_1114 (_sim-make-closure 28 (list g_1090) (lambda (index_1095 values_1096 proj_1097 act_1098 formal_1099 rf*_1100 ra*_1101 pos_1102 ca_1103 c_1104) (project-value/rexp-2-96 formal_1099 (list-ref values_1096 0) ca_1103 (+ 1 pos_1102) ra*_1101 rf*_1100 (collapse6-0-105 values_1096 formal_1099 values_1096 index_1095 c_1104 act_1098 proj_1097))) (lambda (free-var-values_1108 arg-values_1109 c_1110) (c_1110 (_sim-build-app (list-ref free-var-values_1108 0) (list (list-ref arg-values_1109 0)))))))) (proc-e-memo-0-40 r_0 g_1114 a_1094 (_sim-fetch-abs-body r_3) (collapse1-0-5)))))))) (_sim-pcall-test-output! (quote list-to-environment1)) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-342 (lambda (a_1120) (proc-e-memo-0-384 a_1120 value_927 0 g_1088 (collapse1-0-47 cont1_1119)))))))) (g_1127 (_sim-build-let residual-formal_1089 (quote fun) (_sim-build-var residual-formal_1085) g_1126)) (g_1128 (_sim-build-abs (list residual-formal_1083 residual-formal_1084 residual-formal_1085) g_1127))) (_sim-build-cstr (quote _sim-make-closure) (list value/rexp_957 a_958 g_1082 g_1128)))))))))) (_sim-add-residual-definition! (_sim-build-def residual-name_955 c_948 g_1131)))) (cont1_936 (_sim-build-pcall residual-name_955 d_949)))))) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-abs-formals r_3)) (lambda (value_1134) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-416 r_2 (_sim-fetch-abs-free-variable-debruijns r_3) value_927 0 (lambda (a_1135) (_sim-pcall-test-output! (quote loop)) (let ((g_1170 (_sim-make-closure 31 (list r_3 r_0) (lambda (index_1136 values_1137 proj_1138 act_1139 formal_1140 rf*_1141 ra*_1142 pos_1143 ca_1144 c_1145) (let* ((v_1146 (list-ref values_1137 0)) (v_1148 (list-ref values_1137 1)) (pos_1149 (+ 1 (+ 1 pos_1143))) (new-v_1150 (_sim-make-closure index_1136 (list v_1146 v_1148) proj_1138 act_1139)) (p_1151 (list index_1136 v_1146 v_1148))) (c_1145 new-v_1150 p_1151 rf*_1141 ra*_1142 pos_1149 (_sim-upd-cache-cl index_1136 values_1137 new-v_1150 p_1151 pos_1149 ca_1144)))) (lambda (free-var-values_1152 arg-values_1153 c_1154) (let* ((g_1155 (list-ref free-var-values_1152 1)) (g_1157 (list-ref arg-values_1153 1)) (g_1158 (list-ref arg-values_1153 0))) (_sim-pcall-test-output! (quote proc-e)) (let ((value_1159 (_sim-fetch-abs-body (list-ref free-var-values_1152 0)))) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-85 (lambda (a_1160) (proc-e-memo-0-45 g_1155 a_1160 g_1158 value_1159 (lambda (a_1161) (let* ((residual-formal_1162 (_sim-generate-var-name! (quote g))) (g_1164 (c_1154 (_sim-build-primop-l (quote _sim-build-abs) g_1157 (_sim-select-value a_1161 residual-formal_1162))))) (_sim-conditional-build-let residual-formal_1162 (quote imp) a_1161 g_1164)))))))))))) (proc-e-memo-0-407 (_sim-fetch-abs-formals r_3) a_1135 value_1134 g_1170 0 (collapse1-0-47 cont1_936))))))))))) (begin (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_1195 (_sim-make-closure 32 (quote ()) (lambda (index_1177 values_1178 proj_1179 act_1180 formal_1181 rf*_1182 ra*_1183 pos_1184 ca_1185 c_1186) (let* ((new-v_1187 (_sim-make-closure index_1177 (quote ()) proj_1179 act_1180)) (p_1188 (list index_1177))) (c_1186 new-v_1187 p_1188 rf*_1182 ra*_1183 pos_1184 (_sim-upd-cache-cl index_1177 values_1178 new-v_1187 p_1188 pos_1184 ca_1185)))) (lambda (free-var-values_1189 arg-values_1190 c_1191) (c_1191 (_sim-isimperative? (list-ref arg-values_1190 0)))))) (cont1_1200 (lambda (a_1197) (proc-e-memo-0-174 r_0 a_1197 g_1195 r_2 (_sim-fetch-app-exp r_3) (collapse1-0-47 cont1_925))))) (if (_sim-isclosure? (_sim-fetch-app-exp r_3)) (let ((g_1346 (_sim-make-closure 36 (list (_sim-fetch-app-args r_3) r_2 r_1 r_0) (lambda (index_1201 values_1202 proj_1203 act_1204 formal_1205 rf*_1206 ra*_1207 pos_1208 ca_1209 c_1210) (let ((v_1211 (list-ref values_1202 0))) (project-value/rexp-1-75 (list-ref values_1202 1) formal_1205 ca_1209 (+ 1 (+ 1 pos_1208)) ra*_1207 rf*_1206 (collapse6-0-120 values_1202 formal_1205 v_1211 v_1211 values_1202 index_1201 c_1210 act_1204 proj_1203)))) (lambda (free-var-values_1216 arg-values_1217 c_1218) (let* ((residual-formal_1224 (_sim-generate-var-name! (quote value))) (g_1225 (_sim-build-var residual-formal_1224))) (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_1244 (_sim-make-closure 33 (quote ()) (lambda (index_1226 values_1227 proj_1228 act_1229 formal_1230 rf*_1231 ra*_1232 pos_1233 ca_1234 c_1235) (let* ((new-v_1236 (_sim-make-closure index_1226 (quote ()) proj_1228 act_1229)) (p_1237 (list index_1226))) (c_1235 new-v_1236 p_1237 rf*_1231 ra*_1232 pos_1233 (_sim-upd-cache-cl index_1226 values_1227 new-v_1236 p_1237 pos_1233 ca_1234)))) (lambda (free-var-values_1238 arg-values_1239 c_1240) (c_1240 (_sim-isimperative? (list-ref arg-values_1239 0)))))) (residual-formal_1245 (_sim-generate-var-name! (quote free-var-values))) (residual-formal_1247 (_sim-generate-var-name! (quote activation))) (g_1340 (_sim-make-closure 35 (list (_sim-build-var residual-formal_1247) (_sim-build-var residual-formal_1245) (list-ref free-var-values_1216 2)) (lambda (index_1249 values_1250 proj_1251 act_1252 formal_1253 rf*_1254 ra*_1255 pos_1256 ca_1257 c_1258) (project-value/rexp-2-96 formal_1253 (list-ref values_1250 0) ca_1257 (+ 1 pos_1256) ra*_1255 rf*_1254 (lambda (a_1261 b_1262 c_1263 d_1264 e_1265 f_1266) (project-value/rexp-2-96 formal_1253 (list-ref values_1250 1) f_1266 (+ 1 e_1265) d_1264 c_1263 (lambda (a_1269 b_1270 c_1271 d_1272 e_1273 f_1274) (project-value/rexp-0-25 (list-ref values_1250 2) formal_1253 f_1274 (+ 1 e_1273) d_1272 c_1271 (lambda (a_1277 b_1278 c_1279 d_1280 e_1281 f_1282) (let* ((new-v_1283 (_sim-make-closure index_1249 (list a_1261 a_1269 a_1277) proj_1251 act_1252)) (p_1284 (list index_1249 b_1262 b_1270 b_1278))) (c_1258 new-v_1283 p_1284 c_1279 d_1280 e_1281 (_sim-upd-cache-cl index_1249 values_1250 new-v_1283 p_1284 e_1281 f_1282)))))))))) (lambda (free-var-values_1288 arg-values_1289 c_1290) (let* ((g_1292 (list-ref free-var-values_1288 1)) (g_1293 (list-ref free-var-values_1288 0)) (g_1294 (list-ref arg-values_1289 0))) (project-value/rexp-0-25 (list-ref free-var-values_1288 2) (quote (c . 17)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_1296 b_1297 c_1298 d_1299 e_1300 f_1301) (let ((p*_1302 (list b_1297))) (project-value/rexp-2-96 (quote (free-var-values . 122)) g_1292 f_1301 (+ 1 e_1300) d_1299 c_1298 (lambda (a_1304 b_1305 c_1306 d_1307 e_1308 f_1309) (let ((p*_1310 (cons b_1305 p*_1302))) (project-value/rexp-2-96 (quote (activation . 123)) g_1293 f_1309 (+ 1 e_1308) d_1307 c_1306 (lambda (a_1312 b_1313 c_1314 d_1315 e_1316 f_1317) (let ((p*_1318 (cons b_1313 p*_1310))) (project-value/rexp-2-96 (quote (arg-values . 124)) g_1294 f_1317 (+ 1 e_1316) d_1315 c_1314 (lambda (a_1320 b_1321 c_1322 d_1323 e_1324 f_1325) (let* ((residual-name_seenb4_1326 (_sim-generate-proc-name! (quote proc-e-4) (cons (cons b_1321 p*_1318) (_sim-pos-pairs-in-cache f_1325)))) (residual-name_1327 (car residual-name_seenb4_1326))) (and (not (cdr residual-name_seenb4_1326)) (let ((g_1334 (let* ((residual-formal_1328 (_sim-generate-var-name! (quote value/rexp))) (g_1332 (proc-e-4-103 (list (_sim-build-var residual-formal_1328)) (_sim-get-closure-activation a_1296) (_sim-get-closure-values a_1296))) (g_1333 (_sim-build-abs (list residual-formal_1328) g_1332))) (_sim-build-app a_1312 (list a_1304 a_1320 g_1333))))) (_sim-add-residual-definition! (_sim-build-def residual-name_1327 c_1322 g_1334)))) (c_1290 (_sim-build-pcall residual-name_1327 d_1323)))))))))))))))))) (g_1342 (proc-e-memo-0-158 (list-ref free-var-values_1216 3) g_1340 g_1244 (list-ref free-var-values_1216 1) (list-ref free-var-values_1216 0) (collapse1-0-79 c_1218))) (g_1343 (_sim-build-let residual-formal_1247 (quote fun) (_sim-build-sel (quote _sim-get-closure-activation) 3 (quote _sim-make-closure) g_1225) g_1342)) (g_1344 (_sim-build-let residual-formal_1245 (quote fun) (_sim-build-sel (quote _sim-get-closure-values) 1 (quote _sim-make-closure) g_1225) g_1343))) (_sim-build-let residual-formal_1224 (quote fun) (list-ref arg-values_1217 0) g_1344))))))) (cont1_1200 g_1346)) (let ((g_1418 (_sim-make-closure 39 (list (_sim-fetch-app-args r_3) r_2 r_1 r_0) (lambda (index_1347 values_1348 proj_1349 act_1350 formal_1351 rf*_1352 ra*_1353 pos_1354 ca_1355 c_1356) (let ((v_1357 (list-ref values_1348 0))) (project-value/rexp-1-75 (list-ref values_1348 1) formal_1351 ca_1355 (+ 1 (+ 1 pos_1354)) ra*_1353 rf*_1352 (collapse6-0-120 values_1348 formal_1351 v_1357 v_1357 values_1348 index_1347 c_1356 act_1350 proj_1349)))) (lambda (free-var-values_1362 arg-values_1363 c_1364) (let ((residual-formal_1370 (_sim-generate-var-name! (quote rexp)))) (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_1390 (_sim-make-closure 37 (quote ()) (lambda (index_1372 values_1373 proj_1374 act_1375 formal_1376 rf*_1377 ra*_1378 pos_1379 ca_1380 c_1381) (let* ((new-v_1382 (_sim-make-closure index_1372 (quote ()) proj_1374 act_1375)) (p_1383 (list index_1372))) (c_1381 new-v_1382 p_1383 rf*_1377 ra*_1378 pos_1379 (_sim-upd-cache-cl index_1372 values_1373 new-v_1382 p_1383 pos_1379 ca_1380)))) (lambda (free-var-values_1384 arg-values_1385 c_1386) (c_1386 (_sim-isimperative? (list-ref arg-values_1385 0)))))) (g_1414 (_sim-make-closure 38 (list (list-ref free-var-values_1362 2) (_sim-build-var residual-formal_1370)) (lambda (index_1391 values_1392 proj_1393 act_1394 formal_1395 rf*_1396 ra*_1397 pos_1398 ca_1399 c_1400) (project-value/rexp-0-25 (list-ref values_1392 0) formal_1395 ca_1399 (+ 1 pos_1398) ra*_1397 rf*_1396 (collapse6-0-171 values_1392 formal_1395 values_1392 index_1391 c_1400 act_1394 proj_1393))) (lambda (free-var-values_1404 arg-values_1405 c_1406) (let ((g_1408 (list-ref free-var-values_1404 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote _sim-build-app) (list-ref free-var-values_1404 1) (list-ref arg-values_1405 0))) (_sim-get-closure-activation g_1408) (_sim-get-closure-values g_1408) c_1406))))) (g_1416 (proc-e-memo-0-158 (list-ref free-var-values_1362 3) g_1414 g_1390 (list-ref free-var-values_1362 1) (list-ref free-var-values_1362 0) (collapse1-0-79 c_1364)))) (_sim-build-let residual-formal_1370 (quote fun) (list-ref arg-values_1363 0) g_1416))))))) (cont1_1200 g_1418)))))))))))))))))))))))))))))) (define (proc-e-memo-0-416 r_0 r_1 r_2 r_3 c_4) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_3 r_2) (lambda (value_5) (let ((cont1_6 (collapse1-0-47 c_4))) (if value_5 (begin (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-342 (collapse1-0-47 cont1_6))) (begin (_sim-pcall-test-output! (quote upd-env)) (_sim-pcall-test-output! (quote lookup-env)) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_1 r_3) (lambda (value_9) (proc-e-memo-0-62 r_0 value_9 (lambda (a_10) (_sim-pcall-test-output! (quote loop)) (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 r_3) (lambda (value_11) (proc-e-memo-0-416 r_0 r_1 r_2 value_11 (lambda (a_12) (proc-e-memo-0-124 a_12 a_10 (collapse1-0-47 cont1_6)))))))))))))))) (define (proc-e-memo-0-407 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_4 r_2) (lambda (value_6) (let ((cont1_7 (collapse1-0-47 c_5))) (if value_6 (proc-e-4-57 (list r_1 (_sim-build-cst (quote ()))) (_sim-get-closure-activation r_3) (_sim-get-closure-values r_3) cont1_7) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_0 r_4) (lambda (value_11) (let* ((residual-formal_14 (_sim-generate-var-name! (quote residual-formal))) (g_15 (_sim-build-var residual-formal_14))) (_sim-pcall-test-output! (quote loop)) (let ((g_48 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 r_4) (lambda (value_16) (let ((g_45 (_sim-make-closure 30 (list r_3 g_15) (lambda (index_17 values_18 proj_19 act_20 formal_21 rf*_22 ra*_23 pos_24 ca_25 c_26) (project-value/rexp-0-25 (list-ref values_18 0) formal_21 ca_25 (+ 1 pos_24) ra*_23 rf*_22 (collapse6-0-171 values_18 formal_21 values_18 index_17 c_26 act_20 proj_19))) (lambda (free-var-values_30 arg-values_31 c_32) (let* ((g_33 (list-ref free-var-values_30 1)) (g_34 (list-ref free-var-values_30 0)) (g_35 (list-ref arg-values_31 1)) (free-var-values_37 (_sim-get-closure-values g_34)) (activation_38 (_sim-get-closure-activation g_34))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-124 (list-ref arg-values_31 0) (_sim-build-primop-l (quote _sim-build-var) g_33) (lambda (a_40) (proc-e-4-53 (list a_40 (_sim-build-primop-l (quote cons) g_33 g_35)) activation_38 free-var-values_37 c_32)))))))) (proc-e-memo-0-407 r_0 r_1 r_2 g_45 value_16 (collapse1-0-47 cont1_7))))))) (_sim-build-let residual-formal_14 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (_sim-varname->name value_11))) g_48)))))))))) (define (proc-e-memo-0-392 r_0 r_1 r_2 r_3 c_4) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_3 r_2) (lambda (value_5) (let ((cont1_6 (collapse1-0-47 c_4))) (if value_5 (cont1_6 (_sim-build-cst (quote ()))) (begin (_sim-pcall-test-output! (quote lookup-env)) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_1 r_3) (lambda (value_7) (proc-e-memo-0-62 r_0 value_7 (lambda (a_8) (_sim-pcall-test-output! (quote loop)) (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 r_3) (lambda (value_9) (proc-e-memo-0-392 r_0 r_1 r_2 value_9 (lambda (a_10) (cont1_6 (_sim-build-primop-l (quote cons) a_8 a_10)))))))))))))))) (define (proc-e-memo-0-384 r_0 r_1 r_2 r_3 c_4) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-385 r_3 r_0 r_1 r_2 (collapse1-0-47 c_4))) (define (proc-e-memo-0-385 r_0 r_1 r_2 r_3 c_4) (let* ((residual-formal_5 (_sim-generate-var-name! (quote value*))) (g_6 (_sim-build-var residual-formal_5)) (g_17 (_sim-check-legality-and-process-primop (quote (= 54)) (list r_3 r_2) (lambda (value_7) (let ((cont1_8 (collapse1-0-47 c_4))) (if value_7 (cont1_8 r_1) (begin (_sim-pcall-test-output! (quote upd-env)) (let ((value/rexp_10 (_sim-build-primop-l (quote list-ref) g_6 (_sim-build-cst r_3)))) (_sim-pcall-test-output! (quote loop)) (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 r_3) (lambda (value_11) (proc-e-memo-0-385 g_6 r_1 r_2 value_11 (lambda (a_12) (proc-e-memo-0-124 a_12 value/rexp_10 (collapse1-0-47 cont1_8)))))))))))))) (_sim-build-let residual-formal_5 (quote fun) r_0 g_17))) (define (proc-e-memo-0-338 r_0 r_1 r_2 r_3 r_4 r_5 c_6) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_5 r_3) (lambda (value_7) (let ((cont1_8 (collapse1-0-47 c_6))) (if value_7 (let* ((free-var-values_9 (_sim-get-closure-values r_4)) (activation_10 (_sim-get-closure-activation r_4))) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-342 (lambda (a_11) (proc-e-4-57 (list a_11) activation_10 free-var-values_9 cont1_8)))) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_2 r_5) (lambda (value_14) (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_33 (_sim-make-closure 22 (quote ()) (lambda (index_15 values_16 proj_17 act_18 formal_19 rf*_20 ra*_21 pos_22 ca_23 c_24) (let* ((new-v_25 (_sim-make-closure index_15 (quote ()) proj_17 act_18)) (p_26 (list index_15))) (c_24 new-v_25 p_26 rf*_20 ra*_21 pos_22 (_sim-upd-cache-cl index_15 values_16 new-v_25 p_26 pos_22 ca_23)))) (lambda (free-var-values_27 arg-values_28 c_29) (c_29 (_sim-isimperative? (list-ref arg-values_28 0)))))) (g_115 (_sim-make-closure 24 (list r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_34 values_35 proj_36 act_37 formal_38 rf*_39 ra*_40 pos_41 ca_42 c_43) (let ((v_44 (list-ref values_35 0))) (project-value/rexp-0-25 (list-ref values_35 1) formal_38 ca_42 (+ 1 (+ 1 pos_41)) ra*_40 rf*_39 (lambda (a_48 b_49 c_50 d_51 e_52 f_53) (let* ((v_54 (list-ref values_35 2)) (v_56 (list-ref values_35 3))) (project-value/rexp-1-75 (list-ref values_35 4) formal_38 f_53 (+ 1 (+ 1 (+ 1 e_52))) d_51 c_50 (lambda (a_60 b_61 c_62 d_63 e_64 f_65) (let* ((v_66 (list-ref values_35 5)) (pos_67 (+ 1 e_64)) (new-v_68 (_sim-make-closure index_34 (list v_44 a_48 v_54 v_56 a_60 v_66) proj_36 act_37)) (p_69 (list index_34 v_44 b_49 v_54 v_56 b_61 v_66))) (c_43 new-v_68 p_69 c_62 d_63 pos_67 (_sim-upd-cache-cl index_34 values_35 new-v_68 p_69 pos_67 f_65)))))))))) (lambda (free-var-values_72 arg-values_73 c_74) (let* ((g_75 (list-ref free-var-values_72 5)) (g_76 (list-ref free-var-values_72 4)) (g_77 (list-ref free-var-values_72 3)) (g_78 (list-ref free-var-values_72 2)) (g_79 (list-ref free-var-values_72 1)) (residual-formal_82 (_sim-generate-var-name! (quote value/rexp))) (g_83 (_sim-build-var residual-formal_82))) (_sim-pcall-test-output! (quote loop)) (let ((g_113 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 (list-ref free-var-values_72 0)) (lambda (value_84) (let ((g_110 (_sim-make-closure 23 (list g_79 g_83) (lambda (index_85 values_86 proj_87 act_88 formal_89 rf*_90 ra*_91 pos_92 ca_93 c_94) (project-value/rexp-0-25 (list-ref values_86 0) formal_89 ca_93 (+ 1 pos_92) ra*_91 rf*_90 (collapse6-0-171 values_86 formal_89 values_86 index_85 c_94 act_88 proj_87))) (lambda (free-var-values_98 arg-values_99 c_100) (let* ((g_102 (list-ref free-var-values_98 0)) (free-var-values_104 (_sim-get-closure-values g_102)) (activation_105 (_sim-get-closure-activation g_102))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-124 (list-ref arg-values_99 0) (list-ref free-var-values_98 1) (lambda (a_106) (proc-e-4-53 (list a_106) activation_105 free-var-values_104 c_100)))))))) (proc-e-memo-0-338 g_75 g_76 g_77 g_78 g_110 value_84 (collapse1-0-79 c_74))))))) (_sim-build-let residual-formal_82 (quote fun) (list-ref arg-values_73 0) g_113))))))) (proc-e-memo-0-174 r_0 g_115 g_33 r_1 value_14 (collapse1-0-47 cont1_8)))))))))) (define (proc-e-memo-0-342 c_0) (c_0 (_sim-make-psds (lambda (proj_1 value_2 formal_3 rf*_4 ra*_5 pos_6 ca_7 c_8) (let ((name_9 (_sim-get-constr-val-cstr-name value_2))) (_sim-get-constr-val-args value_2) (let* ((new-v_11 (_sim-make-psds proj_1 (_sim-make-constr-val name_9 (quote ())))) (p_12 (list name_9))) (c_8 new-v_11 p_12 rf*_4 ra*_5 pos_6 (_sim-upd-cache-ps value_2 new-v_11 p_12 pos_6 ca_7))))) (_sim-binding-nil)))) (define (proc-e-memo-0-226 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (_sim-check-legality-and-process-primop (quote (length 38)) (list r_5) (lambda (value_9) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-228 r_5 r_6 r_7 value_9 r_0 r_1 r_2 r_3 r_4 0 (collapse1-0-47 c_8))))) (define (proc-e-memo-0-228 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 r_8 r_9 c_10) (let* ((residual-formal_11 (_sim-generate-var-name! (quote formal))) (g_12 (_sim-build-var residual-formal_11)) (residual-formal_13 (_sim-generate-var-name! (quote v*))) (g_14 (_sim-build-var residual-formal_13)) (g_154 (_sim-check-legality-and-process-primop (quote (= 54)) (list r_9 r_3) (lambda (value_15) (let ((cont1_16 (collapse1-0-47 c_10))) (if value_15 (proc-e-4-57 (list (_sim-build-cst (quote ())) (_sim-build-cst (quote ())) r_8 r_7 r_6 r_5) (_sim-get-closure-activation r_4) (_sim-get-closure-values r_4) cont1_16) (begin (_sim-pcall-test-output! (quote project-value/rexp)) (let ((value/rexp_22 (_sim-build-primop-l (quote list-ref) g_14 (_sim-build-cst r_9)))) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_0 r_9) (lambda (value_23) (let ((g_151 (_sim-make-closure 52 (list r_9 r_4 r_3 g_12 g_14 r_0) (lambda (index_24 values_25 proj_26 act_27 formal_28 rf*_29 ra*_30 pos_31 ca_32 c_33) (let ((v_34 (list-ref values_25 0))) (project-value/rexp-0-25 (list-ref values_25 1) formal_28 ca_32 (+ 1 (+ 1 pos_31)) ra*_30 rf*_29 (lambda (a_38 b_39 c_40 d_41 e_42 f_43) (let ((v_44 (list-ref values_25 2))) (project-value/rexp-2-96 formal_28 (list-ref values_25 3) f_43 (+ 1 (+ 1 e_42)) d_41 c_40 (lambda (a_48 b_49 c_50 d_51 e_52 f_53) (project-value/rexp-2-96 formal_28 (list-ref values_25 4) f_53 (+ 1 e_52) d_51 c_50 (lambda (a_56 b_57 c_58 d_59 e_60 f_61) (let* ((v_62 (list-ref values_25 5)) (pos_63 (+ 1 e_60)) (new-v_64 (_sim-make-closure index_24 (list v_34 a_38 v_44 a_48 a_56 v_62) proj_26 act_27)) (p_65 (list index_24 v_34 b_39 v_44 b_49 b_57 v_62))) (c_33 new-v_64 p_65 c_58 d_59 pos_63 (_sim-upd-cache-cl index_24 values_25 new-v_64 p_65 pos_63 f_61)))))))))))) (lambda (free-var-values_69 arg-values_70 c_71) (let* ((g_72 (list-ref free-var-values_69 5)) (g_73 (list-ref free-var-values_69 4)) (g_74 (list-ref free-var-values_69 3)) (g_75 (list-ref free-var-values_69 2)) (g_76 (list-ref free-var-values_69 1)) (g_78 (list-ref arg-values_70 5)) (g_79 (list-ref arg-values_70 4)) (g_80 (list-ref arg-values_70 3)) (g_81 (list-ref arg-values_70 2)) (residual-formal_84 (_sim-generate-var-name! (quote new-v))) (g_85 (_sim-build-var residual-formal_84)) (residual-formal_86 (_sim-generate-var-name! (quote p))) (g_87 (_sim-build-var residual-formal_86))) (_sim-pcall-test-output! (quote loop)) (let* ((g_148 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 (list-ref free-var-values_69 0)) (lambda (value_88) (let ((g_145 (_sim-make-closure 51 (list g_76 g_85 g_87) (lambda (index_89 values_90 proj_91 act_92 formal_93 rf*_94 ra*_95 pos_96 ca_97 c_98) (project-value/rexp-0-25 (list-ref values_90 0) formal_93 ca_97 (+ 1 pos_96) ra*_95 rf*_94 (lambda (a_101 b_102 c_103 d_104 e_105 f_106) (project-value/rexp-2-96 formal_93 (list-ref values_90 1) f_106 (+ 1 e_105) d_104 c_103 (lambda (a_109 b_110 c_111 d_112 e_113 f_114) (project-value/rexp-2-96 formal_93 (list-ref values_90 2) f_114 (+ 1 e_113) d_112 c_111 (lambda (a_117 b_118 c_119 d_120 e_121 f_122) (let* ((new-v_123 (_sim-make-closure index_89 (list a_101 a_109 a_117) proj_91 act_92)) (p_124 (list index_89 b_102 b_110 b_118))) (c_98 new-v_123 p_124 c_119 d_120 e_121 (_sim-upd-cache-cl index_89 values_90 new-v_123 p_124 e_121 f_122)))))))))) (lambda (free-var-values_128 arg-values_129 c_130) (let ((g_133 (list-ref free-var-values_128 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote cons) (list-ref free-var-values_128 1) (list-ref arg-values_129 0)) (_sim-build-primop-l (quote cons) (list-ref free-var-values_128 2) (list-ref arg-values_129 1)) (list-ref arg-values_129 2) (list-ref arg-values_129 3) (list-ref arg-values_129 4) (list-ref arg-values_129 5)) (_sim-get-closure-activation g_133) (_sim-get-closure-values g_133) c_130)))))) (proc-e-memo-0-228 g_72 g_73 g_74 g_75 g_145 g_78 g_79 g_80 g_81 value_88 (collapse1-0-79 c_71)))))) (g_149 (_sim-build-let residual-formal_86 (quote fun) (list-ref arg-values_70 1) g_148))) (_sim-build-let residual-formal_84 (quote fun) (list-ref arg-values_70 0) g_149))))))) (proc-e-memo-0-243 g_151 r_5 r_6 r_7 r_8 value_23 value/rexp_22 g_12 (collapse1-0-47 cont1_16)))))))))))) (g_155 (_sim-build-let residual-formal_13 (quote fun) r_1 g_154))) (_sim-build-let residual-formal_11 (quote fun) r_2 g_155))) (define (proc-e-memo-0-243 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (let* ((residual-formal_9 (_sim-generate-var-name! (quote formal))) (g_10 (_sim-build-var residual-formal_9)) (residual-formal_11 (_sim-generate-var-name! (quote v))) (g_12 (_sim-build-var residual-formal_11)) (residual-formal_13 (_sim-generate-var-name! (quote rf*))) (g_14 (_sim-build-var residual-formal_13)) (residual-formal_15 (_sim-generate-var-name! (quote ra*))) (g_16 (_sim-build-var residual-formal_15)) (residual-formal_17 (_sim-generate-var-name! (quote ca))) (g_18 (_sim-build-var residual-formal_17)) (residual-formal_20 (_sim-generate-var-name! (quote pos))) (g_21 (_sim-build-var residual-formal_20)) (g_524 (let ((cont1_23 (collapse1-0-47 c_8))) (if (_sim-bt-static? r_5) (proc-e-4-57 (list g_12 g_12 g_14 g_16 g_21 g_18) (_sim-get-closure-activation r_0) (_sim-get-closure-values r_0) cont1_23) (begin (_sim-pcall-test-output! (quote collapse6)) (let ((cont1_465 (lambda (a_26) (let* ((g_92 (_sim-make-closure 48 (list a_26 g_14 g_16 g_21) (lambda (index_27 values_28 proj_29 act_30 formal_31 rf*_32 ra*_33 pos_34 ca_35 c_36) (project-value/rexp-0-25 (list-ref values_28 0) formal_31 ca_35 (+ 1 pos_34) ra*_33 rf*_32 (lambda (a_39 b_40 c_41 d_42 e_43 f_44) (project-value/rexp-2-96 formal_31 (list-ref values_28 1) f_44 (+ 1 e_43) d_42 c_41 (lambda (a_47 b_48 c_49 d_50 e_51 f_52) (project-value/rexp-2-96 formal_31 (list-ref values_28 2) f_52 (+ 1 e_51) d_50 c_49 (lambda (a_55 b_56 c_57 d_58 e_59 f_60) (project-value/rexp-2-96 formal_31 (list-ref values_28 3) f_60 (+ 1 e_59) d_58 c_57 (lambda (a_63 b_64 c_65 d_66 e_67 f_68) (let* ((new-v_69 (_sim-make-closure index_27 (list a_39 a_47 a_55 a_63) proj_29 act_30)) (p_70 (list index_27 b_40 b_48 b_56 b_64))) (c_36 new-v_69 p_70 c_65 d_66 e_67 (_sim-upd-cache-cl index_27 values_28 new-v_69 p_70 e_67 f_68)))))))))))) (lambda (free-var-values_75 arg-values_76 c_77) (let* ((g_81 (list-ref free-var-values_75 0)) (residual-formal_83 (_sim-generate-var-name! (quote x))) (g_84 (_sim-build-var residual-formal_83)) (g_90 (proc-e-4-53 (list (_sim-build-primop-l (quote caar) g_84) (_sim-build-primop-l (quote cadar) g_84) (list-ref free-var-values_75 1) (list-ref free-var-values_75 2) (list-ref free-var-values_75 3) (_sim-build-primop-l (quote cdr) g_84)) (_sim-get-closure-activation g_81) (_sim-get-closure-values g_81) c_77))) (_sim-build-let residual-formal_83 (quote fun) (list-ref arg-values_76 0) g_90))))) (cont1_94 (collapse1-0-47 cont1_23))) (if (_sim-bt-dynamic? r_5) (project-value/rexp-0-25 g_92 (quote (found-in-cache-cont . 190)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_96 b_97 c_98 d_99 e_100 f_101) (let ((p*_102 (list b_97))) (project-value/rexp-2-96 (quote (ca . 186)) g_18 f_101 (+ 1 e_100) d_99 c_98 (lambda (a_104 b_105 c_106 d_107 e_108 f_109) (let ((p*_110 (cons b_105 p*_102))) (project-value/rexp-2-96 (quote (pos . 188)) g_21 f_109 (+ 1 e_108) d_107 c_106 (lambda (a_112 b_113 c_114 d_115 e_116 f_117) (let ((p*_118 (cons b_113 p*_110))) (project-value/rexp-2-96 (quote (v . 181)) g_12 f_117 (+ 1 e_116) d_115 c_114 (lambda (a_120 b_121 c_122 d_123 e_124 f_125) (let ((p*_126 (cons b_121 p*_118))) (project-value/rexp-2-96 (quote (ra* . 184)) g_16 f_125 (+ 1 e_124) d_123 c_122 (lambda (a_128 b_129 c_130 d_131 e_132 f_133) (let ((p*_134 (cons b_129 p*_126))) (project-value/rexp-2-96 (quote (rf* . 183)) g_14 f_133 (+ 1 e_132) d_131 c_130 (lambda (a_136 b_137 c_138 d_139 e_140 f_141) (let ((p*_142 (cons b_137 p*_134))) (project-value/rexp-0-25 a_26 (quote (c . 189)) f_141 (+ 1 e_140) d_139 c_138 (lambda (a_144 b_145 c_146 d_147 e_148 f_149) (let ((p*_150 (cons b_145 p*_142))) (project-value/rexp-2-96 (quote (formal . 180)) g_10 f_149 (+ 1 e_148) d_147 c_146 (lambda (a_152 b_153 c_154 d_155 e_156 f_157) (let* ((residual-name_seenb4_158 (_sim-generate-proc-name! (quote project-value/rexp-2) (cons (cons b_153 p*_150) (_sim-pos-pairs-in-cache f_157)))) (residual-name_159 (car residual-name_seenb4_158))) (and (not (cdr residual-name_seenb4_158)) (let ((g_201 (let* ((residual-formal_160 (_sim-generate-var-name! (quote formal))) (residual-formal_162 (_sim-generate-var-name! (quote rf*))) (residual-formal_164 (_sim-generate-var-name! (quote ra*))) (residual-formal_166 (_sim-generate-var-name! (quote v))) (g_167 (_sim-build-var residual-formal_166)) (residual-formal_168 (_sim-generate-var-name! (quote pos))) (g_169 (_sim-build-var residual-formal_168)) (residual-formal_170 (_sim-generate-var-name! (quote ca))) (g_171 (_sim-build-var residual-formal_170)) (residual-formal_172 (_sim-generate-var-name! (quote x))) (g_173 (_sim-build-var residual-formal_172)) (residual-formal_176 (_sim-generate-var-name! (quote rf))) (g_177 (_sim-build-var residual-formal_176)) (residual-formal_178 (_sim-generate-var-name! (quote new-v))) (g_179 (_sim-build-var residual-formal_178)) (residual-formal_180 (_sim-generate-var-name! (quote p))) (g_181 (_sim-build-var residual-formal_180)) (g_187 (proc-e-4-103 (list g_179 g_181 (_sim-build-primop-l (quote cons) g_177 (_sim-build-var residual-formal_162)) (_sim-build-primop-l (quote cons) g_167 (_sim-build-var residual-formal_164)) g_169 (_sim-build-primop-l (quote _sim-upd-cache-d) g_167 g_179 g_181 g_169 g_171)) (_sim-get-closure-activation a_144) (_sim-get-closure-values a_144))) (g_188 (_sim-build-let residual-formal_180 (quote fun) (_sim-build-cst (quote hole)) g_187)) (g_189 (_sim-build-let residual-formal_178 (quote fun) (_sim-build-primop-l (quote _sim-build-var) g_177) g_188)) (rexp-then_190 (_sim-build-let residual-formal_176 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-primop-l (quote _sim-varname->name) (_sim-build-var residual-formal_160))) g_189)) (rexp-else_193 (proc-e-4-103 (list g_173) (_sim-get-closure-activation a_96) (_sim-get-closure-values a_96))) (g_194 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_173 (_sim-build-cst (quote not-found))) rexp-then_190 rexp-else_193)) (g_195 (_sim-build-let residual-formal_172 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-d) g_167 g_169 g_171) g_194)) (g_196 (_sim-build-let residual-formal_170 (quote fun) a_104 g_195)) (g_197 (_sim-build-let residual-formal_168 (quote fun) a_112 g_196)) (g_198 (_sim-build-let residual-formal_166 (quote fun) a_120 g_197)) (g_199 (_sim-build-let residual-formal_164 (quote fun) a_128 g_198)) (g_200 (_sim-build-let residual-formal_162 (quote fun) a_136 g_199))) (_sim-build-let residual-formal_160 (quote fun) a_152 g_200)))) (_sim-add-residual-definition! (_sim-build-def residual-name_159 c_154 g_201)))) (cont1_94 (_sim-build-pcall residual-name_159 d_155)))))))))))))))))))))))))) (let ((cont1_211 (collapse1-0-47 cont1_94))) (if (_sim-bt-psds? r_5) (project-value/rexp-0-25 g_92 (quote (found-in-cache-cont . 190)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_213 b_214 c_215 d_216 e_217 f_218) (let ((p*_219 (list b_214))) (project-value/rexp-0-25 a_26 (quote (c . 189)) f_218 (+ 1 e_217) d_216 c_215 (lambda (a_221 b_222 c_223 d_224 e_225 f_226) (let ((p*_227 (cons b_222 p*_219))) (project-value/rexp-2-96 (quote (ca . 186)) g_18 f_226 (+ 1 e_225) d_224 c_223 (lambda (a_229 b_230 c_231 d_232 e_233 f_234) (let ((p*_235 (cons b_230 p*_227))) (project-value/rexp-2-96 (quote (pos . 188)) g_21 f_234 (+ 1 e_233) d_232 c_231 (lambda (a_237 b_238 c_239 d_240 e_241 f_242) (let ((p*_243 (cons b_238 p*_235))) (project-value/rexp-2-96 (quote (ra* . 184)) g_16 f_242 (+ 1 e_241) d_240 c_239 (lambda (a_245 b_246 c_247 d_248 e_249 f_250) (let ((p*_251 (cons b_246 p*_243))) (project-value/rexp-2-96 (quote (rf* . 183)) g_14 f_250 (+ 1 e_249) d_248 c_247 (lambda (a_253 b_254 c_255 d_256 e_257 f_258) (let ((p*_259 (cons b_254 p*_251))) (project-value/rexp-2-96 (quote (formal . 180)) g_10 f_258 (+ 1 e_257) d_256 c_255 (lambda (a_261 b_262 c_263 d_264 e_265 f_266) (let ((p*_267 (cons b_262 p*_259))) (project-value/rexp-2-96 (quote (v . 181)) g_12 f_266 (+ 1 e_265) d_264 c_263 (lambda (a_269 b_270 c_271 d_272 e_273 f_274) (let* ((residual-name_seenb4_275 (_sim-generate-proc-name! (quote project-value/rexp-1) (cons (cons b_270 p*_267) (_sim-pos-pairs-in-cache f_274)))) (residual-name_276 (car residual-name_seenb4_275))) (and (not (cdr residual-name_seenb4_275)) (let ((g_325 (let* ((residual-formal_277 (_sim-generate-var-name! (quote v))) (g_278 (_sim-build-var residual-formal_277)) (residual-formal_279 (_sim-generate-var-name! (quote formal))) (residual-formal_281 (_sim-generate-var-name! (quote rf*))) (residual-formal_283 (_sim-generate-var-name! (quote ra*))) (residual-formal_285 (_sim-generate-var-name! (quote pos))) (g_286 (_sim-build-var residual-formal_285)) (residual-formal_287 (_sim-generate-var-name! (quote ca))) (g_288 (_sim-build-var residual-formal_287)) (residual-formal_289 (_sim-generate-var-name! (quote value))) (g_290 (_sim-build-var residual-formal_289)) (residual-formal_291 (_sim-generate-var-name! (quote x))) (g_292 (_sim-build-var residual-formal_291)) (residual-formal_294 (_sim-generate-var-name! (quote proj))) (g_295 (_sim-build-var residual-formal_294)) (residual-formal_296 (_sim-generate-var-name! (quote new-v))) (residual-formal_297 (_sim-generate-var-name! (quote p))) (residual-formal_298 (_sim-generate-var-name! (quote rf*))) (residual-formal_299 (_sim-generate-var-name! (quote ra*))) (residual-formal_300 (_sim-generate-var-name! (quote pos))) (residual-formal_301 (_sim-generate-var-name! (quote ca))) (g_310 (proc-e-4-103 (list (_sim-build-var residual-formal_296) (_sim-build-var residual-formal_297) (_sim-build-var residual-formal_298) (_sim-build-var residual-formal_299) (_sim-build-var residual-formal_300) (_sim-build-var residual-formal_301)) (_sim-get-closure-activation a_221) (_sim-get-closure-values a_221))) (g_311 (_sim-build-abs (list residual-formal_296 residual-formal_297 residual-formal_298 residual-formal_299 residual-formal_300 residual-formal_301) g_310)) (g_312 (_sim-build-app g_295 (list g_295 g_290 (_sim-build-var residual-formal_279) (_sim-build-var residual-formal_281) (_sim-build-var residual-formal_283) g_286 g_288 g_311))) (rexp-then_313 (_sim-build-let residual-formal_294 (quote fun) (_sim-build-sel (quote _sim-get-psds-projection) 0 (quote _sim-make-psds) g_278) g_312)) (rexp-else_316 (proc-e-4-103 (list g_292) (_sim-get-closure-activation a_213) (_sim-get-closure-values a_213))) (g_317 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_292 (_sim-build-cst (quote not-found))) rexp-then_313 rexp-else_316)) (g_318 (_sim-build-let residual-formal_291 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-ps) g_290 g_286 g_288) g_317)) (g_319 (_sim-build-let residual-formal_289 (quote fun) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) g_278) g_318)) (g_320 (_sim-build-let residual-formal_287 (quote fun) a_229 g_319)) (g_321 (_sim-build-let residual-formal_285 (quote fun) a_237 g_320)) (g_322 (_sim-build-let residual-formal_283 (quote fun) a_245 g_321)) (g_323 (_sim-build-let residual-formal_281 (quote fun) a_253 g_322)) (g_324 (_sim-build-let residual-formal_279 (quote fun) a_261 g_323))) (_sim-build-let residual-formal_277 (quote fun) a_269 g_324)))) (_sim-add-residual-definition! (_sim-build-def residual-name_276 c_271 g_325)))) (cont1_211 (_sim-build-pcall residual-name_276 d_272)))))))))))))))))))))))))) (let ((cont1_335 (collapse1-0-47 cont1_211))) (if (_sim-bt-closure? r_5) (project-value/rexp-0-25 g_92 (quote (found-in-cache-cont . 190)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_337 b_338 c_339 d_340 e_341 f_342) (let ((p*_343 (list b_338))) (project-value/rexp-0-25 a_26 (quote (c . 189)) f_342 (+ 1 e_341) d_340 c_339 (lambda (a_345 b_346 c_347 d_348 e_349 f_350) (let ((p*_351 (cons b_346 p*_343))) (project-value/rexp-2-96 (quote (ca . 186)) g_18 f_350 (+ 1 e_349) d_348 c_347 (lambda (a_353 b_354 c_355 d_356 e_357 f_358) (let ((p*_359 (cons b_354 p*_351))) (project-value/rexp-2-96 (quote (pos . 188)) g_21 f_358 (+ 1 e_357) d_356 c_355 (lambda (a_361 b_362 c_363 d_364 e_365 f_366) (let ((p*_367 (cons b_362 p*_359))) (project-value/rexp-2-96 (quote (ra* . 184)) g_16 f_366 (+ 1 e_365) d_364 c_363 (lambda (a_369 b_370 c_371 d_372 e_373 f_374) (let ((p*_375 (cons b_370 p*_367))) (project-value/rexp-2-96 (quote (rf* . 183)) g_14 f_374 (+ 1 e_373) d_372 c_371 (lambda (a_377 b_378 c_379 d_380 e_381 f_382) (let ((p*_383 (cons b_378 p*_375))) (project-value/rexp-2-96 (quote (formal . 180)) g_10 f_382 (+ 1 e_381) d_380 c_379 (lambda (a_385 b_386 c_387 d_388 e_389 f_390) (let ((p*_391 (cons b_386 p*_383))) (project-value/rexp-2-96 (quote (v . 181)) g_12 f_390 (+ 1 e_389) d_388 c_387 (lambda (a_393 b_394 c_395 d_396 e_397 f_398) (let* ((residual-name_seenb4_399 (_sim-generate-proc-name! (quote project-value/rexp-0) (cons (cons b_394 p*_391) (_sim-pos-pairs-in-cache f_398)))) (residual-name_400 (car residual-name_seenb4_399))) (and (not (cdr residual-name_seenb4_399)) (let ((g_453 (let* ((residual-formal_401 (_sim-generate-var-name! (quote v))) (g_402 (_sim-build-var residual-formal_401)) (residual-formal_403 (_sim-generate-var-name! (quote formal))) (residual-formal_405 (_sim-generate-var-name! (quote rf*))) (residual-formal_407 (_sim-generate-var-name! (quote ra*))) (residual-formal_409 (_sim-generate-var-name! (quote pos))) (g_410 (_sim-build-var residual-formal_409)) (residual-formal_411 (_sim-generate-var-name! (quote ca))) (g_412 (_sim-build-var residual-formal_411)) (residual-formal_413 (_sim-generate-var-name! (quote index))) (g_414 (_sim-build-var residual-formal_413)) (residual-formal_415 (_sim-generate-var-name! (quote values))) (g_416 (_sim-build-var residual-formal_415)) (residual-formal_417 (_sim-generate-var-name! (quote x))) (g_418 (_sim-build-var residual-formal_417)) (residual-formal_420 (_sim-generate-var-name! (quote proj))) (g_421 (_sim-build-var residual-formal_420)) (residual-formal_423 (_sim-generate-var-name! (quote new-v))) (residual-formal_424 (_sim-generate-var-name! (quote p))) (residual-formal_425 (_sim-generate-var-name! (quote rf*))) (residual-formal_426 (_sim-generate-var-name! (quote ra*))) (residual-formal_427 (_sim-generate-var-name! (quote pos))) (residual-formal_428 (_sim-generate-var-name! (quote ca))) (g_437 (proc-e-4-103 (list (_sim-build-var residual-formal_423) (_sim-build-var residual-formal_424) (_sim-build-var residual-formal_425) (_sim-build-var residual-formal_426) (_sim-build-var residual-formal_427) (_sim-build-var residual-formal_428)) (_sim-get-closure-activation a_345) (_sim-get-closure-values a_345))) (g_438 (_sim-build-abs (list residual-formal_423 residual-formal_424 residual-formal_425 residual-formal_426 residual-formal_427 residual-formal_428) g_437)) (g_439 (_sim-build-app g_421 (list g_414 g_416 g_421 (_sim-build-sel (quote _sim-get-closure-activation) 3 (quote _sim-make-closure) g_402) (_sim-build-var residual-formal_403) (_sim-build-var residual-formal_405) (_sim-build-var residual-formal_407) g_410 g_412 g_438))) (rexp-then_440 (_sim-build-let residual-formal_420 (quote fun) (_sim-build-sel (quote _sim-get-closure-projection) 2 (quote _sim-make-closure) g_402) g_439)) (rexp-else_443 (proc-e-4-103 (list g_418) (_sim-get-closure-activation a_337) (_sim-get-closure-values a_337))) (g_444 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_418 (_sim-build-cst (quote not-found))) rexp-then_440 rexp-else_443)) (g_445 (_sim-build-let residual-formal_417 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-cl) g_414 g_416 g_410 g_412) g_444)) (g_446 (_sim-build-let residual-formal_415 (quote fun) (_sim-build-sel (quote _sim-get-closure-values) 1 (quote _sim-make-closure) g_402) g_445)) (g_447 (_sim-build-let residual-formal_413 (quote fun) (_sim-build-sel (quote _sim-get-closure-index) 0 (quote _sim-make-closure) g_402) g_446)) (g_448 (_sim-build-let residual-formal_411 (quote fun) a_353 g_447)) (g_449 (_sim-build-let residual-formal_409 (quote fun) a_361 g_448)) (g_450 (_sim-build-let residual-formal_407 (quote fun) a_369 g_449)) (g_451 (_sim-build-let residual-formal_405 (quote fun) a_377 g_450)) (g_452 (_sim-build-let residual-formal_403 (quote fun) a_385 g_451))) (_sim-build-let residual-formal_401 (quote fun) a_393 g_452)))) (_sim-add-residual-definition! (_sim-build-def residual-name_400 c_395 g_453)))) (cont1_335 (_sim-build-pcall residual-name_400 d_396)))))))))))))))))))))))))) (_sim-build-primop-l (quote _sim-error) (_sim-build-cst (quote project-value/rexp)) (_sim-build-cst "unexpected binding time value: ~s") (_sim-build-cst r_5))))))))))) (project-value/rexp-0-25 r_0 (quote (cont . 262)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_467 b_468 c_469 d_470 e_471 f_472) (let* ((residual-name_seenb4_473 (_sim-generate-proc-name! (quote collapse6-0) (cons (list b_468) (_sim-pos-pairs-in-cache f_472)))) (residual-name_474 (car residual-name_seenb4_473))) (and (not (cdr residual-name_seenb4_473)) (let ((g_491 (let* ((residual-formal_475 (_sim-generate-var-name! (quote a))) (residual-formal_476 (_sim-generate-var-name! (quote b))) (residual-formal_477 (_sim-generate-var-name! (quote c))) (residual-formal_478 (_sim-generate-var-name! (quote d))) (residual-formal_479 (_sim-generate-var-name! (quote e))) (residual-formal_480 (_sim-generate-var-name! (quote f))) (g_489 (proc-e-4-103 (list (_sim-build-var residual-formal_475) (_sim-build-var residual-formal_476) (_sim-build-var residual-formal_477) (_sim-build-var residual-formal_478) (_sim-build-var residual-formal_479) (_sim-build-var residual-formal_480)) (_sim-get-closure-activation a_467) (_sim-get-closure-values a_467)))) (_sim-build-abs (list residual-formal_475 residual-formal_476 residual-formal_477 residual-formal_478 residual-formal_479 residual-formal_480) g_489)))) (_sim-add-residual-definition! (_sim-build-def residual-name_474 c_469 g_491)))) (let* ((residual-formal_492 (_sim-generate-var-name! (quote cont1))) (g_520 (_sim-make-closure 56 (list (_sim-build-var residual-formal_492)) (lambda (index_494 values_495 proj_496 act_497 formal_498 rf*_499 ra*_500 pos_501 ca_502 c_503) (project-value/rexp-2-96 formal_498 (list-ref values_495 0) ca_502 (+ 1 pos_501) ra*_500 rf*_499 (collapse6-0-105 values_495 formal_498 values_495 index_494 c_503 act_497 proj_496))) (lambda (free-var-values_507 arg-values_508 c_509) (c_509 (_sim-build-app (list-ref free-var-values_507 0) (list (list-ref arg-values_508 0) (list-ref arg-values_508 1) (list-ref arg-values_508 2) (list-ref arg-values_508 3) (list-ref arg-values_508 4) (list-ref arg-values_508 5))))))) (g_521 (cont1_465 g_520))) (_sim-build-let residual-formal_492 (quote fun) (_sim-build-pcall residual-name_474 d_470) g_521)))))))))) (g_525 (_sim-build-let residual-formal_20 (quote fun) (_sim-build-primop-l (quote +) (_sim-build-cst 1) r_2) g_524)) (g_526 (_sim-build-let residual-formal_17 (quote fun) r_1 g_525)) (g_527 (_sim-build-let residual-formal_15 (quote fun) r_3 g_526)) (g_528 (_sim-build-let residual-formal_13 (quote fun) r_4 g_527)) (g_529 (_sim-build-let residual-formal_11 (quote fun) r_6 g_528))) (_sim-build-let residual-formal_9 (quote fun) r_7 g_529))) (define (collapse6-0-206 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let* ((v_13 (list-ref cont_0 1)) (pos_14 (+ 1 e_11)) (new-v_15 (_sim-make-closure cont_3 (list a_7 v_13) cont_6 cont_5)) (p_16 (list cont_3 b_8 v_13))) (cont_4 new-v_15 p_16 c_9 d_10 pos_14 (_sim-upd-cache-cl cont_3 cont_2 new-v_15 p_16 pos_14 f_12))))) (define (proc-e-memo-0-158 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-check-legality-and-process-primop (quote (length 38)) (list r_4) (lambda (value_6) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-160 r_0 r_2 r_3 r_4 value_6 r_1 0 (collapse1-0-47 c_5))))) (define (proc-e-memo-0-160 r_0 r_1 r_2 r_3 r_4 r_5 r_6 c_7) (_sim-check-legality-and-process-primop (quote (= 54)) (list r_6 r_4) (lambda (value_8) (let ((cont1_9 (collapse1-0-47 c_7))) (if value_8 (proc-e-4-57 (list (_sim-build-cst (quote ()))) (_sim-get-closure-activation r_5) (_sim-get-closure-values r_5) cont1_9) (_sim-check-legality-and-process-primop (quote (list-ref 41)) (list r_3 r_6) (lambda (value_13) (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let ((g_103 (_sim-make-closure 41 (list r_6 r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_14 values_15 proj_16 act_17 formal_18 rf*_19 ra*_20 pos_21 ca_22 c_23) (let ((v_24 (list-ref values_15 0))) (project-value/rexp-0-25 (list-ref values_15 1) formal_18 ca_22 (+ 1 (+ 1 pos_21)) ra*_20 rf*_19 (lambda (a_28 b_29 c_30 d_31 e_32 f_33) (let* ((v_34 (list-ref values_15 2)) (v_36 (list-ref values_15 3))) (project-value/rexp-1-75 (list-ref values_15 4) formal_18 f_33 (+ 1 (+ 1 (+ 1 e_32))) d_31 c_30 (lambda (a_40 b_41 c_42 d_43 e_44 f_45) (project-value/rexp-0-25 (list-ref values_15 5) formal_18 f_45 (+ 1 e_44) d_43 c_42 (lambda (a_48 b_49 c_50 d_51 e_52 f_53) (let* ((v_54 (list-ref values_15 6)) (pos_55 (+ 1 e_52)) (new-v_56 (_sim-make-closure index_14 (list v_24 a_28 v_34 v_36 a_40 a_48 v_54) proj_16 act_17)) (p_57 (list index_14 v_24 b_29 v_34 v_36 b_41 b_49 v_54))) (c_23 new-v_56 p_57 c_50 d_51 pos_55 (_sim-upd-cache-cl index_14 values_15 new-v_56 p_57 pos_55 f_53)))))))))))) (lambda (free-var-values_61 arg-values_62 c_63) (let* ((g_64 (list-ref free-var-values_61 6)) (g_65 (list-ref free-var-values_61 5)) (g_66 (list-ref free-var-values_61 4)) (g_67 (list-ref free-var-values_61 3)) (g_68 (list-ref free-var-values_61 2)) (g_69 (list-ref free-var-values_61 1)) (residual-formal_72 (_sim-generate-var-name! (quote value/rexp))) (g_73 (_sim-build-var residual-formal_72))) (_sim-pcall-test-output! (quote loop)) (let ((g_101 (_sim-check-legality-and-process-primop (quote (+ 66)) (list 1 (list-ref free-var-values_61 0)) (lambda (value_74) (let ((g_98 (_sim-make-closure 40 (list g_69 g_73) (lambda (index_75 values_76 proj_77 act_78 formal_79 rf*_80 ra*_81 pos_82 ca_83 c_84) (project-value/rexp-0-25 (list-ref values_76 0) formal_79 ca_83 (+ 1 pos_82) ra*_81 rf*_80 (collapse6-0-171 values_76 formal_79 values_76 index_75 c_84 act_78 proj_77))) (lambda (free-var-values_88 arg-values_89 c_90) (let ((g_92 (list-ref free-var-values_88 0))) (proc-e-4-53 (list (_sim-build-primop-l (quote cons) (list-ref free-var-values_88 1) (list-ref arg-values_89 0))) (_sim-get-closure-activation g_92) (_sim-get-closure-values g_92) c_90)))))) (proc-e-memo-0-160 g_64 g_65 g_66 g_67 g_68 g_98 value_74 (collapse1-0-79 c_63))))))) (_sim-build-let residual-formal_72 (quote fun) (list-ref arg-values_62 0) g_101))))))) (proc-e-memo-0-174 r_0 g_103 r_1 r_2 value_13 (collapse1-0-47 cont1_9)))))))))) (define (proc-e-memo-0-174 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-pcall-test-output! (quote proc-e)) ((_sim-get-closure-activation r_2) (_sim-get-closure-values r_2) (list r_4) (lambda (value/rexp_8) (let ((cont1_12 (lambda (a_9) (proc-e-memo-0-45 r_0 a_9 r_3 r_4 (collapse1-0-47 c_5))))) (if value/rexp_8 (let ((g_51 (_sim-make-closure 42 (list r_4 r_1) (lambda (index_13 values_14 proj_15 act_16 formal_17 rf*_18 ra*_19 pos_20 ca_21 c_22) (let ((v_23 (list-ref values_14 0))) (project-value/rexp-0-25 (list-ref values_14 1) formal_17 ca_21 (+ 1 (+ 1 pos_20)) ra*_19 rf*_18 (collapse6-0-179 values_14 formal_17 v_23 v_23 values_14 index_13 c_22 act_16 proj_15)))) (lambda (free-var-values_28 arg-values_29 c_30) (let* ((g_31 (list-ref free-var-values_28 1)) (residual-formal_34 (_sim-generate-var-name! (quote rexp))) (g_35 (_sim-build-var residual-formal_34)) (residual-formal_37 (_sim-generate-var-name! (quote residual-formal))) (g_38 (_sim-build-var residual-formal_37)) (g_48 (let ((value/rexp_40 (_sim-build-cst (_sim-fetch-eod-tag (list-ref free-var-values_28 0))))) ((_sim-get-closure-activation g_31) (_sim-get-closure-values g_31) (list (_sim-build-primop-l (quote _sim-select-value) g_35 g_38)) (lambda (value/rexp_44) (let* ((residual-formal_45 (_sim-generate-var-name! (quote g))) (g_47 (c_30 (_sim-build-primop-l (quote _sim-conditional-build-let) g_38 value/rexp_40 g_35 (_sim-select-value value/rexp_44 residual-formal_45))))) (_sim-conditional-build-let residual-formal_45 (quote imp) value/rexp_44 g_47)))))) (g_49 (_sim-build-let residual-formal_37 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (quote g))) g_48))) (_sim-build-let residual-formal_34 (quote fun) (list-ref arg-values_29 0) g_49)))))) (cont1_12 g_51)) (cont1_12 r_1)))))) (define (collapse6-0-179 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6 cont_7 cont_8) (lambda (a_9 b_10 c_11 d_12 e_13 f_14) (let* ((new-v_15 (_sim-make-closure cont_5 (list cont_3 a_9) cont_8 cont_7)) (p_16 (list cont_5 cont_2 b_10))) (cont_6 new-v_15 p_16 c_11 d_12 e_13 (_sim-upd-cache-cl cont_5 cont_4 new-v_15 p_16 e_13 f_14))))) (define (collapse6-0-171 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (project-value/rexp-2-96 cont_1 (list-ref cont_0 1) f_12 (+ 1 e_11) d_10 c_9 (lambda (a_15 b_16 c_17 d_18 e_19 f_20) (let* ((new-v_21 (_sim-make-closure cont_3 (list a_7 a_15) cont_6 cont_5)) (p_22 (list cont_3 b_8 b_16))) (cont_4 new-v_21 p_22 c_17 d_18 e_19 (_sim-upd-cache-cl cont_3 cont_2 new-v_21 p_22 e_19 f_20))))))) (define (proc-e-memo-0-124 r_0 r_1 c_2) (let* ((residual-formal_3 (_sim-generate-var-name! (quote g))) (g_35 (c_2 (_sim-make-psds (lambda (proj_5 value_6 formal_7 rf*_8 ra*_9 pos_10 ca_11 c_12) (let* ((name_13 (_sim-get-constr-val-cstr-name value_6)) (v*_14 (_sim-get-constr-val-args value_6))) (project-value/rexp-2-96 formal_7 (list-ref v*_14 0) ca_11 (+ 1 pos_10) ra*_9 rf*_8 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (project-value/rexp-1-75 (list-ref v*_14 1) formal_7 f_22 (+ 1 e_21) d_20 c_19 (lambda (a_25 b_26 c_27 d_28 e_29 f_30) (let* ((new-v_31 (_sim-make-psds proj_5 (_sim-make-constr-val name_13 (list a_17 a_25)))) (p_32 (list name_13 b_18 b_26))) (c_12 new-v_31 p_32 c_27 d_28 e_29 (_sim-upd-cache-ps value_6 new-v_31 p_32 e_29 f_30))))))))) (_sim-binding-cons (_sim-select-value r_1 residual-formal_3) r_0))))) (_sim-conditional-build-let residual-formal_3 (quote fun) r_1 g_35))) (define (collapse6-0-120 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6 cont_7 cont_8) (lambda (a_9 b_10 c_11 d_12 e_13 f_14) (project-value/rexp-0-25 (list-ref cont_0 2) cont_1 f_14 (+ 1 e_13) d_12 c_11 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (let* ((v_23 (list-ref cont_0 3)) (pos_24 (+ 1 e_21)) (new-v_25 (_sim-make-closure cont_5 (list cont_3 a_9 a_17 v_23) cont_8 cont_7)) (p_26 (list cont_5 cont_2 b_10 b_18 v_23))) (cont_6 new-v_25 p_26 c_19 d_20 pos_24 (_sim-upd-cache-cl cont_5 cont_4 new-v_25 p_26 pos_24 f_22))))))) (define (proc-e-memo-0-99 r_0 c_1) (project-value/rexp-0-25 r_0 (quote (cont . 258)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_3 b_4 c_5 d_6 e_7 f_8) (let* ((residual-name_seenb4_9 (_sim-generate-proc-name! (quote collapse1-0) (cons (list b_4) (_sim-pos-pairs-in-cache f_8)))) (residual-name_10 (car residual-name_seenb4_9))) (and (not (cdr residual-name_seenb4_9)) (let ((g_17 (let* ((residual-formal_11 (_sim-generate-var-name! (quote a))) (g_15 (proc-e-4-103 (list (_sim-build-var residual-formal_11)) (_sim-get-closure-activation a_3) (_sim-get-closure-values a_3)))) (_sim-build-abs (list residual-formal_11) g_15)))) (_sim-add-residual-definition! (_sim-build-def residual-name_10 c_5 g_17)))) (let* ((residual-formal_18 (_sim-generate-var-name! (quote cont1))) (g_41 (_sim-make-closure 54 (list (_sim-build-var residual-formal_18)) (lambda (index_20 values_21 proj_22 act_23 formal_24 rf*_25 ra*_26 pos_27 ca_28 c_29) (project-value/rexp-2-96 formal_24 (list-ref values_21 0) ca_28 (+ 1 pos_27) ra*_26 rf*_25 (collapse6-0-105 values_21 formal_24 values_21 index_20 c_29 act_23 proj_22))) (lambda (free-var-values_33 arg-values_34 c_35) (c_35 (_sim-build-app (list-ref free-var-values_33 0) (list (list-ref arg-values_34 0))))))) (g_42 (c_1 g_41))) (_sim-build-let residual-formal_18 (quote fun) (_sim-build-pcall residual-name_10 d_6) g_42)))))) (define (collapse6-0-105 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let* ((new-v_13 (_sim-make-closure cont_3 (list a_7) cont_6 cont_5)) (p_14 (list cont_3 b_8))) (cont_4 new-v_13 p_14 c_9 d_10 e_11 (_sim-upd-cache-cl cont_3 cont_2 new-v_13 p_14 e_11 f_12))))) (define (proc-e-4-103 arg-values_0 activation_1 free-var-values_2) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_3) value/rexp_3))) (define (project-value/rexp-2-96 formal_0 v_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let ((x_7 (_sim-lookup-cache-d v_1 found-in-cache-cont_3 ca_2))) (if (equal? x_7 (quote not-found)) (let* ((rf_8 (_sim-generate-var-name! (_sim-varname->name formal_0))) (new-v_9 (_sim-build-var rf_8))) (found-in-cache-cont_6 new-v_9 (quote hole) (cons rf_8 found-in-cache-cont_5) (cons v_1 found-in-cache-cont_4) found-in-cache-cont_3 (_sim-upd-cache-d v_1 new-v_9 (quote hole) found-in-cache-cont_3 ca_2))) (found-in-cache-cont_6 (caar x_7) (cadar x_7) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_7))))) (define (proc-e-memo-0-85 c_0) (let ((g_18 (_sim-make-closure 0 (quote ()) (lambda (index_1 values_2 proj_3 act_4 formal_5 rf*_6 ra*_7 pos_8 ca_9 c_10) (let* ((new-v_11 (_sim-make-closure index_1 (quote ()) proj_3 act_4)) (p_12 (list index_1))) (c_10 new-v_11 p_12 rf*_6 ra*_7 pos_8 (_sim-upd-cache-cl index_1 values_2 new-v_11 p_12 pos_8 ca_9)))) (lambda (free-var-values_13 arg-values_14 c_15) (c_15 (list-ref arg-values_14 0)))))) (c_0 g_18))) (define (collapse1-0-79 cont_0) (lambda (a_1) (cont_0 a_1))) (define (project-value/rexp-1-75 v_0 formal_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let* ((value_7 (_sim-get-psds-value v_0)) (x_8 (_sim-lookup-cache-ps value_7 found-in-cache-cont_3 ca_2))) (if (equal? x_8 (quote not-found)) (let ((proj_9 (_sim-get-psds-projection v_0))) (proj_9 proj_9 value_7 formal_1 found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 ca_2 (lambda (new-v_10 p_11 rf*_12 ra*_13 pos_14 ca_15) (found-in-cache-cont_6 new-v_10 p_11 rf*_12 ra*_13 pos_14 ca_15)))) (found-in-cache-cont_6 (caar x_8) (cadar x_8) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_8))))) (define (proc-e-memo-0-62 r_0 r_1 c_2) (let ((cont1_3 (collapse1-0-47 c_2))) (if (_sim-binding-nil? (_sim-get-psds-value r_0)) (_sim-build-primop-l (quote _sim-error) (_sim-build-cst (quote lookup-env)) (_sim-build-cst "unbound variable: ~s") (_sim-build-cst r_1)) (let ((cont1_8 (collapse1-0-47 cont1_3))) (if (equal? r_1 0) (cont1_8 (_sim-binding-car (_sim-get-psds-value r_0))) (begin (_sim-pcall-test-output! (quote lookup-env)) (_sim-check-legality-and-process-primop (quote (- 68)) (list r_1 1) (lambda (value_9) (proc-e-memo-0-62 (_sim-binding-cdr (_sim-get-psds-value r_0)) value_9 (collapse1-0-47 cont1_8)))))))))) (define (proc-e-4-57 arg-values_0 activation_1 free-var-values_2 c_3) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_4) (c_3 value/rexp_4)))) (define (proc-e-4-53 arg-values_0 activation_1 free-var-values_2 c_3) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_4) (c_3 value/rexp_4)))) (define (collapse1-0-47 cont_0) (lambda (a_1) (cont_0 a_1))) (define (project-value/rexp-0-25 v_0 formal_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let* ((index_7 (_sim-get-closure-index v_0)) (values_8 (_sim-get-closure-values v_0)) (x_9 (_sim-lookup-cache-cl index_7 values_8 found-in-cache-cont_3 ca_2))) (if (equal? x_9 (quote not-found)) (let ((proj_10 (_sim-get-closure-projection v_0))) (proj_10 index_7 values_8 proj_10 (_sim-get-closure-activation v_0) formal_1 found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 ca_2 (lambda (new-v_11 p_12 rf*_13 ra*_14 pos_15 ca_16) (found-in-cache-cont_6 new-v_11 p_12 rf*_13 ra*_14 pos_15 ca_16)))) (found-in-cache-cont_6 (caar x_9) (cadar x_9) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_9))))) (define (collapse1-0-5) (lambda (a_0) a_0)) (_sim-initialize-magic! (quote ((string-append **similix-library** "scheme.adt") (string-append **similix-library** "spec.adt")))) (let* ((g_2 (list-ref value*_0 0)) (g_3 (_sim-generate-var-name! (quote g))) (g_4 (list-ref value*_0 2)) (g_5 (_sim-generate-var-name! (quote g)))) (project-value/rexp-2-96 (quote (residual-goal . 3)) g_5 (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let ((p*_15 (list g_4 b_8))) (project-value/rexp-2-96 (quote (value* . 1)) g_3 f_12 (+ 1 (+ 1 e_11)) d_10 c_9 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (+ 1 e_21) (let* ((residual-name_seenb4_25 (_sim-generate-proc-name! (quote _sim-goal) (cons (cons g_2 (cons b_18 p*_15)) (_sim-pos-pairs-in-cache f_22)))) (residual-name_26 (car residual-name_seenb4_25))) (and (not (cdr residual-name_seenb4_25)) (let ((g_62 (let ((g_27 (_sim-build-cst g_2))) (_sim-pcall-test-output! (quote _sim-specialize)) (let* ((cont1_28 (collapse1-0-5)) (residual-formal_29 (_sim-generate-var-name! (quote value*))) (g_30 (_sim-build-var residual-formal_29)) (g_60 (_sim-check-legality-and-process-primop (quote (car 5)) (list (_sim-lookup-goal-procedure (_sim-fetch-pgm-udp g_4))) (lambda (value_33) (_sim-check-legality-and-process-primop (quote (cdr 6)) (list (_sim-lookup-goal-procedure (_sim-fetch-pgm-udp g_4))) (lambda (value_34) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-def-btp value_33)) (lambda (value_36) (let* ((residual-formal_38 (_sim-generate-var-name! (quote adt))) (g_39 (_sim-build-var residual-formal_38))) (_sim-pcall-test-output! (quote specialize-pcall)) (let* ((g_58 (let ((value_40 (_sim-make-pseudo-call value_34 value_36))) (_sim-pcall-test-output! (quote make-pseudo-environment)) (let ((cont1_53 (lambda (a_41) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-85 (lambda (a_42) (proc-e-memo-0-18 (_sim-fetch-pgm-udp g_4) a_42 a_41 value_40 value_33 (lambda (a_43) (let* ((rexp_44 (_sim-build-primop-l (quote _sim-get-residual-program!))) (residual-formal_45 (_sim-generate-var-name! (quote g))) (g_47 (cont1_28 (_sim-build-primop-l (quote _sim-postprocess!) g_39 (_sim-select-value rexp_44 residual-formal_45) g_27 a_7 g_30))) (g_48 (_sim-conditional-build-let residual-formal_45 (quote imp) rexp_44 g_47))) (_sim-build-begin a_43 g_48))))))))) (_sim-check-legality-and-process-primop (quote (length 38)) (list (_sim-fetch-def-btp value_33)) (lambda (value_54) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-484 g_30 (_sim-fetch-def-btp value_33) value_54 0 (collapse1-0-47 cont1_53))))))) (g_59 (_sim-build-begin (_sim-build-primop-l (quote _sim-initialize-magic!) g_39) g_58))) (_sim-build-let residual-formal_38 (quote fun) (_sim-build-cst (_sim-fetch-pgm-adt-file* g_4)) g_59))))))))))) (_sim-build-let residual-formal_29 (quote fun) a_17 g_60))))) (_sim-add-residual-definition! (_sim-build-def residual-name_26 c_19 g_62)))) (_sim-build-pcall residual-name_26 d_20))))))) (let ((g_65 (_sim-get-residual-program!))) (_sim-postprocess! (quote ((string-append **similix-library** "scheme.adt") (string-append **similix-library** "spec.adt"))) g_65 (quote _sim-specialize) residual-goal_1 value*_0))))

