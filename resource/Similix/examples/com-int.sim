; Similix Lazy combinator interpreter
; Copyright (C) 1993 Anders Bondorf
; Please see the file README for copyright notice, license and disclaimer.


;-----------------------------------------------------------------------------
; P - Program
; D - Definition
; E - Expression
; C - Constant
; V - Variable
; F - FuncName
; B - Binop

; P ::= D*
; D ::= (F V* = E)
; E ::= C | V | F | (B E1 E2) | (if E1 E2 E3) | (E1 E2)

; Parsed form:
; P ::= (D*)
; D ::= (F (V*) E)
; E ::= (cst C) | (var V) | (fct F) | (binop B E1 E2)
;     | (if E1 E2 E3) | (apply E1 E2)

;------------------------------------------------------------------------------

(loadt "com-int.adt")
(loadt "thunk.adt")

;------------------------------------------------------------------------------
; Values are delayed for two resons:
; (1) Environment updating is done by strict functions; therefore,
;     the value argument is delayed (and then forced at lookup-time).
; (2) The interpreted language is lazy so arguments to applications
;     are delayed.

(define (init-fenv)
  (lambda (name)
    (err 'init-fenv "Unbound function: ~s" name)))
(define (upd-fenv name value r)
  (lambda (name1)
    (if (equal? name name1)
	(value) ; force value
	(r name1))))

(define (init-venv)
  (lambda (name)
    (err 'init-venv "Unbound variable: ~s" name)))
(define (upd-venv name value r)
  (lambda (name1)
    (if (equal? name name1)
	(value) ; force value
	(r name1))))

;------------------------------------------------------------------------------

(define (_P P F v) (((fix (lambda (phi) (_D* P phi))) F) (lambda () v)))

(define (_D* D* phi)
  (casematch D*
    (()
     (init-fenv))
    (((F V* E) . D*)
     (upd-fenv F
	       (lambda () (_V* V* E (init-venv) phi)) ; delay value
	       (_D* D* phi)))
    (else
     (err '_D* "Illegal program syntax: ~s" D*))))

(define (_V* V* E r phi)
  (casematch V*
    (()
     (_E E r phi))
    ((V . V*)
     (lambda (s) (_V* V* E (upd-venv V (lambda () s) r) phi))) ; delay value
    (else
     (err '_V* "Illegal parameter syntax: ~s" V*))))

(define (_E E r phi)
  (casematch E
   (('cst C)
    C)
   (('var V)
    ((r V))) ; force value
   (('fct F)
    (phi F))
   (('binop B E1 E2)
    (ext B (_E E1 r phi) (_E E2 r phi)))
   (('if E1 E2 E3)
    (if (_E E1 r phi)
	(_E E2 r phi)
	(_E E3 r phi)))
   (('apply E1 E2)
    ((_E E1 r phi)
     (casematch E2
       (('cst C) (lambda () C))
       (('var V) (r V))
       ;;(('fct F) (lambda () (phi F)))
       (else
	(save (lambda () (_E E2 r phi))))))) ; delay value
   (else
    (err '_E "Illegal expression syntax: ~s" E))))

(define (fix f) (lambda (x) ((f (fix f)) x)))

;-----------------------------------------------------------------------------
