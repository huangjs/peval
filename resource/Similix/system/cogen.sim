(loadt (string-append **similix-library** "spec.adt"))

(define (_sim-cogen value*_0 residual-goal_1) (define (proc-e-memo-0-348 r_0 r_1 r_2 r_3 c_4) (let* ((residual-formal_5 (_sim-generate-var-name! (quote value*))) (g_6 (_sim-build-var residual-formal_5)) (cont1_7 (collapse1-0-32 c_4)) (g_23 (if (= r_3 r_2) (begin (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-248 (collapse1-0-32 cont1_7))) (begin (_sim-pcall-test-output! (quote upd-env)) (let ((cont1_20 (lambda (a_11) (let* ((residual-formal_12 (_sim-generate-var-name! (quote g))) (value/rexp_13 (_sim-select-value a_11 residual-formal_12))) (_sim-pcall-test-output! (quote loop)) (let ((g_19 (proc-e-memo-0-348 g_6 r_1 r_2 (+ 1 r_3) (lambda (a_15) (proc-e-memo-0-90 a_15 value/rexp_13 (collapse1-0-32 cont1_7)))))) (_sim-conditional-build-let residual-formal_12 (quote imp) a_11 g_19)))))) (if (_sim-bt-dynamic? (list-ref r_1 r_3)) (cont1_20 (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (quote g)))) (cont1_20 (_sim-build-primop-l (quote list-ref) g_6 (_sim-build-cst r_3))))))))) (_sim-build-let residual-formal_5 (quote fun) r_0 g_23))) (define (proc-e-memo-0-10 r_0 r_1 r_2 r_3 r_4 c_5) (let ((g_7 (_sim-fetch-pcall-args r_3))) (_sim-pcall-test-output! (quote loop)) (let ((g_151 (_sim-make-closure 46 (list r_3 r_4 r_0 r_1) (lambda (index_10 values_11 proj_12 act_13 formal_14 rf*_15 ra*_16 pos_17 ca_18 c_19) (let* ((v_20 (list-ref values_11 0)) (v_22 (list-ref values_11 1)) (v_24 (list-ref values_11 2))) (project-value/rexp-0-13 (list-ref values_11 3) formal_14 ca_18 (+ 1 (+ 1 (+ 1 (+ 1 pos_17)))) ra*_16 rf*_15 (lambda (a_28 b_29 c_30 d_31 e_32 f_33) (let* ((new-v_34 (_sim-make-closure index_10 (list v_20 v_22 v_24 a_28) proj_12 act_13)) (p_35 (list index_10 v_20 v_22 v_24 b_29))) (c_19 new-v_34 p_35 c_30 d_31 e_32 (_sim-upd-cache-cl index_10 values_11 new-v_34 p_35 e_32 f_33))))))) (lambda (free-var-values_37 arg-values_38 c_39) (let* ((g_41 (list-ref free-var-values_37 2)) (g_42 (list-ref free-var-values_37 1)) (g_43 (list-ref free-var-values_37 0)) (g_44 (list-ref arg-values_38 5)) (g_45 (list-ref arg-values_38 4)) (g_46 (list-ref arg-values_38 3)) (g_47 (list-ref arg-values_38 2)) (g_48 (list-ref arg-values_38 1)) (g_49 (list-ref arg-values_38 0))) (project-value/rexp-0-13 (list-ref free-var-values_37 3) (quote (c . 147)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_51 b_52 c_53 d_54 e_55 f_56) (let ((p*_63 (list g_43 g_42 g_41 b_52))) (project-value/rexp-1-49 g_44 (quote (r1 . 176)) f_56 (+ 1 (+ 1 (+ 1 (+ 1 e_55)))) d_54 c_53 (lambda (a_65 b_66 c_67 d_68 e_69 f_70) (let ((p*_71 (cons b_66 p*_63))) (project-value/rexp-2-68 (quote (ca . 175)) g_45 f_70 (+ 1 e_69) d_68 c_67 (lambda (a_73 b_74 c_75 d_76 e_77 f_78) (let ((p*_79 (cons b_74 p*_71))) (project-value/rexp-2-68 (quote (pos . 174)) g_46 f_78 (+ 1 e_77) d_76 c_75 (lambda (a_81 b_82 c_83 d_84 e_85 f_86) (let ((p*_87 (cons b_82 p*_79))) (project-value/rexp-2-68 (quote (ra* . 173)) g_47 f_86 (+ 1 e_85) d_84 c_83 (lambda (a_89 b_90 c_91 d_92 e_93 f_94) (let ((p*_95 (cons b_90 p*_87))) (project-value/rexp-2-68 (quote (rf* . 172)) g_48 f_94 (+ 1 e_93) d_92 c_91 (lambda (a_97 b_98 c_99 d_100 e_101 f_102) (let ((p*_103 (cons b_98 p*_95))) (project-value/rexp-2-68 (quote (p* . 171)) g_49 f_102 (+ 1 e_101) d_100 c_99 (lambda (a_105 b_106 c_107 d_108 e_109 f_110) (let* ((residual-name_seenb4_111 (_sim-generate-proc-name! (quote specialize-pcall-0) (cons (cons b_106 p*_103) (_sim-pos-pairs-in-cache f_110)))) (residual-name_112 (car residual-name_seenb4_111))) (and (not (cdr residual-name_seenb4_111)) (let ((g_142 (let* ((residual-formal_113 (_sim-generate-var-name! (quote rf*))) (g_114 (_sim-build-var residual-formal_113)) (residual-formal_115 (_sim-generate-var-name! (quote pos)))) (_sim-build-var residual-formal_115) (let* ((residual-formal_120 (_sim-generate-var-name! (quote residual-name_seenb4))) (g_121 (_sim-build-var residual-formal_120)) (residual-formal_122 (_sim-generate-var-name! (quote residual-name))) (g_123 (_sim-build-var residual-formal_122))) (_sim-pcall-test-output! (quote proc-e-memo)) (let ((value/rexp_125 (_sim-fetch-def-exp g_42))) (_sim-pcall-test-output! (quote id-c)) (let* ((g_132 (proc-e-memo-0-58 (lambda (a_126) (proc-e-memo-0-26 g_41 a_126 a_65 value/rexp_125 (lambda (a_127) (_sim-build-primop-l (quote _sim-add-residual-definition!) (_sim-build-primop-l (quote _sim-build-def) g_123 g_114 a_127))))))) (rexp-else_133 (_sim-build-cst #f)) (g_137 (proc-e-3-75 (list (_sim-build-primop-l (quote _sim-build-pcall) g_123 a_89)) (_sim-get-closure-activation a_51) (_sim-get-closure-values a_51))) (g_138 (_sim-build-begin (_sim-build-cond (_sim-build-primop-l (quote not) (_sim-build-primop-l (quote cdr) g_121)) g_132 rexp-else_133) g_137)) (g_139 (_sim-build-let residual-formal_122 (quote fun) (_sim-build-primop-l (quote car) g_121) g_138)) (g_140 (_sim-build-let residual-formal_120 (quote imp) (_sim-build-primop-l (quote _sim-generate-proc-name!) (_sim-build-cst (_sim-fetch-pcall-name g_43)) (_sim-build-primop-l (quote cons) a_105 (_sim-build-primop-l (quote _sim-pos-pairs-in-cache) a_73))) g_139)) (g_141 (_sim-build-let residual-formal_115 (quote fun) a_81 g_140))) (_sim-build-let residual-formal_113 (quote fun) a_97 g_141))))))) (_sim-add-residual-definition! (_sim-build-def residual-name_112 c_107 g_142)))) (c_39 (_sim-build-pcall residual-name_112 d_108)))))))))))))))))))))))))))) (proc-e-memo-0-326 r_0 r_2 g_7 (_sim-fetch-def-pars r_4) (_sim-fetch-def-btp r_4) (length g_7) g_151 0 (collapse1-0-32 c_5))))) (define (proc-e-memo-0-326 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (let ((cont1_9 (collapse1-0-32 c_8))) (if (= r_7 r_5) (let* ((free-var-values_10 (_sim-get-closure-values r_6)) (activation_11 (_sim-get-closure-activation r_6)) (value/rexp_12 (_sim-build-cst (quote ()))) (value/rexp_13 (_sim-build-cst (quote ()))) (value/rexp_14 (_sim-build-cst (quote ()))) (value/rexp_15 (_sim-build-cst 0)) (value/rexp_16 (_sim-build-cst (_sim-init-cache)))) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-248 (lambda (a_17) (proc-e-3-39 (list value/rexp_12 value/rexp_13 value/rexp_14 value/rexp_15 value/rexp_16 a_17) activation_11 free-var-values_10 cont1_9)))) (let ((residual-formal_21 (_sim-generate-var-name! (quote formal)))) (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_41 (_sim-make-closure 42 (quote ()) (lambda (index_24 values_25 proj_26 act_27 formal_28 rf*_29 ra*_30 pos_31 ca_32 c_33) (let* ((new-v_34 (_sim-make-closure index_24 (quote ()) proj_26 act_27)) (p_35 (list index_24))) (c_33 new-v_34 p_35 rf*_29 ra*_30 pos_31 (_sim-upd-cache-cl index_24 values_25 new-v_34 p_35 pos_31 ca_32)))) (lambda (free-var-values_36 arg-values_37 c_38) (c_38 (_sim-isimperative? (list-ref arg-values_37 0)))))) (g_234 (_sim-make-closure 45 (list r_7 (_sim-build-var residual-formal_21) (list-ref r_4 r_7) r_6 r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_42 values_43 proj_44 act_45 formal_46 rf*_47 ra*_48 pos_49 ca_50 c_51) (let ((v_52 (list-ref values_43 0))) (project-value/rexp-2-68 formal_46 (list-ref values_43 1) ca_50 (+ 1 (+ 1 pos_49)) ra*_48 rf*_47 (lambda (a_56 b_57 c_58 d_59 e_60 f_61) (let ((v_62 (list-ref values_43 2))) (project-value/rexp-0-13 (list-ref values_43 3) formal_46 f_61 (+ 1 (+ 1 e_60)) d_59 c_58 (lambda (a_66 b_67 c_68 d_69 e_70 f_71) (let* ((v_72 (list-ref values_43 4)) (v_74 (list-ref values_43 5)) (v_76 (list-ref values_43 6)) (v_78 (list-ref values_43 7))) (project-value/rexp-1-49 (list-ref values_43 8) formal_46 f_71 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 e_70))))) d_69 c_68 (lambda (a_82 b_83 c_84 d_85 e_86 f_87) (let* ((v_88 (list-ref values_43 9)) (pos_89 (+ 1 e_86)) (new-v_90 (_sim-make-closure index_42 (list v_52 a_56 v_62 a_66 v_72 v_74 v_76 v_78 a_82 v_88) proj_44 act_45)) (p_91 (list index_42 v_52 b_57 v_62 b_67 v_72 v_74 v_76 v_78 b_83 v_88))) (c_51 new-v_90 p_91 c_84 d_85 pos_89 (_sim-upd-cache-cl index_42 values_43 new-v_90 p_91 pos_89 f_87))))))))))))) (lambda (free-var-values_95 arg-values_96 c_97) (let ((residual-formal_109 (_sim-generate-var-name! (quote value/rexp)))) (_sim-pcall-test-output! (quote loop)) (let* ((g_230 (_sim-make-closure 44 (list (list-ref free-var-values_95 1) (_sim-build-var residual-formal_109) (list-ref free-var-values_95 2) (list-ref free-var-values_95 3)) (lambda (index_112 values_113 proj_114 act_115 formal_116 rf*_117 ra*_118 pos_119 ca_120 c_121) (project-value/rexp-2-68 formal_116 (list-ref values_113 0) ca_120 (+ 1 pos_119) ra*_118 rf*_117 (lambda (a_124 b_125 c_126 d_127 e_128 f_129) (project-value/rexp-2-68 formal_116 (list-ref values_113 1) f_129 (+ 1 e_128) d_127 c_126 (lambda (a_132 b_133 c_134 d_135 e_136 f_137) (let ((v_138 (list-ref values_113 2))) (project-value/rexp-0-13 (list-ref values_113 3) formal_116 f_137 (+ 1 (+ 1 e_136)) d_135 c_134 (lambda (a_142 b_143 c_144 d_145 e_146 f_147) (let* ((new-v_148 (_sim-make-closure index_112 (list a_124 a_132 v_138 a_142) proj_114 act_115)) (p_149 (list index_112 b_125 b_133 v_138 b_143))) (c_121 new-v_148 p_149 c_144 d_145 e_146 (_sim-upd-cache-cl index_112 values_113 new-v_148 p_149 e_146 f_147))))))))))) (lambda (free-var-values_153 arg-values_154 c_155) (let ((residual-formal_166 (_sim-generate-var-name! (quote p*)))) (_sim-pcall-test-output! (quote project-value/rexp)) (let* ((g_226 (_sim-make-closure 43 (list (list-ref free-var-values_153 3) (_sim-build-var residual-formal_166) (list-ref arg-values_154 5)) (lambda (index_168 values_169 proj_170 act_171 formal_172 rf*_173 ra*_174 pos_175 ca_176 c_177) (project-value/rexp-0-13 (list-ref values_169 0) formal_172 ca_176 (+ 1 pos_175) ra*_174 rf*_173 (lambda (a_180 b_181 c_182 d_183 e_184 f_185) (project-value/rexp-2-68 formal_172 (list-ref values_169 1) f_185 (+ 1 e_184) d_183 c_182 (lambda (a_188 b_189 c_190 d_191 e_192 f_193) (project-value/rexp-1-49 (list-ref values_169 2) formal_172 f_193 (+ 1 e_192) d_191 c_190 (lambda (a_196 b_197 c_198 d_199 e_200 f_201) (let* ((new-v_202 (_sim-make-closure index_168 (list a_180 a_188 a_196) proj_170 act_171)) (p_203 (list index_168 b_181 b_189 b_197))) (c_177 new-v_202 p_203 c_198 d_199 e_200 (_sim-upd-cache-cl index_168 values_169 new-v_202 p_203 e_200 f_201)))))))))) (lambda (free-var-values_207 arg-values_208 c_209) (let* ((g_212 (list-ref free-var-values_207 0)) (g_213 (list-ref arg-values_208 5)) (g_214 (list-ref arg-values_208 4)) (g_215 (list-ref arg-values_208 3)) (g_216 (list-ref arg-values_208 2)) (free-var-values_219 (_sim-get-closure-values g_212)) (activation_220 (_sim-get-closure-activation g_212)) (value/rexp_221 (_sim-build-primop-l (quote cons) (list-ref arg-values_208 1) (list-ref free-var-values_207 1)))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-90 (list-ref free-var-values_207 2) (list-ref arg-values_208 0) (lambda (a_222) (proc-e-3-37 (list value/rexp_221 g_216 g_215 g_214 g_213 a_222) activation_220 free-var-values_219 c_209))))))) (g_228 (proc-e-memo-0-175 g_226 (list-ref arg-values_154 4) (list-ref arg-values_154 3) (list-ref arg-values_154 2) (list-ref arg-values_154 1) (list-ref free-var-values_153 2) (list-ref free-var-values_153 1) (list-ref free-var-values_153 0) (collapse1-0-52 c_155)))) (_sim-build-let residual-formal_166 (quote fun) (list-ref arg-values_154 0) g_228)))))) (g_232 (proc-e-memo-0-326 (list-ref free-var-values_95 9) (list-ref free-var-values_95 8) (list-ref free-var-values_95 7) (list-ref free-var-values_95 6) (list-ref free-var-values_95 5) (list-ref free-var-values_95 4) g_230 (+ 1 (list-ref free-var-values_95 0)) (collapse1-0-52 c_97)))) (_sim-build-let residual-formal_109 (quote fun) (list-ref arg-values_96 0) g_232)))))) (g_236 (proc-e-memo-0-124 r_0 g_234 g_41 r_1 (list-ref r_2 r_7) (collapse1-0-32 cont1_9)))) (_sim-build-let residual-formal_21 (quote fun) (_sim-build-cst (list-ref r_3 r_7)) g_236)))))) (define (proc-e-memo-0-26 r_0 r_1 r_2 r_3 c_4) (let ((p*_6 (list r_0))) (project-value/rexp-0-13 r_1 (quote (c . 14)) (quote (() () () ())) 2 (quote ()) (quote ()) (lambda (a_8 b_9 c_10 d_11 e_12 f_13) (let ((p*_14 (cons b_9 p*_6))) (project-value/rexp-1-49 r_2 (quote (r . 13)) f_13 (+ 1 e_12) d_11 c_10 (lambda (a_16 b_17 c_18 d_19 e_20 f_21) (+ 1 e_20) (let* ((residual-name_seenb4_24 (_sim-generate-proc-name! (quote proc-e-memo-0) (cons (cons r_3 (cons b_17 p*_14)) (_sim-pos-pairs-in-cache f_21)))) (residual-name_25 (car residual-name_seenb4_24))) (and (not (cdr residual-name_seenb4_24)) (let ((g_28 (begin (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-31 r_0 a_8 a_16 r_3 (collapse1-0-5))))) (_sim-add-residual-definition! (_sim-build-def residual-name_25 c_18 g_28)))) (let* ((rexp_29 (_sim-build-pcall residual-name_25 d_19)) (residual-formal_30 (_sim-generate-var-name! (quote g))) (g_32 (c_4 (_sim-build-primop-l (quote _sim-memoize) (_sim-select-value rexp_29 residual-formal_30))))) (_sim-conditional-build-let residual-formal_30 (quote imp) rexp_29 g_32)))))))))) (define (proc-e-memo-0-31 r_0 r_1 r_2 r_3 c_4) (let ((cont1_5 (collapse1-0-32 c_4))) (if (_sim-islift? r_3) (begin (_sim-pcall-test-output! (quote proc-e)) (let ((g_37 (_sim-make-closure 1 (list r_1) (lambda (index_7 values_8 proj_9 act_10 formal_11 rf*_12 ra*_13 pos_14 ca_15 c_16) (project-value/rexp-0-13 (list-ref values_8 0) formal_11 ca_15 (+ 1 pos_14) ra*_13 rf*_12 (lambda (a_19 b_20 c_21 d_22 e_23 f_24) (let* ((new-v_25 (_sim-make-closure index_7 (list a_19) proj_9 act_10)) (p_26 (list index_7 b_20))) (c_16 new-v_25 p_26 c_21 d_22 e_23 (_sim-upd-cache-cl index_7 values_8 new-v_25 p_26 e_23 f_24)))))) (lambda (free-var-values_28 arg-values_29 c_30) (let ((g_31 (list-ref free-var-values_28 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-cst) (list-ref arg-values_29 0))) (_sim-get-closure-activation g_31) (_sim-get-closure-values g_31) c_30)))))) (proc-e-memo-0-31 r_0 g_37 r_2 (_sim-fetch-lift-arg r_3) (collapse1-0-32 cont1_5)))) (let ((cont1_40 (collapse1-0-32 cont1_5))) (if (_sim-iscst? r_3) (proc-e-3-39 (list (_sim-build-cst (_sim-fetch-cst-value r_3))) (_sim-get-closure-activation r_1) (_sim-get-closure-values r_1) cont1_40) (let ((cont1_44 (collapse1-0-32 cont1_40))) (if (_sim-isvar? r_3) (let* ((free-var-values_45 (_sim-get-closure-values r_1)) (activation_46 (_sim-get-closure-activation r_1))) (_sim-pcall-test-output! (quote lookup-env)) (proc-e-memo-0-42 r_2 (_sim-fetch-var-debruijn r_3) (lambda (a_48) (proc-e-3-39 (list a_48) activation_46 free-var-values_45 cont1_44)))) (let ((cont1_51 (collapse1-0-32 cont1_44))) (if (_sim-iscond? r_3) (let ((g_52 (_sim-fetch-cond-test r_3))) (_sim-pcall-test-output! (quote proc-e)) (let ((g_181 (_sim-make-closure 2 (list r_1 g_52 (_sim-fetch-cond-then r_3) (_sim-fetch-cond-else r_3) r_2 r_0) (lambda (index_55 values_56 proj_57 act_58 formal_59 rf*_60 ra*_61 pos_62 ca_63 c_64) (project-value/rexp-0-13 (list-ref values_56 0) formal_59 ca_63 (+ 1 pos_62) ra*_61 rf*_60 (lambda (a_67 b_68 c_69 d_70 e_71 f_72) (let* ((v_73 (list-ref values_56 1)) (v_75 (list-ref values_56 2)) (v_77 (list-ref values_56 3))) (project-value/rexp-1-49 (list-ref values_56 4) formal_59 f_72 (+ 1 (+ 1 (+ 1 (+ 1 e_71)))) d_70 c_69 (lambda (a_81 b_82 c_83 d_84 e_85 f_86) (let* ((v_87 (list-ref values_56 5)) (pos_88 (+ 1 e_85)) (new-v_89 (_sim-make-closure index_55 (list a_67 v_73 v_75 v_77 a_81 v_87) proj_57 act_58)) (p_90 (list index_55 b_68 v_73 v_75 v_77 b_82 v_87))) (c_64 new-v_89 p_90 c_83 d_84 pos_88 (_sim-upd-cache-cl index_55 values_56 new-v_89 p_90 pos_88 f_86))))))))) (lambda (free-var-values_93 arg-values_94 c_95) (let* ((g_96 (list-ref free-var-values_93 5)) (g_97 (list-ref free-var-values_93 4)) (g_98 (list-ref free-var-values_93 3)) (g_99 (list-ref free-var-values_93 2)) (g_100 (list-ref free-var-values_93 1)) (g_101 (list-ref free-var-values_93 0)) (g_102 (list-ref arg-values_94 0)) (cont1_179 (lambda (a_103) (let ((cont1_104 (collapse1-0-52 c_95))) (if a_103 (begin (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-58 (lambda (a_105) (proc-e-memo-0-31 g_96 a_105 g_97 g_99 (lambda (a_106) (let* ((residual-formal_107 (_sim-generate-var-name! (quote rexp-then))) (g_108 (_sim-build-var residual-formal_107))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote id-c)) (let ((g_120 (proc-e-memo-0-58 (lambda (a_109) (proc-e-memo-0-31 g_96 a_109 g_97 g_98 (lambda (a_110) (let* ((residual-formal_111 (_sim-generate-var-name! (quote rexp-else))) (g_116 (proc-e-3-39 (list (_sim-build-primop-l (quote _sim-build-cond) g_102 g_108 (_sim-build-var residual-formal_111))) (_sim-get-closure-activation g_101) (_sim-get-closure-values g_101) cont1_104))) (_sim-build-let residual-formal_111 (quote imp) a_110 g_116)))))))) (_sim-build-let residual-formal_107 (quote imp) a_106 g_120)))))))) (begin (_sim-pcall-test-output! (quote collapse1)) (proc-e-memo-0-71 g_101 (lambda (a_125) (let ((cont1_126 (collapse1-0-32 cont1_104))) (if (_sim-isstatic? g_100) (let ((p*_128 (list g_96))) (project-value/rexp-0-13 a_125 (quote (c . 25)) (quote (() () () ())) 2 (quote ()) (quote ()) (lambda (a_130 b_131 c_132 d_133 e_134 f_135) (let ((p*_136 (cons b_131 p*_128))) (project-value/rexp-1-49 g_97 (quote (r . 16)) f_135 (+ 1 e_134) d_133 c_132 (lambda (a_138 b_139 c_140 d_141 e_142 f_143) (let ((p*_148 (cons g_99 (cons g_98 (cons b_139 p*_136))))) (project-value/rexp-2-68 (quote (value/rexp . 22)) g_102 f_143 (+ 1 (+ 1 (+ 1 e_142))) d_141 c_140 (lambda (a_150 b_151 c_152 d_153 e_154 f_155) (let* ((residual-name_seenb4_156 (_sim-generate-proc-name! (quote proc-e-0) (cons (cons b_151 p*_148) (_sim-pos-pairs-in-cache f_155)))) (residual-name_157 (car residual-name_seenb4_156))) (and (not (cdr residual-name_seenb4_156)) (let ((g_162 (begin (_sim-pcall-test-output! (quote proc-e)) (let ((g_159 (proc-e-memo-0-31 g_96 a_130 a_138 g_99 (collapse1-0-5)))) (_sim-pcall-test-output! (quote proc-e)) (let ((g_161 (proc-e-memo-0-31 g_96 a_130 a_138 g_98 (collapse1-0-5)))) (_sim-build-cond a_150 g_159 g_161)))))) (_sim-add-residual-definition! (_sim-build-def residual-name_157 c_152 g_162)))) (cont1_126 (_sim-build-pcall residual-name_157 d_153)))))))))))) (begin (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-31 g_96 a_125 g_97 g_99 (lambda (a_166) (let* ((residual-formal_167 (_sim-generate-var-name! (quote g))) (value/rexp_168 (_sim-select-value a_166 residual-formal_167))) (_sim-pcall-test-output! (quote proc-e)) (let ((g_174 (proc-e-memo-0-31 g_96 a_125 g_97 g_98 (lambda (a_169) (let* ((residual-formal_170 (_sim-generate-var-name! (quote g))) (g_172 (cont1_126 (_sim-build-primop-l (quote _sim-build-cond) g_102 value/rexp_168 (_sim-select-value a_169 residual-formal_170))))) (_sim-conditional-build-let residual-formal_170 (quote imp) a_169 g_172)))))) (_sim-conditional-build-let residual-formal_167 (quote imp) a_166 g_174)))))))))))))))) (if (_sim-isdynamic? g_100) (cont1_179 (_sim-isdynamic? g_99)) (cont1_179 #f))))))) (proc-e-memo-0-31 r_0 g_181 r_2 g_52 (collapse1-0-32 cont1_51)))) (let ((cont1_184 (collapse1-0-32 cont1_51))) (if (_sim-islet? r_3) (let* ((g_185 (_sim-fetch-let-formal r_3)) (g_186 (_sim-fetch-let-actual r_3)) (g_187 (_sim-fetch-let-body r_3))) (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_191 (lambda (a_188) (proc-e-memo-0-31 r_0 a_188 r_2 g_186 (collapse1-0-32 cont1_184))))) (if (_sim-islet-unfoldable? r_3) (let ((g_221 (_sim-make-closure 3 (list g_187 r_2 r_1 r_0) (lambda (index_192 values_193 proj_194 act_195 formal_196 rf*_197 ra*_198 pos_199 ca_200 c_201) (let ((v_202 (list-ref values_193 0))) (project-value/rexp-1-49 (list-ref values_193 1) formal_196 ca_200 (+ 1 (+ 1 pos_199)) ra*_198 rf*_197 (collapse6-0-86 values_193 formal_196 v_202 v_202 values_193 index_192 c_201 act_195 proj_194)))) (lambda (free-var-values_207 arg-values_208 c_209) (let* ((g_210 (list-ref free-var-values_207 3)) (g_211 (list-ref free-var-values_207 2)) (g_213 (list-ref free-var-values_207 0))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-90 (list-ref free-var-values_207 1) (list-ref arg-values_208 0) (lambda (a_215) (proc-e-memo-0-31 g_210 g_211 a_215 g_213 (collapse1-0-52 c_209))))))))) (cont1_191 g_221)) (let ((g_285 (_sim-make-closure 4 (list g_185 g_186 g_187 r_2 r_1 r_0) (lambda (index_222 values_223 proj_224 act_225 formal_226 rf*_227 ra*_228 pos_229 ca_230 c_231) (let* ((v_232 (list-ref values_223 0)) (v_234 (list-ref values_223 1)) (v_236 (list-ref values_223 2))) (project-value/rexp-1-49 (list-ref values_223 3) formal_226 ca_230 (+ 1 (+ 1 (+ 1 (+ 1 pos_229)))) ra*_228 rf*_227 (lambda (a_240 b_241 c_242 d_243 e_244 f_245) (project-value/rexp-0-13 (list-ref values_223 4) formal_226 f_245 (+ 1 e_244) d_243 c_242 (lambda (a_248 b_249 c_250 d_251 e_252 f_253) (let* ((v_254 (list-ref values_223 5)) (pos_255 (+ 1 e_252)) (new-v_256 (_sim-make-closure index_222 (list v_232 v_234 v_236 a_240 a_248 v_254) proj_224 act_225)) (p_257 (list index_222 v_232 v_234 v_236 b_241 b_249 v_254))) (c_231 new-v_256 p_257 c_250 d_251 pos_255 (_sim-upd-cache-cl index_222 values_223 new-v_256 p_257 pos_255 f_253))))))))) (lambda (free-var-values_260 arg-values_261 c_262) (let* ((g_263 (list-ref free-var-values_260 5)) (g_264 (list-ref free-var-values_260 4)) (g_266 (list-ref free-var-values_260 2)) (g_269 (list-ref arg-values_261 0)) (residual-formal_271 (_sim-generate-var-name! (quote residual-formal))) (g_272 (_sim-build-var residual-formal_271)) (value/rexp_273 (_sim-build-cst (_sim-fetch-eod-tag (list-ref free-var-values_260 1))))) (_sim-pcall-test-output! (quote proc-e)) (_sim-pcall-test-output! (quote upd-env)) (let ((g_283 (proc-e-memo-0-90 (list-ref free-var-values_260 3) (_sim-build-primop-l (quote _sim-build-var) g_272) (lambda (a_275) (proc-e-memo-0-31 g_263 g_264 a_275 g_266 (lambda (a_276) (let* ((residual-formal_277 (_sim-generate-var-name! (quote g))) (g_279 (c_262 (_sim-build-primop-l (quote _sim-build-let) g_272 value/rexp_273 g_269 (_sim-select-value a_276 residual-formal_277))))) (_sim-conditional-build-let residual-formal_277 (quote imp) a_276 g_279)))))))) (_sim-build-let residual-formal_271 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (_sim-varname->name (list-ref free-var-values_260 0)))) g_283))))))) (cont1_191 g_285))))) (let ((cont1_286 (collapse1-0-32 cont1_184))) (if (_sim-isbegin? r_3) (let ((g_287 (_sim-fetch-begin-snd r_3))) (_sim-pcall-test-output! (quote proc-e)) (let* ((value/rexp_288 (_sim-fetch-begin-fst r_3)) (cont1_292 (lambda (a_289) (proc-e-memo-0-31 r_0 a_289 r_2 value/rexp_288 (collapse1-0-32 cont1_286))))) (if (_sim-isbegin-unfoldable? r_3) (let ((g_321 (_sim-make-closure 5 (list g_287 r_2 r_1 r_0) (lambda (index_293 values_294 proj_295 act_296 formal_297 rf*_298 ra*_299 pos_300 ca_301 c_302) (let ((v_303 (list-ref values_294 0))) (project-value/rexp-1-49 (list-ref values_294 1) formal_297 ca_301 (+ 1 (+ 1 pos_300)) ra*_299 rf*_298 (collapse6-0-86 values_294 formal_297 v_303 v_303 values_294 index_293 c_302 act_296 proj_295)))) (lambda (free-var-values_308 arg-values_309 c_310) (let ((residual-formal_316 (_sim-generate-var-name! (quote value/rexp)))) (_sim-build-var residual-formal_316) (_sim-pcall-test-output! (quote proc-e)) (let ((g_319 (proc-e-memo-0-31 (list-ref free-var-values_308 3) (list-ref free-var-values_308 2) (list-ref free-var-values_308 1) (list-ref free-var-values_308 0) (collapse1-0-52 c_310)))) (_sim-build-let residual-formal_316 (quote fun) (list-ref arg-values_309 0) g_319))))))) (cont1_292 g_321)) (let ((g_352 (_sim-make-closure 6 (list g_287 r_2 r_1 r_0) (lambda (index_322 values_323 proj_324 act_325 formal_326 rf*_327 ra*_328 pos_329 ca_330 c_331) (let ((v_332 (list-ref values_323 0))) (project-value/rexp-1-49 (list-ref values_323 1) formal_326 ca_330 (+ 1 (+ 1 pos_329)) ra*_328 rf*_327 (collapse6-0-86 values_323 formal_326 v_332 v_332 values_323 index_322 c_331 act_325 proj_324)))) (lambda (free-var-values_337 arg-values_338 c_339) (let ((g_344 (list-ref arg-values_338 0))) (_sim-pcall-test-output! (quote proc-e)) (proc-e-memo-0-31 (list-ref free-var-values_337 3) (list-ref free-var-values_337 2) (list-ref free-var-values_337 1) (list-ref free-var-values_337 0) (lambda (a_345) (let* ((residual-formal_346 (_sim-generate-var-name! (quote g))) (g_348 (c_339 (_sim-build-primop-l (quote _sim-build-begin) g_344 (_sim-select-value a_345 residual-formal_346))))) (_sim-conditional-build-let residual-formal_346 (quote imp) a_345 g_348))))))))) (cont1_292 g_352))))) (let ((cont1_353 (collapse1-0-32 cont1_286))) (if (_sim-isprimop? r_3) (let* ((residual-formal_354 (_sim-generate-var-name! (quote name))) (g_355 (_sim-build-var residual-formal_354))) (_sim-pcall-test-output! (quote proc-e*)) (let* ((value/rexp_356 (_sim-fetch-primop-args r_3)) (g_374 (_sim-make-closure 7 (quote ()) (lambda (index_357 values_358 proj_359 act_360 formal_361 rf*_362 ra*_363 pos_364 ca_365 c_366) (let* ((new-v_367 (_sim-make-closure index_357 (quote ()) proj_359 act_360)) (p_368 (list index_357))) (c_366 new-v_367 p_368 rf*_362 ra*_363 pos_364 (_sim-upd-cache-cl index_357 values_358 new-v_367 p_368 pos_364 ca_365)))) (lambda (free-var-values_369 arg-values_370 c_371) (c_371 (_sim-isimperative? (list-ref arg-values_370 0)))))) (cont1_379 (lambda (a_376) (proc-e-memo-0-112 r_0 a_376 g_374 r_2 value/rexp_356 (collapse1-0-32 cont1_353)))) (g_450 (if (member (_sim-fetch-primop-referentiality r_3) (quote (abort abort-eoi))) (let ((g_399 (_sim-make-closure 8 (list g_355) (lambda (index_380 values_381 proj_382 act_383 formal_384 rf*_385 ra*_386 pos_387 ca_388 c_389) (project-value/rexp-2-68 formal_384 (list-ref values_381 0) ca_388 (+ 1 pos_387) ra*_386 rf*_385 (collapse6-0-77 values_381 formal_384 values_381 index_380 c_389 act_383 proj_382))) (lambda (free-var-values_393 arg-values_394 c_395) (c_395 (_sim-build-primop-l (quote _sim-build-primop) (list-ref free-var-values_393 0) (list-ref arg-values_394 0))))))) (cont1_379 g_399)) (let ((cont1_400 (collapse1-0-32 cont1_379))) (if (_sim-isstatic? r_3) (let ((g_425 (_sim-make-closure 9 (list r_1 r_3) (lambda (index_401 values_402 proj_403 act_404 formal_405 rf*_406 ra*_407 pos_408 ca_409 c_410) (project-value/rexp-0-13 (list-ref values_402 0) formal_405 ca_409 (+ 1 pos_408) ra*_407 rf*_406 (collapse6-0-137 values_402 formal_405 values_402 index_401 c_410 act_404 proj_403))) (lambda (free-var-values_414 arg-values_415 c_416) (let ((g_418 (list-ref free-var-values_414 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-delta-reduce) (_sim-build-cst (_sim-fetch-primop-n+i (list-ref free-var-values_414 1))) (list-ref arg-values_415 0))) (_sim-get-closure-activation g_418) (_sim-get-closure-values g_418) c_416)))))) (cont1_400 g_425)) (let ((g_449 (_sim-make-closure 10 (list r_1 g_355) (lambda (index_426 values_427 proj_428 act_429 formal_430 rf*_431 ra*_432 pos_433 ca_434 c_435) (project-value/rexp-0-13 (list-ref values_427 0) formal_430 ca_434 (+ 1 pos_433) ra*_432 rf*_431 (collapse6-0-121 values_427 formal_430 values_427 index_426 c_435 act_429 proj_428))) (lambda (free-var-values_439 arg-values_440 c_441) (let ((g_443 (list-ref free-var-values_439 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-primop) (list-ref free-var-values_439 1) (list-ref arg-values_440 0))) (_sim-get-closure-activation g_443) (_sim-get-closure-values g_443) c_441)))))) (cont1_400 g_449))))))) (_sim-build-let residual-formal_354 (quote fun) (_sim-build-cst (_sim-fetch-primop-name r_3)) g_450))) (let ((cont1_451 (collapse1-0-32 cont1_353))) (if (_sim-iscstr? r_3) (let* ((g_452 (_sim-fetch-cstr-args r_3)) (cont1_453 (collapse1-0-32 cont1_451))) (if (_sim-isdynamic? r_3) (begin (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_471 (_sim-make-closure 11 (quote ()) (lambda (index_454 values_455 proj_456 act_457 formal_458 rf*_459 ra*_460 pos_461 ca_462 c_463) (let* ((new-v_464 (_sim-make-closure index_454 (quote ()) proj_456 act_457)) (p_465 (list index_454))) (c_463 new-v_464 p_465 rf*_459 ra*_460 pos_461 (_sim-upd-cache-cl index_454 values_455 new-v_464 p_465 pos_461 ca_462)))) (lambda (free-var-values_466 arg-values_467 c_468) (c_468 (_sim-isimperative? (list-ref arg-values_467 0)))))) (g_496 (_sim-make-closure 12 (list r_1 r_3) (lambda (index_472 values_473 proj_474 act_475 formal_476 rf*_477 ra*_478 pos_479 ca_480 c_481) (project-value/rexp-0-13 (list-ref values_473 0) formal_476 ca_480 (+ 1 pos_479) ra*_478 rf*_477 (collapse6-0-137 values_473 formal_476 values_473 index_472 c_481 act_475 proj_474))) (lambda (free-var-values_485 arg-values_486 c_487) (let ((g_489 (list-ref free-var-values_485 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-cstr) (_sim-build-cst (_sim-fetch-cstr-name (list-ref free-var-values_485 1))) (list-ref arg-values_486 0))) (_sim-get-closure-activation g_489) (_sim-get-closure-values g_489) c_487)))))) (proc-e-memo-0-112 r_0 g_496 g_471 r_2 g_452 (collapse1-0-32 cont1_453)))) (begin (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_516 (_sim-make-closure 13 (quote ()) (lambda (index_499 values_500 proj_501 act_502 formal_503 rf*_504 ra*_505 pos_506 ca_507 c_508) (let* ((new-v_509 (_sim-make-closure index_499 (quote ()) proj_501 act_502)) (p_510 (list index_499))) (c_508 new-v_509 p_510 rf*_504 ra*_505 pos_506 (_sim-upd-cache-cl index_499 values_500 new-v_509 p_510 pos_506 ca_507)))) (lambda (free-var-values_511 arg-values_512 c_513) (c_513 (_sim-isdynamic? (list-ref arg-values_512 0)))))) (g_686 (_sim-make-closure 16 (list r_1 (_sim-fetch-bt-tag* g_452) r_3) (lambda (index_518 values_519 proj_520 act_521 formal_522 rf*_523 ra*_524 pos_525 ca_526 c_527) (project-value/rexp-0-13 (list-ref values_519 0) formal_522 ca_526 (+ 1 pos_525) ra*_524 rf*_523 (lambda (a_530 b_531 c_532 d_533 e_534 f_535) (let* ((v_536 (list-ref values_519 1)) (v_538 (list-ref values_519 2)) (pos_539 (+ 1 (+ 1 e_534))) (new-v_540 (_sim-make-closure index_518 (list a_530 v_536 v_538) proj_520 act_521)) (p_541 (list index_518 b_531 v_536 v_538))) (c_527 new-v_540 p_541 c_532 d_533 pos_539 (_sim-upd-cache-cl index_518 values_519 new-v_540 p_541 pos_539 f_535)))))) (lambda (free-var-values_543 arg-values_544 c_545) (let* ((g_546 (list-ref free-var-values_543 2)) (g_547 (list-ref free-var-values_543 1)) (g_549 (list-ref arg-values_544 0)) (p*_553 (list g_547 g_546))) (project-value/rexp-0-13 (list-ref free-var-values_543 0) (quote (c . 17)) (quote (() () () ())) 3 (quote ()) (quote ()) (lambda (a_555 b_556 c_557 d_558 e_559 f_560) (let ((p*_561 (cons b_556 p*_553))) (project-value/rexp-2-68 (quote (value/rexp* . 45)) g_549 f_560 (+ 1 e_559) d_558 c_557 (lambda (a_563 b_564 c_565 d_566 e_567 f_568) (let* ((residual-name_seenb4_569 (_sim-generate-proc-name! (quote proc-e-1) (cons (cons b_564 p*_561) (_sim-pos-pairs-in-cache f_568)))) (residual-name_570 (car residual-name_seenb4_569))) (and (not (cdr residual-name_seenb4_569)) (let ((g_682 (let* ((residual-formal_573 (_sim-generate-var-name! (quote proj))) (residual-formal_574 (_sim-generate-var-name! (quote value))) (residual-formal_575 (_sim-generate-var-name! (quote formal))) (residual-formal_576 (_sim-generate-var-name! (quote rf*))) (residual-formal_577 (_sim-generate-var-name! (quote ra*))) (residual-formal_578 (_sim-generate-var-name! (quote pos))) (residual-formal_579 (_sim-generate-var-name! (quote ca))) (residual-formal_580 (_sim-generate-var-name! (quote c))) (residual-formal_589 (_sim-generate-var-name! (quote proj))) (residual-formal_591 (_sim-generate-var-name! (quote value))) (g_592 (_sim-build-var residual-formal_591)) (residual-formal_593 (_sim-generate-var-name! (quote c))) (residual-formal_595 (_sim-generate-var-name! (quote name)))) (_sim-pcall-test-output! (quote project-value/rexp*)) (let* ((g_671 (_sim-make-closure 14 (list (_sim-build-var residual-formal_589) (_sim-build-var residual-formal_595) (_sim-build-var residual-formal_593) g_592) (lambda (index_598 values_599 proj_600 act_601 formal_602 rf*_603 ra*_604 pos_605 ca_606 c_607) (project-value/rexp-2-68 formal_602 (list-ref values_599 0) ca_606 (+ 1 pos_605) ra*_604 rf*_603 (lambda (a_610 b_611 c_612 d_613 e_614 f_615) (project-value/rexp-2-68 formal_602 (list-ref values_599 1) f_615 (+ 1 e_614) d_613 c_612 (lambda (a_618 b_619 c_620 d_621 e_622 f_623) (project-value/rexp-2-68 formal_602 (list-ref values_599 2) f_623 (+ 1 e_622) d_621 c_620 (lambda (a_626 b_627 c_628 d_629 e_630 f_631) (project-value/rexp-2-68 formal_602 (list-ref values_599 3) f_631 (+ 1 e_630) d_629 c_628 (lambda (a_634 b_635 c_636 d_637 e_638 f_639) (let* ((new-v_640 (_sim-make-closure index_598 (list a_610 a_618 a_626 a_634) proj_600 act_601)) (p_641 (list index_598 b_611 b_619 b_627 b_635))) (c_607 new-v_640 p_641 c_636 d_637 e_638 (_sim-upd-cache-cl index_598 values_599 new-v_640 p_641 e_638 f_639)))))))))))) (lambda (free-var-values_646 arg-values_647 c_648) (let* ((g_651 (list-ref free-var-values_646 1)) (residual-formal_659 (_sim-generate-var-name! (quote pos))) (g_660 (_sim-build-var residual-formal_659)) (residual-formal_662 (_sim-generate-var-name! (quote new-v))) (g_663 (_sim-build-var residual-formal_662)) (residual-formal_664 (_sim-generate-var-name! (quote p))) (g_665 (_sim-build-var residual-formal_664)) (g_667 (c_648 (_sim-build-app (list-ref free-var-values_646 2) (list g_663 g_665 (list-ref arg-values_647 2) (list-ref arg-values_647 3) g_660 (_sim-build-primop-l (quote _sim-upd-cache-ps) (list-ref free-var-values_646 3) g_663 g_665 g_660 (list-ref arg-values_647 5)))))) (g_668 (_sim-build-let residual-formal_664 (quote fun) (_sim-build-primop-l (quote cons) g_651 (list-ref arg-values_647 1)) g_667)) (g_669 (_sim-build-let residual-formal_662 (quote fun) (_sim-build-cstr (quote _sim-make-psds) (list (list-ref free-var-values_646 0) (_sim-build-primop-l (quote _sim-make-constr-val) g_651 (list-ref arg-values_647 0)))) g_668))) (_sim-build-let residual-formal_659 (quote fun) (list-ref arg-values_647 4) g_669))))) (g_673 (proc-e-memo-0-162 g_671 (_sim-build-var residual-formal_579) (_sim-build-var residual-formal_578) (_sim-build-var residual-formal_577) (_sim-build-var residual-formal_576) g_547 (_sim-build-primop-l (quote _sim-get-constr-val-args) g_592) (_sim-build-var residual-formal_575) (collapse1-0-5))) (g_674 (_sim-build-let residual-formal_595 (quote fun) (_sim-build-primop-l (quote _sim-get-constr-val-cstr-name) g_592) g_673)) (g_675 (_sim-build-let residual-formal_593 (quote fun) (_sim-build-var residual-formal_580) g_674)) (g_676 (_sim-build-let residual-formal_591 (quote fun) (_sim-build-var residual-formal_574) g_675)) (g_677 (_sim-build-let residual-formal_589 (quote fun) (_sim-build-var residual-formal_573) g_676)) (g_678 (_sim-build-abs (list residual-formal_573 residual-formal_574 residual-formal_575 residual-formal_576 residual-formal_577 residual-formal_578 residual-formal_579 residual-formal_580) g_677))) (proc-e-3-75 (list (_sim-build-cstr (quote _sim-make-psds) (list g_678 (_sim-build-primop-l (quote _sim-cstr-reduce) (_sim-build-cst (_sim-fetch-cstr-n+i g_546)) a_563)))) (_sim-get-closure-activation a_555) (_sim-get-closure-values a_555)))))) (_sim-add-residual-definition! (_sim-build-def residual-name_570 c_565 g_682)))) (c_545 (_sim-build-pcall residual-name_570 d_566))))))))))))) (proc-e-memo-0-112 r_0 g_686 g_516 r_2 g_452 (collapse1-0-32 cont1_453)))))) (let ((cont1_689 (collapse1-0-32 cont1_451))) (if (_sim-issel? r_3) (let ((g_690 (_sim-fetch-sel-arg r_3))) (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_694 (lambda (a_691) (proc-e-memo-0-31 r_0 a_691 r_2 g_690 (collapse1-0-32 cont1_689))))) (if (_sim-isdynamic? g_690) (let ((g_721 (_sim-make-closure 17 (list r_1 r_3) (lambda (index_695 values_696 proj_697 act_698 formal_699 rf*_700 ra*_701 pos_702 ca_703 c_704) (project-value/rexp-0-13 (list-ref values_696 0) formal_699 ca_703 (+ 1 pos_702) ra*_701 rf*_700 (collapse6-0-137 values_696 formal_699 values_696 index_695 c_704 act_698 proj_697))) (lambda (free-var-values_708 arg-values_709 c_710) (let* ((g_711 (list-ref free-var-values_708 1)) (g_712 (list-ref free-var-values_708 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-sel) (_sim-build-cst (_sim-fetch-sel-name g_711)) (_sim-build-cst (_sim-fetch-sel-proj g_711)) (_sim-build-cst (_sim-fetch-sel-cstr g_711)) (list-ref arg-values_709 0))) (_sim-get-closure-activation g_712) (_sim-get-closure-values g_712) c_710)))))) (cont1_694 g_721)) (let ((g_747 (_sim-make-closure 18 (list r_1 r_3) (lambda (index_722 values_723 proj_724 act_725 formal_726 rf*_727 ra*_728 pos_729 ca_730 c_731) (project-value/rexp-0-13 (list-ref values_723 0) formal_726 ca_730 (+ 1 pos_729) ra*_728 rf*_727 (collapse6-0-137 values_723 formal_726 values_723 index_722 c_731 act_725 proj_724))) (lambda (free-var-values_735 arg-values_736 c_737) (let ((g_739 (list-ref free-var-values_735 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-sel-reduce) (_sim-build-cst (_sim-fetch-sel-n+i (list-ref free-var-values_735 1))) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) (list-ref arg-values_736 0)))) (_sim-get-closure-activation g_739) (_sim-get-closure-values g_739) c_737)))))) (cont1_694 g_747))))) (let ((cont1_748 (collapse1-0-32 cont1_689))) (if (_sim-ispred? r_3) (let ((g_749 (_sim-fetch-pred-arg r_3))) (_sim-pcall-test-output! (quote proc-e)) (let ((cont1_753 (lambda (a_750) (proc-e-memo-0-31 r_0 a_750 r_2 g_749 (collapse1-0-32 cont1_748))))) (if (_sim-isdynamic? g_749) (let ((g_779 (_sim-make-closure 19 (list r_1 r_3) (lambda (index_754 values_755 proj_756 act_757 formal_758 rf*_759 ra*_760 pos_761 ca_762 c_763) (project-value/rexp-0-13 (list-ref values_755 0) formal_758 ca_762 (+ 1 pos_761) ra*_760 rf*_759 (collapse6-0-137 values_755 formal_758 values_755 index_754 c_763 act_757 proj_756))) (lambda (free-var-values_767 arg-values_768 c_769) (let* ((g_770 (list-ref free-var-values_767 1)) (g_771 (list-ref free-var-values_767 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-pred) (_sim-build-cst (_sim-fetch-pred-name g_770)) (_sim-build-cst (_sim-fetch-pred-cstr g_770)) (list-ref arg-values_768 0))) (_sim-get-closure-activation g_771) (_sim-get-closure-values g_771) c_769)))))) (cont1_753 g_779)) (let ((g_805 (_sim-make-closure 20 (list r_1 r_3) (lambda (index_780 values_781 proj_782 act_783 formal_784 rf*_785 ra*_786 pos_787 ca_788 c_789) (project-value/rexp-0-13 (list-ref values_781 0) formal_784 ca_788 (+ 1 pos_787) ra*_786 rf*_785 (collapse6-0-137 values_781 formal_784 values_781 index_780 c_789 act_783 proj_782))) (lambda (free-var-values_793 arg-values_794 c_795) (let ((g_797 (list-ref free-var-values_793 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-pred-reduce) (_sim-build-cst (_sim-fetch-pred-n+i (list-ref free-var-values_793 1))) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) (list-ref arg-values_794 0)))) (_sim-get-closure-activation g_797) (_sim-get-closure-values g_797) c_795)))))) (cont1_753 g_805))))) (let ((cont1_806 (collapse1-0-32 cont1_748))) (if (_sim-ispcall? r_3) (let* ((g_807 (_sim-fetch-udp-def r_0 r_3)) (cont1_808 (collapse1-0-32 cont1_806))) (if (_sim-unfoldable-procedure? g_807) (let ((g_809 (_sim-fetch-pcall-args r_3))) (_sim-pcall-test-output! (quote loop)) (let* ((g_851 (_sim-make-closure 24 (list g_807 r_1 r_0) (lambda (index_812 values_813 proj_814 act_815 formal_816 rf*_817 ra*_818 pos_819 ca_820 c_821) (let ((v_822 (list-ref values_813 0))) (project-value/rexp-0-13 (list-ref values_813 1) formal_816 ca_820 (+ 1 (+ 1 pos_819)) ra*_818 rf*_817 (lambda (a_826 b_827 c_828 d_829 e_830 f_831) (let* ((v_832 (list-ref values_813 2)) (pos_833 (+ 1 e_830)) (new-v_834 (_sim-make-closure index_812 (list v_822 a_826 v_832) proj_814 act_815)) (p_835 (list index_812 v_822 b_827 v_832))) (c_821 new-v_834 p_835 c_828 d_829 pos_833 (_sim-upd-cache-cl index_812 values_813 new-v_834 p_835 pos_833 f_831))))))) (lambda (free-var-values_837 arg-values_838 c_839) (let* ((g_840 (list-ref free-var-values_837 2)) (g_843 (list-ref arg-values_838 0))) (_sim-pcall-test-output! (quote proc-e-memo)) (let ((value/rexp_844 (_sim-fetch-def-exp (list-ref free-var-values_837 0)))) (_sim-pcall-test-output! (quote collapse1)) (proc-e-memo-0-71 (list-ref free-var-values_837 1) (lambda (a_845) (proc-e-memo-0-26 g_840 a_845 g_843 value/rexp_844 (collapse1-0-52 c_839))))))))) (g_853 (proc-e-memo-0-245 r_0 r_2 g_809 (length g_809) g_851 0 (collapse1-0-32 cont1_808)))) (_sim-build-begin (_sim-build-primop-l (quote _sim-pcall-test-output!) (_sim-build-cst (_sim-fetch-def-name g_807))) g_853))) (begin (_sim-pcall-test-output! (quote specialize-pcall)) (proc-e-memo-0-10 r_0 r_1 r_2 r_3 g_807 (collapse1-0-32 cont1_808))))) (let ((cont1_856 (collapse1-0-32 cont1_806))) (if (_sim-isabs? r_3) (let* ((g_857 (_sim-fetch-abs-free-variable-debruijns r_3)) (g_858 (length g_857)) (g_859 (_sim-fetch-abs-body r_3)) (free-var-values_860 (_sim-get-closure-values r_1)) (activation_861 (_sim-get-closure-activation r_1)) (cont1_866 (lambda (a_862) (let* ((residual-formal_863 (_sim-generate-var-name! (quote g))) (g_865 (proc-e-3-39 (list (_sim-select-value a_862 residual-formal_863)) activation_861 free-var-values_860 cont1_856))) (_sim-conditional-build-let residual-formal_863 (quote imp) a_862 g_865))))) (if (_sim-isclosure? r_3) (let ((p*_874 (list g_859 r_3 g_858 r_0))) (project-value/rexp-1-49 r_2 (quote (r . 16)) (quote (() () () ())) 5 (quote ()) (quote ()) (lambda (a_876 b_877 c_878 d_879 e_880 f_881) (+ 1 e_880) (let* ((residual-name_seenb4_884 (_sim-generate-proc-name! (quote proc-e-2) (cons (cons g_857 (cons b_877 p*_874)) (_sim-pos-pairs-in-cache f_881)))) (residual-name_885 (car residual-name_seenb4_884))) (and (not (cdr residual-name_seenb4_884)) (let ((g_1058 (let ((value/rexp_886 (_sim-build-cst (_sim-fetch-abs-index r_3)))) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-283 a_876 g_857 g_858 0 (lambda (a_887) (let* ((residual-formal_888 (_sim-generate-var-name! (quote index))) (residual-formal_889 (_sim-generate-var-name! (quote values))) (residual-formal_890 (_sim-generate-var-name! (quote proj))) (residual-formal_891 (_sim-generate-var-name! (quote act))) (residual-formal_892 (_sim-generate-var-name! (quote formal))) (residual-formal_893 (_sim-generate-var-name! (quote rf*))) (residual-formal_894 (_sim-generate-var-name! (quote ra*))) (residual-formal_895 (_sim-generate-var-name! (quote pos))) (residual-formal_896 (_sim-generate-var-name! (quote ca))) (residual-formal_897 (_sim-generate-var-name! (quote c))) (residual-formal_908 (_sim-generate-var-name! (quote index))) (residual-formal_910 (_sim-generate-var-name! (quote values))) (g_911 (_sim-build-var residual-formal_910)) (residual-formal_912 (_sim-generate-var-name! (quote proj))) (residual-formal_914 (_sim-generate-var-name! (quote act))) (residual-formal_916 (_sim-generate-var-name! (quote c)))) (_sim-pcall-test-output! (quote project-value/rexp*)) (let* ((g_1002 (_sim-make-closure 25 (list (_sim-build-var residual-formal_912) (_sim-build-var residual-formal_914) (_sim-build-var residual-formal_916) (_sim-build-var residual-formal_908) g_911) (lambda (index_920 values_921 proj_922 act_923 formal_924 rf*_925 ra*_926 pos_927 ca_928 c_929) (project-value/rexp-2-68 formal_924 (list-ref values_921 0) ca_928 (+ 1 pos_927) ra*_926 rf*_925 (lambda (a_932 b_933 c_934 d_935 e_936 f_937) (project-value/rexp-2-68 formal_924 (list-ref values_921 1) f_937 (+ 1 e_936) d_935 c_934 (lambda (a_940 b_941 c_942 d_943 e_944 f_945) (project-value/rexp-2-68 formal_924 (list-ref values_921 2) f_945 (+ 1 e_944) d_943 c_942 (lambda (a_948 b_949 c_950 d_951 e_952 f_953) (project-value/rexp-2-68 formal_924 (list-ref values_921 3) f_953 (+ 1 e_952) d_951 c_950 (lambda (a_956 b_957 c_958 d_959 e_960 f_961) (project-value/rexp-2-68 formal_924 (list-ref values_921 4) f_961 (+ 1 e_960) d_959 c_958 (lambda (a_964 b_965 c_966 d_967 e_968 f_969) (let* ((new-v_970 (_sim-make-closure index_920 (list a_932 a_940 a_948 a_956 a_964) proj_922 act_923)) (p_971 (list index_920 b_933 b_941 b_949 b_957 b_965))) (c_929 new-v_970 p_971 c_966 d_967 e_968 (_sim-upd-cache-cl index_920 values_921 new-v_970 p_971 e_968 f_969)))))))))))))) (lambda (free-var-values_977 arg-values_978 c_979) (let* ((g_981 (list-ref free-var-values_977 3)) (residual-formal_991 (_sim-generate-var-name! (quote pos))) (g_992 (_sim-build-var residual-formal_991)) (residual-formal_993 (_sim-generate-var-name! (quote new-v))) (g_994 (_sim-build-var residual-formal_993)) (residual-formal_995 (_sim-generate-var-name! (quote p))) (g_996 (_sim-build-var residual-formal_995)) (g_998 (c_979 (_sim-build-app (list-ref free-var-values_977 2) (list g_994 g_996 (list-ref arg-values_978 2) (list-ref arg-values_978 3) g_992 (_sim-build-primop-l (quote _sim-upd-cache-cl) g_981 (list-ref free-var-values_977 4) g_994 g_996 g_992 (list-ref arg-values_978 5)))))) (g_999 (_sim-build-let residual-formal_995 (quote fun) (_sim-build-primop-l (quote cons) g_981 (list-ref arg-values_978 1)) g_998)) (g_1000 (_sim-build-let residual-formal_993 (quote fun) (_sim-build-cstr (quote _sim-make-closure) (list g_981 (list-ref arg-values_978 0) (list-ref free-var-values_977 0) (list-ref free-var-values_977 1))) g_999))) (_sim-build-let residual-formal_991 (quote fun) (list-ref arg-values_978 4) g_1000))))) (g_1004 (proc-e-memo-0-162 g_1002 (_sim-build-var residual-formal_896) (_sim-build-var residual-formal_895) (_sim-build-var residual-formal_894) (_sim-build-var residual-formal_893) (_sim-fetch-bt-tag* (_sim-fetch-abs-free-variables r_3)) g_911 (_sim-build-var residual-formal_892) (collapse1-0-5))) (g_1005 (_sim-build-let residual-formal_916 (quote fun) (_sim-build-var residual-formal_897) g_1004)) (g_1006 (_sim-build-let residual-formal_914 (quote fun) (_sim-build-var residual-formal_891) g_1005)) (g_1007 (_sim-build-let residual-formal_912 (quote fun) (_sim-build-var residual-formal_890) g_1006)) (g_1008 (_sim-build-let residual-formal_910 (quote fun) (_sim-build-var residual-formal_889) g_1007)) (g_1009 (_sim-build-let residual-formal_908 (quote fun) (_sim-build-var residual-formal_888) g_1008)) (g_1010 (_sim-build-abs (list residual-formal_888 residual-formal_889 residual-formal_890 residual-formal_891 residual-formal_892 residual-formal_893 residual-formal_894 residual-formal_895 residual-formal_896 residual-formal_897) g_1009)) (residual-formal_1011 (_sim-generate-var-name! (quote free-var-values))) (residual-formal_1012 (_sim-generate-var-name! (quote arg-values))) (residual-formal_1013 (_sim-generate-var-name! (quote c))) (g_1015 (_sim-build-var residual-formal_1012)) (g_1016 (_sim-build-var residual-formal_1011)) (residual-formal_1017 (_sim-generate-var-name! (quote c))) (g_1018 (_sim-build-var residual-formal_1017))) (_sim-pcall-test-output! (quote proc-e-memo)) (_sim-pcall-test-output! (quote list-to-environment1)) (let ((value/rexp_1020 (length (_sim-fetch-abs-formals r_3)))) (_sim-pcall-test-output! (quote list-to-environment)) (let* ((cont1_1047 (lambda (a_1021) (proc-e-memo-0-277 a_1021 value/rexp_1020 0 g_1015 (lambda (a_1022) (let ((g_1042 (_sim-make-closure 27 (list g_1018) (lambda (index_1023 values_1024 proj_1025 act_1026 formal_1027 rf*_1028 ra*_1029 pos_1030 ca_1031 c_1032) (project-value/rexp-2-68 formal_1027 (list-ref values_1024 0) ca_1031 (+ 1 pos_1030) ra*_1029 rf*_1028 (collapse6-0-77 values_1024 formal_1027 values_1024 index_1023 c_1032 act_1026 proj_1025))) (lambda (free-var-values_1036 arg-values_1037 c_1038) (c_1038 (_sim-build-app (list-ref free-var-values_1036 0) (list (list-ref arg-values_1037 0)))))))) (proc-e-memo-0-26 r_0 g_1042 a_1022 g_859 (collapse1-0-5))))))) (g_1053 (begin (_sim-pcall-test-output! (quote list-to-environment1)) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-248 (lambda (a_1048) (proc-e-memo-0-277 a_1048 g_858 0 g_1016 (collapse1-0-32 cont1_1047)))))) (g_1054 (_sim-build-let residual-formal_1017 (quote fun) (_sim-build-var residual-formal_1013) g_1053)) (g_1055 (_sim-build-abs (list residual-formal_1011 residual-formal_1012 residual-formal_1013) g_1054))) (_sim-build-cstr (quote _sim-make-closure) (list value/rexp_886 a_887 g_1010 g_1055))))))))))) (_sim-add-residual-definition! (_sim-build-def residual-name_885 c_878 g_1058)))) (cont1_866 (_sim-build-pcall residual-name_885 d_879)))))) (let* ((g_1060 (_sim-fetch-abs-formals r_3)) (g_1061 (length g_1060))) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-297 r_2 g_857 g_858 0 (lambda (a_1062) (_sim-pcall-test-output! (quote loop)) (let ((g_1097 (_sim-make-closure 30 (list r_3 r_0) (lambda (index_1063 values_1064 proj_1065 act_1066 formal_1067 rf*_1068 ra*_1069 pos_1070 ca_1071 c_1072) (let* ((v_1073 (list-ref values_1064 0)) (v_1075 (list-ref values_1064 1)) (pos_1076 (+ 1 (+ 1 pos_1070))) (new-v_1077 (_sim-make-closure index_1063 (list v_1073 v_1075) proj_1065 act_1066)) (p_1078 (list index_1063 v_1073 v_1075))) (c_1072 new-v_1077 p_1078 rf*_1068 ra*_1069 pos_1076 (_sim-upd-cache-cl index_1063 values_1064 new-v_1077 p_1078 pos_1076 ca_1071)))) (lambda (free-var-values_1079 arg-values_1080 c_1081) (let* ((g_1082 (list-ref free-var-values_1079 1)) (g_1084 (list-ref arg-values_1080 1)) (g_1085 (list-ref arg-values_1080 0))) (_sim-pcall-test-output! (quote proc-e)) (let ((value/rexp_1086 (_sim-fetch-abs-body (list-ref free-var-values_1079 0)))) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-58 (lambda (a_1087) (proc-e-memo-0-31 g_1082 a_1087 g_1085 value/rexp_1086 (lambda (a_1088) (let* ((residual-formal_1089 (_sim-generate-var-name! (quote g))) (g_1091 (c_1081 (_sim-build-primop-l (quote _sim-build-abs) g_1084 (_sim-select-value a_1088 residual-formal_1089))))) (_sim-conditional-build-let residual-formal_1089 (quote imp) a_1088 g_1091)))))))))))) (proc-e-memo-0-292 g_1060 a_1062 g_1061 g_1097 0 (collapse1-0-32 cont1_866)))))))) (let* ((g_1102 (_sim-fetch-app-exp r_3)) (g_1103 (_sim-fetch-app-args r_3))) (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_1121 (_sim-make-closure 31 (quote ()) (lambda (index_1104 values_1105 proj_1106 act_1107 formal_1108 rf*_1109 ra*_1110 pos_1111 ca_1112 c_1113) (let* ((new-v_1114 (_sim-make-closure index_1104 (quote ()) proj_1106 act_1107)) (p_1115 (list index_1104))) (c_1113 new-v_1114 p_1115 rf*_1109 ra*_1110 pos_1111 (_sim-upd-cache-cl index_1104 values_1105 new-v_1114 p_1115 pos_1111 ca_1112)))) (lambda (free-var-values_1116 arg-values_1117 c_1118) (c_1118 (_sim-isimperative? (list-ref arg-values_1117 0)))))) (cont1_1125 (lambda (a_1122) (proc-e-memo-0-124 r_0 a_1122 g_1121 r_2 g_1102 (collapse1-0-32 cont1_856))))) (if (_sim-isclosure? g_1102) (let ((g_1270 (_sim-make-closure 35 (list g_1103 r_2 r_1 r_0) (lambda (index_1126 values_1127 proj_1128 act_1129 formal_1130 rf*_1131 ra*_1132 pos_1133 ca_1134 c_1135) (let ((v_1136 (list-ref values_1127 0))) (project-value/rexp-1-49 (list-ref values_1127 1) formal_1130 ca_1134 (+ 1 (+ 1 pos_1133)) ra*_1132 rf*_1131 (collapse6-0-86 values_1127 formal_1130 v_1136 v_1136 values_1127 index_1126 c_1135 act_1129 proj_1128)))) (lambda (free-var-values_1141 arg-values_1142 c_1143) (let* ((residual-formal_1149 (_sim-generate-var-name! (quote value))) (g_1150 (_sim-build-var residual-formal_1149))) (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_1168 (_sim-make-closure 32 (quote ()) (lambda (index_1151 values_1152 proj_1153 act_1154 formal_1155 rf*_1156 ra*_1157 pos_1158 ca_1159 c_1160) (let* ((new-v_1161 (_sim-make-closure index_1151 (quote ()) proj_1153 act_1154)) (p_1162 (list index_1151))) (c_1160 new-v_1161 p_1162 rf*_1156 ra*_1157 pos_1158 (_sim-upd-cache-cl index_1151 values_1152 new-v_1161 p_1162 pos_1158 ca_1159)))) (lambda (free-var-values_1163 arg-values_1164 c_1165) (c_1165 (_sim-isimperative? (list-ref arg-values_1164 0)))))) (residual-formal_1169 (_sim-generate-var-name! (quote free-var-values))) (residual-formal_1171 (_sim-generate-var-name! (quote activation))) (g_1264 (_sim-make-closure 34 (list (_sim-build-var residual-formal_1171) (_sim-build-var residual-formal_1169) (list-ref free-var-values_1141 2)) (lambda (index_1173 values_1174 proj_1175 act_1176 formal_1177 rf*_1178 ra*_1179 pos_1180 ca_1181 c_1182) (project-value/rexp-2-68 formal_1177 (list-ref values_1174 0) ca_1181 (+ 1 pos_1180) ra*_1179 rf*_1178 (lambda (a_1185 b_1186 c_1187 d_1188 e_1189 f_1190) (project-value/rexp-2-68 formal_1177 (list-ref values_1174 1) f_1190 (+ 1 e_1189) d_1188 c_1187 (lambda (a_1193 b_1194 c_1195 d_1196 e_1197 f_1198) (project-value/rexp-0-13 (list-ref values_1174 2) formal_1177 f_1198 (+ 1 e_1197) d_1196 c_1195 (lambda (a_1201 b_1202 c_1203 d_1204 e_1205 f_1206) (let* ((new-v_1207 (_sim-make-closure index_1173 (list a_1185 a_1193 a_1201) proj_1175 act_1176)) (p_1208 (list index_1173 b_1186 b_1194 b_1202))) (c_1182 new-v_1207 p_1208 c_1203 d_1204 e_1205 (_sim-upd-cache-cl index_1173 values_1174 new-v_1207 p_1208 e_1205 f_1206)))))))))) (lambda (free-var-values_1212 arg-values_1213 c_1214) (let* ((g_1216 (list-ref free-var-values_1212 1)) (g_1217 (list-ref free-var-values_1212 0)) (g_1218 (list-ref arg-values_1213 0))) (project-value/rexp-0-13 (list-ref free-var-values_1212 2) (quote (c . 17)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_1220 b_1221 c_1222 d_1223 e_1224 f_1225) (let ((p*_1226 (list b_1221))) (project-value/rexp-2-68 (quote (free-var-values . 121)) g_1216 f_1225 (+ 1 e_1224) d_1223 c_1222 (lambda (a_1228 b_1229 c_1230 d_1231 e_1232 f_1233) (let ((p*_1234 (cons b_1229 p*_1226))) (project-value/rexp-2-68 (quote (activation . 122)) g_1217 f_1233 (+ 1 e_1232) d_1231 c_1230 (lambda (a_1236 b_1237 c_1238 d_1239 e_1240 f_1241) (let ((p*_1242 (cons b_1237 p*_1234))) (project-value/rexp-2-68 (quote (arg-values . 123)) g_1218 f_1241 (+ 1 e_1240) d_1239 c_1238 (lambda (a_1244 b_1245 c_1246 d_1247 e_1248 f_1249) (let* ((residual-name_seenb4_1250 (_sim-generate-proc-name! (quote proc-e-3) (cons (cons b_1245 p*_1242) (_sim-pos-pairs-in-cache f_1249)))) (residual-name_1251 (car residual-name_seenb4_1250))) (and (not (cdr residual-name_seenb4_1250)) (let ((g_1258 (let* ((residual-formal_1252 (_sim-generate-var-name! (quote value/rexp))) (g_1256 (proc-e-3-75 (list (_sim-build-var residual-formal_1252)) (_sim-get-closure-activation a_1220) (_sim-get-closure-values a_1220))) (g_1257 (_sim-build-abs (list residual-formal_1252) g_1256))) (_sim-build-app a_1236 (list a_1228 a_1244 g_1257))))) (_sim-add-residual-definition! (_sim-build-def residual-name_1251 c_1246 g_1258)))) (c_1214 (_sim-build-pcall residual-name_1251 d_1247)))))))))))))))))) (g_1266 (proc-e-memo-0-112 (list-ref free-var-values_1141 3) g_1264 g_1168 (list-ref free-var-values_1141 1) (list-ref free-var-values_1141 0) (collapse1-0-52 c_1143))) (g_1267 (_sim-build-let residual-formal_1171 (quote fun) (_sim-build-sel (quote _sim-get-closure-activation) 3 (quote _sim-make-closure) g_1150) g_1266)) (g_1268 (_sim-build-let residual-formal_1169 (quote fun) (_sim-build-sel (quote _sim-get-closure-values) 1 (quote _sim-make-closure) g_1150) g_1267))) (_sim-build-let residual-formal_1149 (quote fun) (list-ref arg-values_1142 0) g_1268))))))) (cont1_1125 g_1270)) (let ((g_1341 (_sim-make-closure 38 (list g_1103 r_2 r_1 r_0) (lambda (index_1271 values_1272 proj_1273 act_1274 formal_1275 rf*_1276 ra*_1277 pos_1278 ca_1279 c_1280) (let ((v_1281 (list-ref values_1272 0))) (project-value/rexp-1-49 (list-ref values_1272 1) formal_1275 ca_1279 (+ 1 (+ 1 pos_1278)) ra*_1277 rf*_1276 (collapse6-0-86 values_1272 formal_1275 v_1281 v_1281 values_1272 index_1271 c_1280 act_1274 proj_1273)))) (lambda (free-var-values_1286 arg-values_1287 c_1288) (let ((residual-formal_1294 (_sim-generate-var-name! (quote rexp)))) (_sim-pcall-test-output! (quote proc-e*)) (let* ((g_1313 (_sim-make-closure 36 (quote ()) (lambda (index_1296 values_1297 proj_1298 act_1299 formal_1300 rf*_1301 ra*_1302 pos_1303 ca_1304 c_1305) (let* ((new-v_1306 (_sim-make-closure index_1296 (quote ()) proj_1298 act_1299)) (p_1307 (list index_1296))) (c_1305 new-v_1306 p_1307 rf*_1301 ra*_1302 pos_1303 (_sim-upd-cache-cl index_1296 values_1297 new-v_1306 p_1307 pos_1303 ca_1304)))) (lambda (free-var-values_1308 arg-values_1309 c_1310) (c_1310 (_sim-isimperative? (list-ref arg-values_1309 0)))))) (g_1337 (_sim-make-closure 37 (list (list-ref free-var-values_1286 2) (_sim-build-var residual-formal_1294)) (lambda (index_1314 values_1315 proj_1316 act_1317 formal_1318 rf*_1319 ra*_1320 pos_1321 ca_1322 c_1323) (project-value/rexp-0-13 (list-ref values_1315 0) formal_1318 ca_1322 (+ 1 pos_1321) ra*_1320 rf*_1319 (collapse6-0-121 values_1315 formal_1318 values_1315 index_1314 c_1323 act_1317 proj_1316))) (lambda (free-var-values_1327 arg-values_1328 c_1329) (let ((g_1331 (list-ref free-var-values_1327 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote _sim-build-app) (list-ref free-var-values_1327 1) (list-ref arg-values_1328 0))) (_sim-get-closure-activation g_1331) (_sim-get-closure-values g_1331) c_1329))))) (g_1339 (proc-e-memo-0-112 (list-ref free-var-values_1286 3) g_1337 g_1313 (list-ref free-var-values_1286 1) (list-ref free-var-values_1286 0) (collapse1-0-52 c_1288)))) (_sim-build-let residual-formal_1294 (quote fun) (list-ref arg-values_1287 0) g_1339))))))) (cont1_1125 g_1341)))))))))))))))))))))))))))))) (define (proc-e-memo-0-297 r_0 r_1 r_2 r_3 c_4) (let ((cont1_5 (collapse1-0-32 c_4))) (if (= r_3 r_2) (begin (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-248 (collapse1-0-32 cont1_5))) (begin (_sim-pcall-test-output! (quote upd-env)) (_sim-pcall-test-output! (quote lookup-env)) (proc-e-memo-0-42 r_0 (list-ref r_1 r_3) (lambda (a_9) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-297 r_0 r_1 r_2 (+ 1 r_3) (lambda (a_11) (proc-e-memo-0-90 a_11 a_9 (collapse1-0-32 cont1_5)))))))))) (define (proc-e-memo-0-292 r_0 r_1 r_2 r_3 r_4 c_5) (let ((cont1_6 (collapse1-0-32 c_5))) (if (= r_4 r_2) (proc-e-3-39 (list r_1 (_sim-build-cst (quote ()))) (_sim-get-closure-activation r_3) (_sim-get-closure-values r_3) cont1_6) (let ((residual-formal_12 (_sim-generate-var-name! (quote residual-formal)))) (_sim-pcall-test-output! (quote loop)) (let* ((g_43 (_sim-make-closure 29 (list r_3 (_sim-build-var residual-formal_12)) (lambda (index_15 values_16 proj_17 act_18 formal_19 rf*_20 ra*_21 pos_22 ca_23 c_24) (project-value/rexp-0-13 (list-ref values_16 0) formal_19 ca_23 (+ 1 pos_22) ra*_21 rf*_20 (collapse6-0-121 values_16 formal_19 values_16 index_15 c_24 act_18 proj_17))) (lambda (free-var-values_28 arg-values_29 c_30) (let* ((g_31 (list-ref free-var-values_28 1)) (g_32 (list-ref free-var-values_28 0)) (g_33 (list-ref arg-values_29 1)) (free-var-values_35 (_sim-get-closure-values g_32)) (activation_36 (_sim-get-closure-activation g_32))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-90 (list-ref arg-values_29 0) (_sim-build-primop-l (quote _sim-build-var) g_31) (lambda (a_38) (proc-e-3-37 (list a_38 (_sim-build-primop-l (quote cons) g_31 g_33)) activation_36 free-var-values_35 c_30))))))) (g_45 (proc-e-memo-0-292 r_0 r_1 r_2 g_43 (+ 1 r_4) (collapse1-0-32 cont1_6)))) (_sim-build-let residual-formal_12 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (_sim-varname->name (list-ref r_0 r_4)))) g_45)))))) (define (proc-e-memo-0-283 r_0 r_1 r_2 r_3 c_4) (let ((cont1_5 (collapse1-0-32 c_4))) (if (= r_3 r_2) (cont1_5 (_sim-build-cst (quote ()))) (begin (_sim-pcall-test-output! (quote lookup-env)) (proc-e-memo-0-42 r_0 (list-ref r_1 r_3) (lambda (a_7) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-283 r_0 r_1 r_2 (+ 1 r_3) (lambda (a_9) (cont1_5 (_sim-build-primop-l (quote cons) a_7 a_9)))))))))) (define (proc-e-memo-0-277 r_0 r_1 r_2 r_3 c_4) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-278 r_3 r_0 r_1 r_2 (collapse1-0-32 c_4))) (define (proc-e-memo-0-278 r_0 r_1 r_2 r_3 c_4) (let* ((residual-formal_5 (_sim-generate-var-name! (quote value*))) (g_6 (_sim-build-var residual-formal_5)) (cont1_7 (collapse1-0-32 c_4)) (g_16 (if (= r_3 r_2) (cont1_7 r_1) (begin (_sim-pcall-test-output! (quote upd-env)) (let ((value/rexp_9 (_sim-build-primop-l (quote list-ref) g_6 (_sim-build-cst r_3)))) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-278 g_6 r_1 r_2 (+ 1 r_3) (lambda (a_11) (proc-e-memo-0-90 a_11 value/rexp_9 (collapse1-0-32 cont1_7))))))))) (_sim-build-let residual-formal_5 (quote fun) r_0 g_16))) (define (proc-e-memo-0-245 r_0 r_1 r_2 r_3 r_4 r_5 c_6) (let ((cont1_7 (collapse1-0-32 c_6))) (if (= r_5 r_3) (let* ((free-var-values_8 (_sim-get-closure-values r_4)) (activation_9 (_sim-get-closure-activation r_4))) (_sim-pcall-test-output! (quote init-env)) (proc-e-memo-0-248 (lambda (a_10) (proc-e-3-39 (list a_10) activation_9 free-var-values_8 cont1_7)))) (begin (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let* ((g_31 (_sim-make-closure 21 (quote ()) (lambda (index_14 values_15 proj_16 act_17 formal_18 rf*_19 ra*_20 pos_21 ca_22 c_23) (let* ((new-v_24 (_sim-make-closure index_14 (quote ()) proj_16 act_17)) (p_25 (list index_14))) (c_23 new-v_24 p_25 rf*_19 ra*_20 pos_21 (_sim-upd-cache-cl index_14 values_15 new-v_24 p_25 pos_21 ca_22)))) (lambda (free-var-values_26 arg-values_27 c_28) (c_28 (_sim-isimperative? (list-ref arg-values_27 0)))))) (g_112 (_sim-make-closure 23 (list r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_32 values_33 proj_34 act_35 formal_36 rf*_37 ra*_38 pos_39 ca_40 c_41) (let ((v_42 (list-ref values_33 0))) (project-value/rexp-0-13 (list-ref values_33 1) formal_36 ca_40 (+ 1 (+ 1 pos_39)) ra*_38 rf*_37 (lambda (a_46 b_47 c_48 d_49 e_50 f_51) (let* ((v_52 (list-ref values_33 2)) (v_54 (list-ref values_33 3))) (project-value/rexp-1-49 (list-ref values_33 4) formal_36 f_51 (+ 1 (+ 1 (+ 1 e_50))) d_49 c_48 (lambda (a_58 b_59 c_60 d_61 e_62 f_63) (let* ((v_64 (list-ref values_33 5)) (pos_65 (+ 1 e_62)) (new-v_66 (_sim-make-closure index_32 (list v_42 a_46 v_52 v_54 a_58 v_64) proj_34 act_35)) (p_67 (list index_32 v_42 b_47 v_52 v_54 b_59 v_64))) (c_41 new-v_66 p_67 c_60 d_61 pos_65 (_sim-upd-cache-cl index_32 values_33 new-v_66 p_67 pos_65 f_63)))))))))) (lambda (free-var-values_70 arg-values_71 c_72) (let ((residual-formal_80 (_sim-generate-var-name! (quote value/rexp)))) (_sim-pcall-test-output! (quote loop)) (let* ((g_108 (_sim-make-closure 22 (list (list-ref free-var-values_70 1) (_sim-build-var residual-formal_80)) (lambda (index_83 values_84 proj_85 act_86 formal_87 rf*_88 ra*_89 pos_90 ca_91 c_92) (project-value/rexp-0-13 (list-ref values_84 0) formal_87 ca_91 (+ 1 pos_90) ra*_89 rf*_88 (collapse6-0-121 values_84 formal_87 values_84 index_83 c_92 act_86 proj_85))) (lambda (free-var-values_96 arg-values_97 c_98) (let* ((g_100 (list-ref free-var-values_96 0)) (free-var-values_102 (_sim-get-closure-values g_100)) (activation_103 (_sim-get-closure-activation g_100))) (_sim-pcall-test-output! (quote upd-env)) (proc-e-memo-0-90 (list-ref arg-values_97 0) (list-ref free-var-values_96 1) (lambda (a_104) (proc-e-3-37 (list a_104) activation_103 free-var-values_102 c_98))))))) (g_110 (proc-e-memo-0-245 (list-ref free-var-values_70 5) (list-ref free-var-values_70 4) (list-ref free-var-values_70 3) (list-ref free-var-values_70 2) g_108 (+ 1 (list-ref free-var-values_70 0)) (collapse1-0-52 c_72)))) (_sim-build-let residual-formal_80 (quote fun) (list-ref arg-values_71 0) g_110))))))) (proc-e-memo-0-124 r_0 g_112 g_31 r_1 (list-ref r_2 r_5) (collapse1-0-32 cont1_7))))))) (define (proc-e-memo-0-248 c_0) (c_0 (_sim-make-psds (lambda (proj_1 value_2 formal_3 rf*_4 ra*_5 pos_6 ca_7 c_8) (let ((name_9 (_sim-get-constr-val-cstr-name value_2))) (_sim-get-constr-val-args value_2) (let* ((new-v_11 (_sim-make-psds proj_1 (_sim-make-constr-val name_9 (quote ())))) (p_12 (list name_9))) (c_8 new-v_11 p_12 rf*_4 ra*_5 pos_6 (_sim-upd-cache-ps value_2 new-v_11 p_12 pos_6 ca_7))))) (_sim-binding-nil)))) (define (proc-e-memo-0-162 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-163 r_5 r_6 r_7 (length r_5) r_0 r_1 r_2 r_3 r_4 0 (collapse1-0-32 c_8))) (define (proc-e-memo-0-163 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 r_8 r_9 c_10) (let* ((residual-formal_11 (_sim-generate-var-name! (quote formal))) (g_12 (_sim-build-var residual-formal_11)) (residual-formal_13 (_sim-generate-var-name! (quote v*))) (g_14 (_sim-build-var residual-formal_13)) (cont1_15 (collapse1-0-32 c_10)) (g_152 (if (= r_9 r_3) (proc-e-3-39 (list (_sim-build-cst (quote ())) (_sim-build-cst (quote ())) r_8 r_7 r_6 r_5) (_sim-get-closure-activation r_4) (_sim-get-closure-values r_4) cont1_15) (begin (_sim-pcall-test-output! (quote project-value/rexp)) (let ((g_149 (_sim-make-closure 51 (list r_9 r_4 r_3 g_12 g_14 r_0) (lambda (index_23 values_24 proj_25 act_26 formal_27 rf*_28 ra*_29 pos_30 ca_31 c_32) (let ((v_33 (list-ref values_24 0))) (project-value/rexp-0-13 (list-ref values_24 1) formal_27 ca_31 (+ 1 (+ 1 pos_30)) ra*_29 rf*_28 (lambda (a_37 b_38 c_39 d_40 e_41 f_42) (let ((v_43 (list-ref values_24 2))) (project-value/rexp-2-68 formal_27 (list-ref values_24 3) f_42 (+ 1 (+ 1 e_41)) d_40 c_39 (lambda (a_47 b_48 c_49 d_50 e_51 f_52) (project-value/rexp-2-68 formal_27 (list-ref values_24 4) f_52 (+ 1 e_51) d_50 c_49 (lambda (a_55 b_56 c_57 d_58 e_59 f_60) (let* ((v_61 (list-ref values_24 5)) (pos_62 (+ 1 e_59)) (new-v_63 (_sim-make-closure index_23 (list v_33 a_37 v_43 a_47 a_55 v_61) proj_25 act_26)) (p_64 (list index_23 v_33 b_38 v_43 b_48 b_56 v_61))) (c_32 new-v_63 p_64 c_57 d_58 pos_62 (_sim-upd-cache-cl index_23 values_24 new-v_63 p_64 pos_62 f_60)))))))))))) (lambda (free-var-values_68 arg-values_69 c_70) (let* ((residual-formal_83 (_sim-generate-var-name! (quote new-v))) (residual-formal_85 (_sim-generate-var-name! (quote p)))) (_sim-pcall-test-output! (quote loop)) (let* ((g_144 (_sim-make-closure 50 (list (list-ref free-var-values_68 1) (_sim-build-var residual-formal_83) (_sim-build-var residual-formal_85)) (lambda (index_88 values_89 proj_90 act_91 formal_92 rf*_93 ra*_94 pos_95 ca_96 c_97) (project-value/rexp-0-13 (list-ref values_89 0) formal_92 ca_96 (+ 1 pos_95) ra*_94 rf*_93 (lambda (a_100 b_101 c_102 d_103 e_104 f_105) (project-value/rexp-2-68 formal_92 (list-ref values_89 1) f_105 (+ 1 e_104) d_103 c_102 (lambda (a_108 b_109 c_110 d_111 e_112 f_113) (project-value/rexp-2-68 formal_92 (list-ref values_89 2) f_113 (+ 1 e_112) d_111 c_110 (lambda (a_116 b_117 c_118 d_119 e_120 f_121) (let* ((new-v_122 (_sim-make-closure index_88 (list a_100 a_108 a_116) proj_90 act_91)) (p_123 (list index_88 b_101 b_109 b_117))) (c_97 new-v_122 p_123 c_118 d_119 e_120 (_sim-upd-cache-cl index_88 values_89 new-v_122 p_123 e_120 f_121)))))))))) (lambda (free-var-values_127 arg-values_128 c_129) (let ((g_132 (list-ref free-var-values_127 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote cons) (list-ref free-var-values_127 1) (list-ref arg-values_128 0)) (_sim-build-primop-l (quote cons) (list-ref free-var-values_127 2) (list-ref arg-values_128 1)) (list-ref arg-values_128 2) (list-ref arg-values_128 3) (list-ref arg-values_128 4) (list-ref arg-values_128 5)) (_sim-get-closure-activation g_132) (_sim-get-closure-values g_132) c_129))))) (g_146 (proc-e-memo-0-163 (list-ref free-var-values_68 5) (list-ref free-var-values_68 4) (list-ref free-var-values_68 3) (list-ref free-var-values_68 2) g_144 (list-ref arg-values_69 5) (list-ref arg-values_69 4) (list-ref arg-values_69 3) (list-ref arg-values_69 2) (+ 1 (list-ref free-var-values_68 0)) (collapse1-0-52 c_70))) (g_147 (_sim-build-let residual-formal_85 (quote fun) (list-ref arg-values_69 1) g_146))) (_sim-build-let residual-formal_83 (quote fun) (list-ref arg-values_69 0) g_147))))))) (proc-e-memo-0-175 g_149 r_5 r_6 r_7 r_8 (list-ref r_0 r_9) (_sim-build-primop-l (quote list-ref) g_14 (_sim-build-cst r_9)) g_12 (collapse1-0-32 cont1_15)))))) (g_153 (_sim-build-let residual-formal_13 (quote fun) r_1 g_152))) (_sim-build-let residual-formal_11 (quote fun) r_2 g_153))) (define (proc-e-memo-0-175 r_0 r_1 r_2 r_3 r_4 r_5 r_6 r_7 c_8) (let* ((residual-formal_9 (_sim-generate-var-name! (quote formal))) (g_10 (_sim-build-var residual-formal_9)) (residual-formal_11 (_sim-generate-var-name! (quote v))) (g_12 (_sim-build-var residual-formal_11)) (residual-formal_13 (_sim-generate-var-name! (quote rf*))) (g_14 (_sim-build-var residual-formal_13)) (residual-formal_15 (_sim-generate-var-name! (quote ra*))) (g_16 (_sim-build-var residual-formal_15)) (residual-formal_17 (_sim-generate-var-name! (quote ca))) (g_18 (_sim-build-var residual-formal_17)) (residual-formal_20 (_sim-generate-var-name! (quote pos))) (g_21 (_sim-build-var residual-formal_20)) (cont1_22 (collapse1-0-32 c_8)) (g_520 (if (_sim-bt-static? r_5) (proc-e-3-39 (list g_12 g_12 g_14 g_16 g_21 g_18) (_sim-get-closure-activation r_0) (_sim-get-closure-values r_0) cont1_22) (begin (_sim-pcall-test-output! (quote collapse6)) (let ((cont1_461 (lambda (a_25) (let* ((g_91 (_sim-make-closure 47 (list a_25 g_14 g_16 g_21) (lambda (index_26 values_27 proj_28 act_29 formal_30 rf*_31 ra*_32 pos_33 ca_34 c_35) (project-value/rexp-0-13 (list-ref values_27 0) formal_30 ca_34 (+ 1 pos_33) ra*_32 rf*_31 (lambda (a_38 b_39 c_40 d_41 e_42 f_43) (project-value/rexp-2-68 formal_30 (list-ref values_27 1) f_43 (+ 1 e_42) d_41 c_40 (lambda (a_46 b_47 c_48 d_49 e_50 f_51) (project-value/rexp-2-68 formal_30 (list-ref values_27 2) f_51 (+ 1 e_50) d_49 c_48 (lambda (a_54 b_55 c_56 d_57 e_58 f_59) (project-value/rexp-2-68 formal_30 (list-ref values_27 3) f_59 (+ 1 e_58) d_57 c_56 (lambda (a_62 b_63 c_64 d_65 e_66 f_67) (let* ((new-v_68 (_sim-make-closure index_26 (list a_38 a_46 a_54 a_62) proj_28 act_29)) (p_69 (list index_26 b_39 b_47 b_55 b_63))) (c_35 new-v_68 p_69 c_64 d_65 e_66 (_sim-upd-cache-cl index_26 values_27 new-v_68 p_69 e_66 f_67)))))))))))) (lambda (free-var-values_74 arg-values_75 c_76) (let* ((g_80 (list-ref free-var-values_74 0)) (residual-formal_82 (_sim-generate-var-name! (quote x))) (g_83 (_sim-build-var residual-formal_82)) (g_89 (proc-e-3-37 (list (_sim-build-primop-l (quote caar) g_83) (_sim-build-primop-l (quote cadar) g_83) (list-ref free-var-values_74 1) (list-ref free-var-values_74 2) (list-ref free-var-values_74 3) (_sim-build-primop-l (quote cdr) g_83)) (_sim-get-closure-activation g_80) (_sim-get-closure-values g_80) c_76))) (_sim-build-let residual-formal_82 (quote fun) (list-ref arg-values_75 0) g_89))))) (cont1_92 (collapse1-0-32 cont1_22))) (if (_sim-bt-dynamic? r_5) (project-value/rexp-0-13 g_91 (quote (found-in-cache-cont . 189)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_94 b_95 c_96 d_97 e_98 f_99) (let ((p*_100 (list b_95))) (project-value/rexp-2-68 (quote (ca . 185)) g_18 f_99 (+ 1 e_98) d_97 c_96 (lambda (a_102 b_103 c_104 d_105 e_106 f_107) (let ((p*_108 (cons b_103 p*_100))) (project-value/rexp-2-68 (quote (pos . 187)) g_21 f_107 (+ 1 e_106) d_105 c_104 (lambda (a_110 b_111 c_112 d_113 e_114 f_115) (let ((p*_116 (cons b_111 p*_108))) (project-value/rexp-2-68 (quote (v . 180)) g_12 f_115 (+ 1 e_114) d_113 c_112 (lambda (a_118 b_119 c_120 d_121 e_122 f_123) (let ((p*_124 (cons b_119 p*_116))) (project-value/rexp-2-68 (quote (ra* . 183)) g_16 f_123 (+ 1 e_122) d_121 c_120 (lambda (a_126 b_127 c_128 d_129 e_130 f_131) (let ((p*_132 (cons b_127 p*_124))) (project-value/rexp-2-68 (quote (rf* . 182)) g_14 f_131 (+ 1 e_130) d_129 c_128 (lambda (a_134 b_135 c_136 d_137 e_138 f_139) (let ((p*_140 (cons b_135 p*_132))) (project-value/rexp-0-13 a_25 (quote (c . 188)) f_139 (+ 1 e_138) d_137 c_136 (lambda (a_142 b_143 c_144 d_145 e_146 f_147) (let ((p*_148 (cons b_143 p*_140))) (project-value/rexp-2-68 (quote (formal . 179)) g_10 f_147 (+ 1 e_146) d_145 c_144 (lambda (a_150 b_151 c_152 d_153 e_154 f_155) (let* ((residual-name_seenb4_156 (_sim-generate-proc-name! (quote project-value/rexp-2) (cons (cons b_151 p*_148) (_sim-pos-pairs-in-cache f_155)))) (residual-name_157 (car residual-name_seenb4_156))) (and (not (cdr residual-name_seenb4_156)) (let ((g_199 (let* ((residual-formal_158 (_sim-generate-var-name! (quote formal))) (residual-formal_160 (_sim-generate-var-name! (quote rf*))) (residual-formal_162 (_sim-generate-var-name! (quote ra*))) (residual-formal_164 (_sim-generate-var-name! (quote v))) (g_165 (_sim-build-var residual-formal_164)) (residual-formal_166 (_sim-generate-var-name! (quote pos))) (g_167 (_sim-build-var residual-formal_166)) (residual-formal_168 (_sim-generate-var-name! (quote ca))) (g_169 (_sim-build-var residual-formal_168)) (residual-formal_170 (_sim-generate-var-name! (quote x))) (g_171 (_sim-build-var residual-formal_170)) (residual-formal_174 (_sim-generate-var-name! (quote rf))) (g_175 (_sim-build-var residual-formal_174)) (residual-formal_176 (_sim-generate-var-name! (quote new-v))) (g_177 (_sim-build-var residual-formal_176)) (residual-formal_178 (_sim-generate-var-name! (quote p))) (g_179 (_sim-build-var residual-formal_178)) (g_185 (proc-e-3-75 (list g_177 g_179 (_sim-build-primop-l (quote cons) g_175 (_sim-build-var residual-formal_160)) (_sim-build-primop-l (quote cons) g_165 (_sim-build-var residual-formal_162)) g_167 (_sim-build-primop-l (quote _sim-upd-cache-d) g_165 g_177 g_179 g_167 g_169)) (_sim-get-closure-activation a_142) (_sim-get-closure-values a_142))) (g_186 (_sim-build-let residual-formal_178 (quote fun) (_sim-build-cst (quote hole)) g_185)) (g_187 (_sim-build-let residual-formal_176 (quote fun) (_sim-build-primop-l (quote _sim-build-var) g_175) g_186)) (rexp-then_188 (_sim-build-let residual-formal_174 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-primop-l (quote _sim-varname->name) (_sim-build-var residual-formal_158))) g_187)) (rexp-else_191 (proc-e-3-75 (list g_171) (_sim-get-closure-activation a_94) (_sim-get-closure-values a_94))) (g_192 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_171 (_sim-build-cst (quote not-found))) rexp-then_188 rexp-else_191)) (g_193 (_sim-build-let residual-formal_170 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-d) g_165 g_167 g_169) g_192)) (g_194 (_sim-build-let residual-formal_168 (quote fun) a_102 g_193)) (g_195 (_sim-build-let residual-formal_166 (quote fun) a_110 g_194)) (g_196 (_sim-build-let residual-formal_164 (quote fun) a_118 g_195)) (g_197 (_sim-build-let residual-formal_162 (quote fun) a_126 g_196)) (g_198 (_sim-build-let residual-formal_160 (quote fun) a_134 g_197))) (_sim-build-let residual-formal_158 (quote fun) a_150 g_198)))) (_sim-add-residual-definition! (_sim-build-def residual-name_157 c_152 g_199)))) (cont1_92 (_sim-build-pcall residual-name_157 d_153)))))))))))))))))))))))))) (let ((cont1_208 (collapse1-0-32 cont1_92))) (if (_sim-bt-psds? r_5) (project-value/rexp-0-13 g_91 (quote (found-in-cache-cont . 189)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_210 b_211 c_212 d_213 e_214 f_215) (let ((p*_216 (list b_211))) (project-value/rexp-0-13 a_25 (quote (c . 188)) f_215 (+ 1 e_214) d_213 c_212 (lambda (a_218 b_219 c_220 d_221 e_222 f_223) (let ((p*_224 (cons b_219 p*_216))) (project-value/rexp-2-68 (quote (ca . 185)) g_18 f_223 (+ 1 e_222) d_221 c_220 (lambda (a_226 b_227 c_228 d_229 e_230 f_231) (let ((p*_232 (cons b_227 p*_224))) (project-value/rexp-2-68 (quote (pos . 187)) g_21 f_231 (+ 1 e_230) d_229 c_228 (lambda (a_234 b_235 c_236 d_237 e_238 f_239) (let ((p*_240 (cons b_235 p*_232))) (project-value/rexp-2-68 (quote (ra* . 183)) g_16 f_239 (+ 1 e_238) d_237 c_236 (lambda (a_242 b_243 c_244 d_245 e_246 f_247) (let ((p*_248 (cons b_243 p*_240))) (project-value/rexp-2-68 (quote (rf* . 182)) g_14 f_247 (+ 1 e_246) d_245 c_244 (lambda (a_250 b_251 c_252 d_253 e_254 f_255) (let ((p*_256 (cons b_251 p*_248))) (project-value/rexp-2-68 (quote (formal . 179)) g_10 f_255 (+ 1 e_254) d_253 c_252 (lambda (a_258 b_259 c_260 d_261 e_262 f_263) (let ((p*_264 (cons b_259 p*_256))) (project-value/rexp-2-68 (quote (v . 180)) g_12 f_263 (+ 1 e_262) d_261 c_260 (lambda (a_266 b_267 c_268 d_269 e_270 f_271) (let* ((residual-name_seenb4_272 (_sim-generate-proc-name! (quote project-value/rexp-1) (cons (cons b_267 p*_264) (_sim-pos-pairs-in-cache f_271)))) (residual-name_273 (car residual-name_seenb4_272))) (and (not (cdr residual-name_seenb4_272)) (let ((g_322 (let* ((residual-formal_274 (_sim-generate-var-name! (quote v))) (g_275 (_sim-build-var residual-formal_274)) (residual-formal_276 (_sim-generate-var-name! (quote formal))) (residual-formal_278 (_sim-generate-var-name! (quote rf*))) (residual-formal_280 (_sim-generate-var-name! (quote ra*))) (residual-formal_282 (_sim-generate-var-name! (quote pos))) (g_283 (_sim-build-var residual-formal_282)) (residual-formal_284 (_sim-generate-var-name! (quote ca))) (g_285 (_sim-build-var residual-formal_284)) (residual-formal_286 (_sim-generate-var-name! (quote value))) (g_287 (_sim-build-var residual-formal_286)) (residual-formal_288 (_sim-generate-var-name! (quote x))) (g_289 (_sim-build-var residual-formal_288)) (residual-formal_291 (_sim-generate-var-name! (quote proj))) (g_292 (_sim-build-var residual-formal_291)) (residual-formal_293 (_sim-generate-var-name! (quote new-v))) (residual-formal_294 (_sim-generate-var-name! (quote p))) (residual-formal_295 (_sim-generate-var-name! (quote rf*))) (residual-formal_296 (_sim-generate-var-name! (quote ra*))) (residual-formal_297 (_sim-generate-var-name! (quote pos))) (residual-formal_298 (_sim-generate-var-name! (quote ca))) (g_307 (proc-e-3-75 (list (_sim-build-var residual-formal_293) (_sim-build-var residual-formal_294) (_sim-build-var residual-formal_295) (_sim-build-var residual-formal_296) (_sim-build-var residual-formal_297) (_sim-build-var residual-formal_298)) (_sim-get-closure-activation a_218) (_sim-get-closure-values a_218))) (g_308 (_sim-build-abs (list residual-formal_293 residual-formal_294 residual-formal_295 residual-formal_296 residual-formal_297 residual-formal_298) g_307)) (g_309 (_sim-build-app g_292 (list g_292 g_287 (_sim-build-var residual-formal_276) (_sim-build-var residual-formal_278) (_sim-build-var residual-formal_280) g_283 g_285 g_308))) (rexp-then_310 (_sim-build-let residual-formal_291 (quote fun) (_sim-build-sel (quote _sim-get-psds-projection) 0 (quote _sim-make-psds) g_275) g_309)) (rexp-else_313 (proc-e-3-75 (list g_289) (_sim-get-closure-activation a_210) (_sim-get-closure-values a_210))) (g_314 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_289 (_sim-build-cst (quote not-found))) rexp-then_310 rexp-else_313)) (g_315 (_sim-build-let residual-formal_288 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-ps) g_287 g_283 g_285) g_314)) (g_316 (_sim-build-let residual-formal_286 (quote fun) (_sim-build-sel (quote _sim-get-psds-value) 1 (quote _sim-make-psds) g_275) g_315)) (g_317 (_sim-build-let residual-formal_284 (quote fun) a_226 g_316)) (g_318 (_sim-build-let residual-formal_282 (quote fun) a_234 g_317)) (g_319 (_sim-build-let residual-formal_280 (quote fun) a_242 g_318)) (g_320 (_sim-build-let residual-formal_278 (quote fun) a_250 g_319)) (g_321 (_sim-build-let residual-formal_276 (quote fun) a_258 g_320))) (_sim-build-let residual-formal_274 (quote fun) a_266 g_321)))) (_sim-add-residual-definition! (_sim-build-def residual-name_273 c_268 g_322)))) (cont1_208 (_sim-build-pcall residual-name_273 d_269)))))))))))))))))))))))))) (let ((cont1_331 (collapse1-0-32 cont1_208))) (if (_sim-bt-closure? r_5) (project-value/rexp-0-13 g_91 (quote (found-in-cache-cont . 189)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_333 b_334 c_335 d_336 e_337 f_338) (let ((p*_339 (list b_334))) (project-value/rexp-0-13 a_25 (quote (c . 188)) f_338 (+ 1 e_337) d_336 c_335 (lambda (a_341 b_342 c_343 d_344 e_345 f_346) (let ((p*_347 (cons b_342 p*_339))) (project-value/rexp-2-68 (quote (ca . 185)) g_18 f_346 (+ 1 e_345) d_344 c_343 (lambda (a_349 b_350 c_351 d_352 e_353 f_354) (let ((p*_355 (cons b_350 p*_347))) (project-value/rexp-2-68 (quote (pos . 187)) g_21 f_354 (+ 1 e_353) d_352 c_351 (lambda (a_357 b_358 c_359 d_360 e_361 f_362) (let ((p*_363 (cons b_358 p*_355))) (project-value/rexp-2-68 (quote (ra* . 183)) g_16 f_362 (+ 1 e_361) d_360 c_359 (lambda (a_365 b_366 c_367 d_368 e_369 f_370) (let ((p*_371 (cons b_366 p*_363))) (project-value/rexp-2-68 (quote (rf* . 182)) g_14 f_370 (+ 1 e_369) d_368 c_367 (lambda (a_373 b_374 c_375 d_376 e_377 f_378) (let ((p*_379 (cons b_374 p*_371))) (project-value/rexp-2-68 (quote (formal . 179)) g_10 f_378 (+ 1 e_377) d_376 c_375 (lambda (a_381 b_382 c_383 d_384 e_385 f_386) (let ((p*_387 (cons b_382 p*_379))) (project-value/rexp-2-68 (quote (v . 180)) g_12 f_386 (+ 1 e_385) d_384 c_383 (lambda (a_389 b_390 c_391 d_392 e_393 f_394) (let* ((residual-name_seenb4_395 (_sim-generate-proc-name! (quote project-value/rexp-0) (cons (cons b_390 p*_387) (_sim-pos-pairs-in-cache f_394)))) (residual-name_396 (car residual-name_seenb4_395))) (and (not (cdr residual-name_seenb4_395)) (let ((g_449 (let* ((residual-formal_397 (_sim-generate-var-name! (quote v))) (g_398 (_sim-build-var residual-formal_397)) (residual-formal_399 (_sim-generate-var-name! (quote formal))) (residual-formal_401 (_sim-generate-var-name! (quote rf*))) (residual-formal_403 (_sim-generate-var-name! (quote ra*))) (residual-formal_405 (_sim-generate-var-name! (quote pos))) (g_406 (_sim-build-var residual-formal_405)) (residual-formal_407 (_sim-generate-var-name! (quote ca))) (g_408 (_sim-build-var residual-formal_407)) (residual-formal_409 (_sim-generate-var-name! (quote index))) (g_410 (_sim-build-var residual-formal_409)) (residual-formal_411 (_sim-generate-var-name! (quote values))) (g_412 (_sim-build-var residual-formal_411)) (residual-formal_413 (_sim-generate-var-name! (quote x))) (g_414 (_sim-build-var residual-formal_413)) (residual-formal_416 (_sim-generate-var-name! (quote proj))) (g_417 (_sim-build-var residual-formal_416)) (residual-formal_419 (_sim-generate-var-name! (quote new-v))) (residual-formal_420 (_sim-generate-var-name! (quote p))) (residual-formal_421 (_sim-generate-var-name! (quote rf*))) (residual-formal_422 (_sim-generate-var-name! (quote ra*))) (residual-formal_423 (_sim-generate-var-name! (quote pos))) (residual-formal_424 (_sim-generate-var-name! (quote ca))) (g_433 (proc-e-3-75 (list (_sim-build-var residual-formal_419) (_sim-build-var residual-formal_420) (_sim-build-var residual-formal_421) (_sim-build-var residual-formal_422) (_sim-build-var residual-formal_423) (_sim-build-var residual-formal_424)) (_sim-get-closure-activation a_341) (_sim-get-closure-values a_341))) (g_434 (_sim-build-abs (list residual-formal_419 residual-formal_420 residual-formal_421 residual-formal_422 residual-formal_423 residual-formal_424) g_433)) (g_435 (_sim-build-app g_417 (list g_410 g_412 g_417 (_sim-build-sel (quote _sim-get-closure-activation) 3 (quote _sim-make-closure) g_398) (_sim-build-var residual-formal_399) (_sim-build-var residual-formal_401) (_sim-build-var residual-formal_403) g_406 g_408 g_434))) (rexp-then_436 (_sim-build-let residual-formal_416 (quote fun) (_sim-build-sel (quote _sim-get-closure-projection) 2 (quote _sim-make-closure) g_398) g_435)) (rexp-else_439 (proc-e-3-75 (list g_414) (_sim-get-closure-activation a_333) (_sim-get-closure-values a_333))) (g_440 (_sim-build-cond (_sim-build-primop-l (quote equal?) g_414 (_sim-build-cst (quote not-found))) rexp-then_436 rexp-else_439)) (g_441 (_sim-build-let residual-formal_413 (quote fun) (_sim-build-primop-l (quote _sim-lookup-cache-cl) g_410 g_412 g_406 g_408) g_440)) (g_442 (_sim-build-let residual-formal_411 (quote fun) (_sim-build-sel (quote _sim-get-closure-values) 1 (quote _sim-make-closure) g_398) g_441)) (g_443 (_sim-build-let residual-formal_409 (quote fun) (_sim-build-sel (quote _sim-get-closure-index) 0 (quote _sim-make-closure) g_398) g_442)) (g_444 (_sim-build-let residual-formal_407 (quote fun) a_349 g_443)) (g_445 (_sim-build-let residual-formal_405 (quote fun) a_357 g_444)) (g_446 (_sim-build-let residual-formal_403 (quote fun) a_365 g_445)) (g_447 (_sim-build-let residual-formal_401 (quote fun) a_373 g_446)) (g_448 (_sim-build-let residual-formal_399 (quote fun) a_381 g_447))) (_sim-build-let residual-formal_397 (quote fun) a_389 g_448)))) (_sim-add-residual-definition! (_sim-build-def residual-name_396 c_391 g_449)))) (cont1_331 (_sim-build-pcall residual-name_396 d_392)))))))))))))))))))))))))) (_sim-build-primop-l (quote _sim-error) (_sim-build-cst (quote project-value/rexp)) (_sim-build-cst "unexpected binding time value: ~s") (_sim-build-cst r_5))))))))))) (project-value/rexp-0-13 r_0 (quote (cont . 261)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_463 b_464 c_465 d_466 e_467 f_468) (let* ((residual-name_seenb4_469 (_sim-generate-proc-name! (quote collapse6-0) (cons (list b_464) (_sim-pos-pairs-in-cache f_468)))) (residual-name_470 (car residual-name_seenb4_469))) (and (not (cdr residual-name_seenb4_469)) (let ((g_487 (let* ((residual-formal_471 (_sim-generate-var-name! (quote a))) (residual-formal_472 (_sim-generate-var-name! (quote b))) (residual-formal_473 (_sim-generate-var-name! (quote c))) (residual-formal_474 (_sim-generate-var-name! (quote d))) (residual-formal_475 (_sim-generate-var-name! (quote e))) (residual-formal_476 (_sim-generate-var-name! (quote f))) (g_485 (proc-e-3-75 (list (_sim-build-var residual-formal_471) (_sim-build-var residual-formal_472) (_sim-build-var residual-formal_473) (_sim-build-var residual-formal_474) (_sim-build-var residual-formal_475) (_sim-build-var residual-formal_476)) (_sim-get-closure-activation a_463) (_sim-get-closure-values a_463)))) (_sim-build-abs (list residual-formal_471 residual-formal_472 residual-formal_473 residual-formal_474 residual-formal_475 residual-formal_476) g_485)))) (_sim-add-residual-definition! (_sim-build-def residual-name_470 c_465 g_487)))) (let* ((residual-formal_488 (_sim-generate-var-name! (quote cont1))) (g_516 (_sim-make-closure 55 (list (_sim-build-var residual-formal_488)) (lambda (index_490 values_491 proj_492 act_493 formal_494 rf*_495 ra*_496 pos_497 ca_498 c_499) (project-value/rexp-2-68 formal_494 (list-ref values_491 0) ca_498 (+ 1 pos_497) ra*_496 rf*_495 (collapse6-0-77 values_491 formal_494 values_491 index_490 c_499 act_493 proj_492))) (lambda (free-var-values_503 arg-values_504 c_505) (c_505 (_sim-build-app (list-ref free-var-values_503 0) (list (list-ref arg-values_504 0) (list-ref arg-values_504 1) (list-ref arg-values_504 2) (list-ref arg-values_504 3) (list-ref arg-values_504 4) (list-ref arg-values_504 5))))))) (g_517 (cont1_461 g_516))) (_sim-build-let residual-formal_488 (quote fun) (_sim-build-pcall residual-name_470 d_466) g_517))))))))) (g_521 (_sim-build-let residual-formal_20 (quote fun) (_sim-build-primop-l (quote +) (_sim-build-cst 1) r_2) g_520)) (g_522 (_sim-build-let residual-formal_17 (quote fun) r_1 g_521)) (g_523 (_sim-build-let residual-formal_15 (quote fun) r_3 g_522)) (g_524 (_sim-build-let residual-formal_13 (quote fun) r_4 g_523)) (g_525 (_sim-build-let residual-formal_11 (quote fun) r_6 g_524))) (_sim-build-let residual-formal_9 (quote fun) r_7 g_525))) (define (collapse6-0-137 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let* ((v_13 (list-ref cont_0 1)) (pos_14 (+ 1 e_11)) (new-v_15 (_sim-make-closure cont_3 (list a_7 v_13) cont_6 cont_5)) (p_16 (list cont_3 b_8 v_13))) (cont_4 new-v_15 p_16 c_9 d_10 pos_14 (_sim-upd-cache-cl cont_3 cont_2 new-v_15 p_16 pos_14 f_12))))) (define (proc-e-memo-0-112 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-113 r_0 r_2 r_3 r_4 (length r_4) r_1 0 (collapse1-0-32 c_5))) (define (proc-e-memo-0-113 r_0 r_1 r_2 r_3 r_4 r_5 r_6 c_7) (let ((cont1_8 (collapse1-0-32 c_7))) (if (= r_6 r_4) (proc-e-3-39 (list (_sim-build-cst (quote ()))) (_sim-get-closure-activation r_5) (_sim-get-closure-values r_5) cont1_8) (begin (_sim-pcall-test-output! (quote proc-e-insert-let-if-pred)) (let ((g_101 (_sim-make-closure 40 (list r_6 r_5 r_4 r_3 r_2 r_1 r_0) (lambda (index_13 values_14 proj_15 act_16 formal_17 rf*_18 ra*_19 pos_20 ca_21 c_22) (let ((v_23 (list-ref values_14 0))) (project-value/rexp-0-13 (list-ref values_14 1) formal_17 ca_21 (+ 1 (+ 1 pos_20)) ra*_19 rf*_18 (lambda (a_27 b_28 c_29 d_30 e_31 f_32) (let* ((v_33 (list-ref values_14 2)) (v_35 (list-ref values_14 3))) (project-value/rexp-1-49 (list-ref values_14 4) formal_17 f_32 (+ 1 (+ 1 (+ 1 e_31))) d_30 c_29 (lambda (a_39 b_40 c_41 d_42 e_43 f_44) (project-value/rexp-0-13 (list-ref values_14 5) formal_17 f_44 (+ 1 e_43) d_42 c_41 (lambda (a_47 b_48 c_49 d_50 e_51 f_52) (let* ((v_53 (list-ref values_14 6)) (pos_54 (+ 1 e_51)) (new-v_55 (_sim-make-closure index_13 (list v_23 a_27 v_33 v_35 a_39 a_47 v_53) proj_15 act_16)) (p_56 (list index_13 v_23 b_28 v_33 v_35 b_40 b_48 v_53))) (c_22 new-v_55 p_56 c_49 d_50 pos_54 (_sim-upd-cache-cl index_13 values_14 new-v_55 p_56 pos_54 f_52)))))))))))) (lambda (free-var-values_60 arg-values_61 c_62) (let ((residual-formal_71 (_sim-generate-var-name! (quote value/rexp)))) (_sim-pcall-test-output! (quote loop)) (let* ((g_97 (_sim-make-closure 39 (list (list-ref free-var-values_60 1) (_sim-build-var residual-formal_71)) (lambda (index_74 values_75 proj_76 act_77 formal_78 rf*_79 ra*_80 pos_81 ca_82 c_83) (project-value/rexp-0-13 (list-ref values_75 0) formal_78 ca_82 (+ 1 pos_81) ra*_80 rf*_79 (collapse6-0-121 values_75 formal_78 values_75 index_74 c_83 act_77 proj_76))) (lambda (free-var-values_87 arg-values_88 c_89) (let ((g_91 (list-ref free-var-values_87 0))) (proc-e-3-37 (list (_sim-build-primop-l (quote cons) (list-ref free-var-values_87 1) (list-ref arg-values_88 0))) (_sim-get-closure-activation g_91) (_sim-get-closure-values g_91) c_89))))) (g_99 (proc-e-memo-0-113 (list-ref free-var-values_60 6) (list-ref free-var-values_60 5) (list-ref free-var-values_60 4) (list-ref free-var-values_60 3) (list-ref free-var-values_60 2) g_97 (+ 1 (list-ref free-var-values_60 0)) (collapse1-0-52 c_62)))) (_sim-build-let residual-formal_71 (quote fun) (list-ref arg-values_61 0) g_99))))))) (proc-e-memo-0-124 r_0 g_101 r_1 r_2 (list-ref r_3 r_6) (collapse1-0-32 cont1_8))))))) (define (proc-e-memo-0-124 r_0 r_1 r_2 r_3 r_4 c_5) (_sim-pcall-test-output! (quote proc-e)) ((_sim-get-closure-activation r_2) (_sim-get-closure-values r_2) (list r_4) (lambda (value/rexp_8) (let ((cont1_12 (lambda (a_9) (proc-e-memo-0-31 r_0 a_9 r_3 r_4 (collapse1-0-32 c_5))))) (if value/rexp_8 (let ((g_58 (_sim-make-closure 41 (list r_4 r_1) (lambda (index_13 values_14 proj_15 act_16 formal_17 rf*_18 ra*_19 pos_20 ca_21 c_22) (let ((v_23 (list-ref values_14 0))) (project-value/rexp-0-13 (list-ref values_14 1) formal_17 ca_21 (+ 1 (+ 1 pos_20)) ra*_19 rf*_18 (lambda (a_27 b_28 c_29 d_30 e_31 f_32) (let* ((new-v_33 (_sim-make-closure index_13 (list v_23 a_27) proj_15 act_16)) (p_34 (list index_13 v_23 b_28))) (c_22 new-v_33 p_34 c_29 d_30 e_31 (_sim-upd-cache-cl index_13 values_14 new-v_33 p_34 e_31 f_32))))))) (lambda (free-var-values_36 arg-values_37 c_38) (let* ((g_39 (list-ref free-var-values_36 1)) (residual-formal_42 (_sim-generate-var-name! (quote rexp))) (g_43 (_sim-build-var residual-formal_42)) (residual-formal_45 (_sim-generate-var-name! (quote residual-formal))) (g_46 (_sim-build-var residual-formal_45)) (value/rexp_47 (_sim-build-cst (_sim-fetch-eod-tag (list-ref free-var-values_36 0)))) (g_55 ((_sim-get-closure-activation g_39) (_sim-get-closure-values g_39) (list (_sim-build-primop-l (quote _sim-select-value) g_43 g_46)) (lambda (value/rexp_51) (let* ((residual-formal_52 (_sim-generate-var-name! (quote g))) (g_54 (c_38 (_sim-build-primop-l (quote _sim-conditional-build-let) g_46 value/rexp_47 g_43 (_sim-select-value value/rexp_51 residual-formal_52))))) (_sim-conditional-build-let residual-formal_52 (quote imp) value/rexp_51 g_54))))) (g_56 (_sim-build-let residual-formal_45 (quote imp) (_sim-build-primop-l (quote _sim-generate-var-name!) (_sim-build-cst (quote g))) g_55))) (_sim-build-let residual-formal_42 (quote fun) (list-ref arg-values_37 0) g_56)))))) (cont1_12 g_58)) (cont1_12 r_1)))))) (define (collapse6-0-121 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (project-value/rexp-2-68 cont_1 (list-ref cont_0 1) f_12 (+ 1 e_11) d_10 c_9 (lambda (a_15 b_16 c_17 d_18 e_19 f_20) (let* ((new-v_21 (_sim-make-closure cont_3 (list a_7 a_15) cont_6 cont_5)) (p_22 (list cont_3 b_8 b_16))) (cont_4 new-v_21 p_22 c_17 d_18 e_19 (_sim-upd-cache-cl cont_3 cont_2 new-v_21 p_22 e_19 f_20))))))) (define (proc-e-memo-0-90 r_0 r_1 c_2) (let* ((residual-formal_3 (_sim-generate-var-name! (quote g))) (g_35 (c_2 (_sim-make-psds (lambda (proj_5 value_6 formal_7 rf*_8 ra*_9 pos_10 ca_11 c_12) (let* ((name_13 (_sim-get-constr-val-cstr-name value_6)) (v*_14 (_sim-get-constr-val-args value_6))) (project-value/rexp-2-68 formal_7 (list-ref v*_14 0) ca_11 (+ 1 pos_10) ra*_9 rf*_8 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (project-value/rexp-1-49 (list-ref v*_14 1) formal_7 f_22 (+ 1 e_21) d_20 c_19 (lambda (a_25 b_26 c_27 d_28 e_29 f_30) (let* ((new-v_31 (_sim-make-psds proj_5 (_sim-make-constr-val name_13 (list a_17 a_25)))) (p_32 (list name_13 b_18 b_26))) (c_12 new-v_31 p_32 c_27 d_28 e_29 (_sim-upd-cache-ps value_6 new-v_31 p_32 e_29 f_30))))))))) (_sim-binding-cons (_sim-select-value r_1 residual-formal_3) r_0))))) (_sim-conditional-build-let residual-formal_3 (quote fun) r_1 g_35))) (define (collapse6-0-86 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6 cont_7 cont_8) (lambda (a_9 b_10 c_11 d_12 e_13 f_14) (project-value/rexp-0-13 (list-ref cont_0 2) cont_1 f_14 (+ 1 e_13) d_12 c_11 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (let* ((v_23 (list-ref cont_0 3)) (pos_24 (+ 1 e_21)) (new-v_25 (_sim-make-closure cont_5 (list cont_3 a_9 a_17 v_23) cont_8 cont_7)) (p_26 (list cont_5 cont_2 b_10 b_18 v_23))) (cont_6 new-v_25 p_26 c_19 d_20 pos_24 (_sim-upd-cache-cl cont_5 cont_4 new-v_25 p_26 pos_24 f_22))))))) (define (proc-e-memo-0-71 r_0 c_1) (project-value/rexp-0-13 r_0 (quote (cont . 257)) (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_3 b_4 c_5 d_6 e_7 f_8) (let* ((residual-name_seenb4_9 (_sim-generate-proc-name! (quote collapse1-0) (cons (list b_4) (_sim-pos-pairs-in-cache f_8)))) (residual-name_10 (car residual-name_seenb4_9))) (and (not (cdr residual-name_seenb4_9)) (let ((g_17 (let* ((residual-formal_11 (_sim-generate-var-name! (quote a))) (g_15 (proc-e-3-75 (list (_sim-build-var residual-formal_11)) (_sim-get-closure-activation a_3) (_sim-get-closure-values a_3)))) (_sim-build-abs (list residual-formal_11) g_15)))) (_sim-add-residual-definition! (_sim-build-def residual-name_10 c_5 g_17)))) (let* ((residual-formal_18 (_sim-generate-var-name! (quote cont1))) (g_41 (_sim-make-closure 53 (list (_sim-build-var residual-formal_18)) (lambda (index_20 values_21 proj_22 act_23 formal_24 rf*_25 ra*_26 pos_27 ca_28 c_29) (project-value/rexp-2-68 formal_24 (list-ref values_21 0) ca_28 (+ 1 pos_27) ra*_26 rf*_25 (collapse6-0-77 values_21 formal_24 values_21 index_20 c_29 act_23 proj_22))) (lambda (free-var-values_33 arg-values_34 c_35) (c_35 (_sim-build-app (list-ref free-var-values_33 0) (list (list-ref arg-values_34 0))))))) (g_42 (c_1 g_41))) (_sim-build-let residual-formal_18 (quote fun) (_sim-build-pcall residual-name_10 d_6) g_42)))))) (define (collapse6-0-77 cont_0 cont_1 cont_2 cont_3 cont_4 cont_5 cont_6) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let* ((new-v_13 (_sim-make-closure cont_3 (list a_7) cont_6 cont_5)) (p_14 (list cont_3 b_8))) (cont_4 new-v_13 p_14 c_9 d_10 e_11 (_sim-upd-cache-cl cont_3 cont_2 new-v_13 p_14 e_11 f_12))))) (define (proc-e-3-75 arg-values_0 activation_1 free-var-values_2) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_3) value/rexp_3))) (define (project-value/rexp-2-68 formal_0 v_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let ((x_7 (_sim-lookup-cache-d v_1 found-in-cache-cont_3 ca_2))) (if (equal? x_7 (quote not-found)) (let* ((rf_8 (_sim-generate-var-name! (_sim-varname->name formal_0))) (new-v_9 (_sim-build-var rf_8))) (found-in-cache-cont_6 new-v_9 (quote hole) (cons rf_8 found-in-cache-cont_5) (cons v_1 found-in-cache-cont_4) found-in-cache-cont_3 (_sim-upd-cache-d v_1 new-v_9 (quote hole) found-in-cache-cont_3 ca_2))) (found-in-cache-cont_6 (caar x_7) (cadar x_7) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_7))))) (define (proc-e-memo-0-58 c_0) (let ((g_18 (_sim-make-closure 0 (quote ()) (lambda (index_1 values_2 proj_3 act_4 formal_5 rf*_6 ra*_7 pos_8 ca_9 c_10) (let* ((new-v_11 (_sim-make-closure index_1 (quote ()) proj_3 act_4)) (p_12 (list index_1))) (c_10 new-v_11 p_12 rf*_6 ra*_7 pos_8 (_sim-upd-cache-cl index_1 values_2 new-v_11 p_12 pos_8 ca_9)))) (lambda (free-var-values_13 arg-values_14 c_15) (c_15 (list-ref arg-values_14 0)))))) (c_0 g_18))) (define (collapse1-0-52 cont_0) (lambda (a_1) (cont_0 a_1))) (define (project-value/rexp-1-49 v_0 formal_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let* ((value_7 (_sim-get-psds-value v_0)) (x_8 (_sim-lookup-cache-ps value_7 found-in-cache-cont_3 ca_2))) (if (equal? x_8 (quote not-found)) (let ((proj_9 (_sim-get-psds-projection v_0))) (proj_9 proj_9 value_7 formal_1 found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 ca_2 (lambda (new-v_10 p_11 rf*_12 ra*_13 pos_14 ca_15) (found-in-cache-cont_6 new-v_10 p_11 rf*_12 ra*_13 pos_14 ca_15)))) (found-in-cache-cont_6 (caar x_8) (cadar x_8) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_8))))) (define (proc-e-memo-0-42 r_0 r_1 c_2) (let ((cont1_3 (collapse1-0-32 c_2))) (if (_sim-binding-nil? (_sim-get-psds-value r_0)) (_sim-build-primop-l (quote _sim-error) (_sim-build-cst (quote lookup-env)) (_sim-build-cst "unbound variable: ~s") (_sim-build-cst r_1)) (let ((cont1_7 (collapse1-0-32 cont1_3))) (if (equal? r_1 0) (cont1_7 (_sim-binding-car (_sim-get-psds-value r_0))) (begin (_sim-pcall-test-output! (quote lookup-env)) (proc-e-memo-0-42 (_sim-binding-cdr (_sim-get-psds-value r_0)) (- r_1 1) (collapse1-0-32 cont1_7)))))))) (define (proc-e-3-39 arg-values_0 activation_1 free-var-values_2 c_3) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_4) (c_3 value/rexp_4)))) (define (proc-e-3-37 arg-values_0 activation_1 free-var-values_2 c_3) (activation_1 free-var-values_2 arg-values_0 (lambda (value/rexp_4) (c_3 value/rexp_4)))) (define (collapse1-0-32 cont_0) (lambda (a_1) (cont_0 a_1))) (define (project-value/rexp-0-13 v_0 formal_1 ca_2 found-in-cache-cont_3 found-in-cache-cont_4 found-in-cache-cont_5 found-in-cache-cont_6) (let* ((index_7 (_sim-get-closure-index v_0)) (values_8 (_sim-get-closure-values v_0)) (x_9 (_sim-lookup-cache-cl index_7 values_8 found-in-cache-cont_3 ca_2))) (if (equal? x_9 (quote not-found)) (let ((proj_10 (_sim-get-closure-projection v_0))) (proj_10 index_7 values_8 proj_10 (_sim-get-closure-activation v_0) formal_1 found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 ca_2 (lambda (new-v_11 p_12 rf*_13 ra*_14 pos_15 ca_16) (found-in-cache-cont_6 new-v_11 p_12 rf*_13 ra*_14 pos_15 ca_16)))) (found-in-cache-cont_6 (caar x_9) (cadar x_9) found-in-cache-cont_5 found-in-cache-cont_4 found-in-cache-cont_3 (cdr x_9))))) (define (collapse1-0-5) (lambda (a_0) a_0)) (_sim-initialize-magic! (quote ((string-append **similix-library** "scheme.adt") (string-append **similix-library** "spec.adt")))) (let* ((g_2 (list-ref value*_0 0)) (g_3 (_sim-generate-var-name! (quote g))) (g_4 (list-ref value*_0 2)) (g_5 (_sim-generate-var-name! (quote g)))) (project-value/rexp-2-68 (quote (residual-goal . 3)) g_5 (quote (() () () ())) 1 (quote ()) (quote ()) (lambda (a_7 b_8 c_9 d_10 e_11 f_12) (let ((p*_15 (list g_4 b_8))) (project-value/rexp-2-68 (quote (value* . 1)) g_3 f_12 (+ 1 (+ 1 e_11)) d_10 c_9 (lambda (a_17 b_18 c_19 d_20 e_21 f_22) (+ 1 e_21) (let* ((residual-name_seenb4_25 (_sim-generate-proc-name! (quote _sim-goal) (cons (cons g_2 (cons b_18 p*_15)) (_sim-pos-pairs-in-cache f_22)))) (residual-name_26 (car residual-name_seenb4_25))) (and (not (cdr residual-name_seenb4_25)) (let ((g_57 (let ((g_27 (_sim-build-cst g_2))) (_sim-pcall-test-output! (quote _sim-specialize)) (let* ((cont1_28 (collapse1-0-5)) (g_29 (_sim-fetch-pgm-udp g_4)) (g_30 (_sim-lookup-goal-procedure g_29)) (g_31 (car g_30)) (g_33 (_sim-fetch-def-btp g_31)) (residual-formal_35 (_sim-generate-var-name! (quote adt))) (g_36 (_sim-build-var residual-formal_35))) (_sim-pcall-test-output! (quote specialize-pcall)) (let ((value/rexp_37 (_sim-make-pseudo-call (cdr g_30) (length g_33)))) (_sim-pcall-test-output! (quote make-pseudo-environment)) (let* ((g_54 (begin (_sim-pcall-test-output! (quote loop)) (proc-e-memo-0-348 a_17 g_33 (length g_33) 0 (collapse1-0-32 (lambda (a_38) (_sim-pcall-test-output! (quote id-c)) (proc-e-memo-0-58 (lambda (a_39) (proc-e-memo-0-10 g_29 a_39 a_38 value/rexp_37 g_31 (lambda (a_40) (let* ((rexp_41 (_sim-build-primop-l (quote _sim-get-residual-program!))) (residual-formal_42 (_sim-generate-var-name! (quote g))) (g_44 (cont1_28 (_sim-build-primop-l (quote _sim-postprocess!) g_36 (_sim-select-value rexp_41 residual-formal_42) g_27 a_7))) (g_45 (_sim-conditional-build-let residual-formal_42 (quote imp) rexp_41 g_44))) (_sim-build-begin a_40 g_45))))))))))) (g_55 (_sim-build-begin (_sim-build-primop-l (quote _sim-initialize-magic!) g_36) g_54))) (_sim-build-let residual-formal_35 (quote fun) (_sim-build-cst (_sim-fetch-pgm-adt-file* g_4)) g_55))))))) (_sim-add-residual-definition! (_sim-build-def residual-name_26 c_19 g_57)))) (_sim-build-pcall residual-name_26 d_20))))))) (let ((g_60 (_sim-get-residual-program!))) (_sim-postprocess! (quote ((string-append **similix-library** "scheme.adt") (string-append **similix-library** "spec.adt"))) g_60 (quote _sim-specialize) residual-goal_1))))

